00:18:54.640 --> 00:18:58.110 align:start position:0%
改为 a += 12

00:18:58.120 --> 00:19:02.600 align:start position:0%
结果是一样的

00:19:02.610 --> 00:19:09.000 align:start position:0%
我们也可以把 b = 9 + b 改为 b += 9

00:19:09.010 --> 00:19:13.170 align:start position:0%
所以我们现在给一个变量加上一个值

00:19:13.180 --> 00:19:16.230 align:start position:0%
然后把结果赋值给变量

00:19:16.240 --> 00:19:20.490 align:start position:0%
这里我们可以改为 += 7

00:19:20.500 --> 00:19:25.019 align:start position:0%
这是一个简便方法

00:19:27.860 --> 00:19:30.970 align:start position:0%
前面我们学习了 +=

00:19:30.980 --> 00:19:33.850 align:start position:0%
-= 也一样，不过是减去一个数

00:19:33.860 --> 00:19:38.500 align:start position:0%
这里的意思是 a = a - 6

00:19:38.510 --> 00:19:42.100 align:start position:0%
a 的初始值是 11，减去 6 就是 5

00:19:42.110 --> 00:19:44.409 align:start position:0%
所以 a 现在的值就是 5

00:19:44.419 --> 00:19:49.779 align:start position:0%
但是我们可以把 a = a - 6 改得更简单

00:19:49.789 --> 00:19:51.970 align:start position:0%
改为 a -= 6

00:19:51.980 --> 00:19:53.710 align:start position:0%
这就是 JavaScript 的简便方法，意思是一样的

00:19:58.010 --> 00:20:00.430 align:start position:0%
意思就是 a = a - 6

00:20:00.440 --> 00:20:05.500 align:start position:0%
不过是更短的形式

00:20:05.510 --> 00:20:09.700 align:start position:0%
这里也一样，我们可以输入 b -= 15

00:20:09.710 --> 00:20:12.669 align:start position:0%
把 c = c - 1 改为 c -= 1

00:20:12.679 --> 00:20:16.180 align:start position:0%
就是从一个原始值减去一个数

00:20:16.190 --> 00:20:20.610 align:start position:0%
value and then assigns that new value to
然后把这个新的值赋值给变量

00:20:24.730 --> 00:20:26.549 align:start position:0%
这里我们输入了 a = a * 5

00:20:26.559 --> 00:20:32.370 align:start position:0%
我们可以和之前一样操作

00:20:32.380 --> 00:20:35.400 align:start position:0%
我们可以把它简写为 a *= 5

00:20:35.410 --> 00:20:41.130 align:start position:0%
意思是一样的

00:20:41.140 --> 00:20:45.630 align:start position:0%
这里我们可以改为 b *= 3

00:20:45.640 --> 00:20:49.200 align:start position:0%
把 c = c * 10 简写为 c *= 10

00:20:49.210 --> 00:20:53.410 align:start position:0%
这是 JavaScript 的另一种简写形式

00:20:56.810 --> 00:21:00.810 align:start position:0%
还有 /=

00:21:00.820 --> 00:21:05.320 align:start position:0%
a = a / 12 可以简写为 a /= 12

00:21:09.350 --> 00:21:13.720 align:start position:0%
这里可以写为 /= 4，或者 /= 11

00:21:13.730 --> 00:21:15.580 align:start position:0%
通过另一种方式让一个变量除以一个新的数

00:21:21.870 --> 00:21:24.200 align:start position:0%
然后把结果赋值给变量

00:21:24.210 --> 00:21:27.110 align:start position:0%
之前我们已经讲过一点字符数据类型

00:21:27.120 --> 00:21:29.690 align:start position:0%
一些字符外面有引号：单引号，双引号或者反引号

00:21:37.440 --> 00:21:40.820 align:start position:0%
就是字符数据，被叫作字符文字

00:21:40.830 --> 00:21:42.800 align:start position:0%
你可以像上面那样自己输入字符数据

00:21:42.810 --> 00:21:51.550 align:start position:0%
我再输入一些变量

00:22:04.400 --> 00:22:07.160 align:start position:0%
这就是在 JavaScript 中输入字符类型数据的方式

00:22:07.170 --> 00:22:10.940 align:start position:0%
有时候你输入的字符数据含有引号

00:22:10.950 --> 00:22:12.380 align:start position:0%
正常来说引号表示字符数据的开头和结尾

00:22:13.920 --> 00:22:21.370 align:start position:0%
但是如果你这样输入

00:22:21.380 --> 00:22:29.060 align:start position:0%
在双引号里面输入 I am a double quoted string

00:22:29.070 --> 00:22:33.890 align:start position:0%
所以我尝试在字符数据中使用双引号

00:22:37.470 --> 00:22:38.660 align:start position:0%
但是 JavaScript 并不理解应该怎么处理

00:22:40.410 --> 00:22:42.560 align:start position:0%
当它看到字符数据里的第一个引号时

00:22:42.570 --> 00:22:45.200 align:start position:0%
它会认为这是整个字符数据

00:22:48.330 --> 00:22:50.510 align:start position:0%
它认为这是字符数据的结尾

00:22:50.520 --> 00:22:53.630 align:start position:0%
有一种方式叫作转义

00:22:53.630 --> 00:22:53.640 align:start position:0%
如果你想要对一个引号转义

00:22:57.030 --> 00:22:59.450 align:start position:0%
也就是说让这个引号

00:22:59.460 --> 00:23:02.680 align:start position:0%
不被 JavaScript 认为是一个字符数据的结尾 
 
00:23:02.690 --> 00:23:06.260 align:start position:0%
我会输入一条反斜线

00:23:06.270 --> 00:23:09.830 align:start position:0%
所以我在这些引号之前都输入反斜线

00:23:09.840 --> 00:23:12.560 align:start position:0%
JavaScript 就不会再把它理解成字符数据的最后一位

00:23:16.920 --> 00:23:19.940 align:start position:0%
现在你可以看到这是整个字符数据

00:23:19.950 --> 00:23:24.080 align:start position:0%
如果我使用 console.log

00:23:26.190 --> 00:23:29.600 align:start position:0%
你可以看到它不会显示那些引号

00:23:29.610 --> 00:23:31.880 align:start position:0%
我的意思是它不会显示那些反斜线

00:23:34.410 --> 00:23:36.890 align:start position:0%
它显示出这些引号，而没有显示反斜线

00:23:36.900 --> 00:23:39.320 align:start position:0%
因为当我们输入反斜线和引号

00:23:39.330 --> 00:23:41.450 align:start position:0%
JavaScript 就知道它的意思就只是引号

00:23:49.110 --> 00:23:50.900 align:start position:0%
我们讲过了像这样对引号字符转义

00:23:50.910 --> 00:23:53.510 align:start position:0%
你在引号字符前面输入反斜线

00:23:55.680 --> 00:23:58.280 align:start position:0%
然后 JavaScript 就知道这是字符数据里面的引号字符

00:24:00.750 --> 00:24:02.750 align:start position:0%
不过其实我们不常对引号字符转义

00:24:04.770 --> 00:24:07.100 align:start position:0%
我们可以通过别的方法在字符数据中加入引号

00:24:13.830 --> 00:24:15.460 align:start position:0%
除了给字符数据使用双引号开头

00:24:19.260 --> 00:24:21.980 align:start position:0%
一种常用方法是使用单引号开头

00:24:21.990 --> 00:24:26.330 align:start position:0%
字符数据可以用单引号或者双引号

00:24:28.290 --> 00:24:32.810 align:start position:0%
这次我们使用单引号

00:24:32.820 --> 00:24:36.890 align:start position:0%
现在我删除字符数据中所有的转义符号

00:24:44.160 --> 00:24:46.580 align:start position:0%
然后你会发现 JavaScript 仍然理解这是一个字符数据

00:24:52.830 --> 00:24:56.090 align:start position:0%
即便它的内部有双引号

00:24:56.100 --> 00:25:00.170 align:start position:0%
另外你也可以使用反引号

00:25:00.180 --> 00:25:01.730 align:start position:0%
如果我在字符数据的开始和结尾输入反引号

00:25:05.400 --> 00:25:08.990 align:start position:0%
然后我就可以在它里面使用单引号或者双引号了

00:25:10.830 --> 00:25:13.340 align:start position:0%
不过现在我只想演示以双引号或者单引号开头与结束

00:25:16.380 --> 00:25:20.790 align:start position:0%
然后内部包含双引号

00:25:23.890 --> 00:25:26.340 align:start position:0%
我们讨论了通过在双引号前面加上反斜线

00:25:26.350 --> 00:25:28.590 align:start position:0%
对双引号字符转义

00:25:28.600 --> 00:25:30.390 align:start position:0%
其实你还可以对一些其他内容转义

00:25:32.650 --> 00:25:35.640 align:start position:0%
你可以对单引号转义

00:25:35.650 --> 00:25:37.710 align:start position:0%
对反斜线转义

00:25:37.720 --> 00:25:39.750 align:start position:0%
事实上当你想使用反斜线的时候

00:25:39.760 --> 00:25:43.590 align:start position:0%
你需要输入两条反斜线

00:25:43.600 --> 00:25:46.140 align:start position:0%
这样 JavaScript 就知道你不是在对一个字符转义

00:25:50.230 --> 00:25:55.220 align:start position:0%
你也可以这样输入一个换行符

00:25:55.230 --> 00:25:59.520 align:start position:0%
回车，跳格，退格，或者换页

00:25:59.530 --> 00:26:02.280 align:start position:0%
都是输入一条斜线和一个相应的字母

00:26:02.290 --> 00:26:04.860 align:start position:0%
我来举个例子

00:26:04.870 --> 00:26:08.940 align:start position:0%
我先输入变量 myStr

00:26:08.950 --> 00:26:10.860 align:start position:0%
我们要输入一个多行字符数据

00:26:14.080 --> 00:26:18.750 align:start position:0%
先输入 FirstLine

00:26:18.760 --> 00:26:21.720 align:start position:0%
输入 \n 增加第二行

00:26:21.730 --> 00:26:25.770 align:start position:0%
然后我要跳格，所以输入 \t 代表跳格

00:26:25.780 --> 00:26:28.140 align:start position:0%
输入 \\ 表示增加一条反斜线

00:26:28.150 --> 00:26:31.980 align:start position:0%
再输入 SecondLine

00:26:31.990 --> 00:26:35.760 align:start position:0%
输入 \n 和 ThridLine

00:26:38.350 --> 00:26:41.340 align:start position:0%
然后我在控制台显示，你就会看见有三行

00:26:43.929 --> 00:26:48.640 align:start position:0%
退格，以及反斜线字符

00:26:51.650 --> 00:26:54.250 align:start position:0%
你可以使用加号来连接字符数据

00:26:54.260 --> 00:26:57.580 align:start position:0%
这里我们有两个字符数据

00:26:57.590 --> 00:27:00.640 align:start position:0%
I come first 和 I come second

00:27:00.650 --> 00:27:04.630 align:start position:0%
这个（加号）把它们连在一起

00:27:08.419 --> 00:27:12.430 align:start position:0%
所以 ourStr 现在就是一个长的字符数据

00:27:12.440 --> 00:27:14.680 align:start position:0%
也就是 I come first I come second

00:27:14.690 --> 00:27:20.260 align:start position:0%
另一个例子

00:27:20.270 --> 00:27:23.139 align:start position:0%
变量 myStr 等于 This is the start

00:27:25.760 --> 00:27:27.940 align:start position:0%
然后我会在引号前面加一个空格

00:27:27.950 --> 00:27:29.620 align:start position:0%
因为当它们连在一起的时候

00:27:29.630 --> 00:27:33.060 align:start position:0%
我们希望两个句子之间有一个空格

00:27:33.070 --> 00:27:35.350 align:start position:0%
然后我输入 This is the end

00:27:35.360 --> 00:27:39.190 align:start position:0%
现在我们来看看它如何显示

00:27:39.200 --> 00:27:43.899 align:start position:0%
我输入 console.log(myStr)

00:27:45.799 --> 00:27:51.460 align:start position:0%
（如屏幕显示）可以看到这是一个长字符数据

00:27:54.590 --> 00:27:57.639 align:start position:0%
你也可以使用 += 运算符连接字符数据

00:27:59.960 --> 00:28:03.909 align:start position:0%
这个例子里，ourStr 的值是 I come first

00:28:03.919 --> 00:28:07.570 align:start position:0%
然后我们输入 ourString += I come second

00:28:10.279 --> 00:28:13.119 align:start position:0%
记住就跟你在操作数字时一样，+= 的意思是

00:28:15.740 --> 00:28:20.169 align:start position:0%
你把这里运算的结果加给变量

00:28:20.179 --> 00:28:22.509 align:start position:0%
所以我们把 I come second 加到 I come first 的后面

00:28:25.309 --> 00:28:30.159 align:start position:0%
这里我们再举一个例子

00:28:30.169 --> 00:28:33.399 align:start position:0%
变量 myStr 的值是 This is the first sentence

00:28:33.409 --> 00:28:35.740 align:start position:0%
然后我在后面加上一个空格

00:28:35.750 --> 00:28:39.090 align:start position:0%
因为我们要输入 myStr += This is the second sentence

00:28:45.769 --> 00:28:50.049 align:start position:0%
现在如果我们输入 console.log(myStr)

00:28:52.759 --> 00:28:55.389 align:start position:0%
我们可以看到这些句子连接在一起了

00:28:55.399 --> 00:28:57.999 align:start position:0%
（如屏幕显示）

00:29:03.740 --> 00:29:06.250 align:start position:0%
很棒

00:29:06.260 --> 00:29:09.220 align:start position:0%
你可以把字符数据和变量连接起来

00:29:09.230 --> 00:29:12.040 align:start position:0%
这里你可以看到变量 ourName 的值是 freeCodeCamp

00:29:12.050 --> 00:29:15.010 align:start position:0%
Hello, our name is，后面我们加上变量 ourName

00:29:17.840 --> 00:29:20.650 align:start position:0%
就连成了 Hello, our name is freeCodeCamp. How are you

00:29:22.010 --> 00:29:27.540 align:start position:0%
这里我们也做同样的操作

00:29:27.550 --> 00:29:33.010 align:start position:0%
so I'm gonna do my name equals o and
我输入 myName 的值是 Beau

00:29:33.020 --> 00:29:37.000 align:start position:0%
变量 myStr 的值是 My name is

00:29:37.010 --> 00:29:41.410 align:start position:0%
然后我加上变量 myName

00:29:43.580 --> 00:29:51.090 align:start position:0%
再接着写这个字符数据

00:29:51.100 --> 00:29:54.520 align:start position:0%
输入一个加号，和 and I am well

00:29:54.530 --> 00:29:56.080 align:start position:0%
这里和这里我加上一个空格

00:29:56.090 --> 00:29:59.110 align:start position:0%
因为你需要确保它们之间有合适的距离

00:29:59.120 --> 00:30:01.270 align:start position:0%
我们来看看它如何显示

00:30:01.280 --> 00:30:07.360 align:start position:0%
我输入 console.log(myStr)

00:30:11.809 --> 00:30:16.770 align:start position:0%
显示 My name is Beau and I am well

00:30:16.780 --> 00:30:19.800 align:start position:0%
看起来很好

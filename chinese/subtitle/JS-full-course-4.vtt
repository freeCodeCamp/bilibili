00:12:08.520 --> 00:12:10.970 align:start position:0%
意思是变量的值还未被定义

00:12:10.980 --> 00:12:15.410 align:start position:0%
我们还没有给它赋任何值

00:12:15.410 --> 00:12:15.420 align:start position:0%
不过这个很好解决

00:12:16.420 --> 00:12:18.110 align:start position:0%
给 a 赋值 5，给 b 赋值 10

00:12:18.120 --> 00:12:22.340 align:start position:0%
然后我们给 c 赋值一个字符类型的数据

00:12:22.340 --> 00:12:22.350 align:start position:0%
这个数据是 I am a

00:12:24.350 --> 00:12:28.490 align:start position:0%
你需要这样给它加上引号

00:12:28.500 --> 00:12:32.510 align:start position:0%
你可以看到 a = a + 1，等于 6

00:12:32.520 --> 00:12:35.960 align:start position:0%
就是 5 + 1 等于 6

00:12:35.970 --> 00:12:42.569 align:start position:0%
b = b + 5，就是 15

00:12:42.579 --> 00:12:45.519 align:start position:0%
c 就变成了 I am a String

00:12:45.529 --> 00:12:47.740 align:start position:0%
JavaScript 中的变量名和函数名要区分大小写

00:12:51.110 --> 00:12:54.519 align:start position:0%
就是说我们需要注意大写

00:12:54.529 --> 00:12:56.800 align:start position:0%
所以这个声明和这个赋值是不一样的

00:12:56.810 --> 00:12:59.470 align:start position:0%
即使字母是一样的

00:12:59.480 --> 00:13:01.629 align:start position:0%
但是大小写不一样

00:13:01.639 --> 00:13:05.050 align:start position:0%
所以不会正确赋值

00:13:05.060 --> 00:13:07.660 align:start position:0%
运行的时候你会发现这里出现报错

00:13:07.670 --> 00:13:10.329 align:start position:0%
因为我们还没有定义这个变量，没有声明它

00:13:13.459 --> 00:13:16.569 align:start position:0%
驼峰命名法是很常用的
 
00:13:16.579 --> 00:13:18.490 align:start position:0%
我来演示一下

00:13:18.500 --> 00:13:21.540 align:start position:0%
我们把这个改成 studlyCapVar

00:13:26.000 --> 00:13:28.119 align:start position:0%
所以第一个字母通常是小写

00:13:28.129 --> 00:13:30.280 align:start position:0%
然后当你增加一个新的词或者一个词的新的部分时

00:13:32.209 --> 00:13:36.879 align:start position:0%
它的第一个字母要大写

00:13:36.889 --> 00:13:39.280 align:start position:0%
然后我们改写这个变量

00:13:39.290 --> 00:13:44.220 align:start position:0%
这个没问题

00:13:44.230 --> 00:13:50.699 align:start position:0%
这个我们也把它改成 studlyCapVar

00:13:50.709 --> 00:13:55.689 align:start position:0%
这个应该是 properCamelCase，这个是 titleCaseOver

00:13:55.699 --> 00:13:57.850 align:start position:0%
现在我们定义了所有变量

00:13:57.860 --> 00:14:00.519 align:start position:0%
我们在这里声明它们

00:14:00.529 --> 00:14:02.439 align:start position:0%
在这里赋值

00:14:02.449 --> 00:14:04.269 align:start position:0%
这里就不会再显示错误了

00:14:04.279 --> 00:14:08.290 align:start position:0%
而是会显示我们想要它显示的

00:14:10.950 --> 00:14:12.230 align:start position:0%
用 JavaScript 做加法非常直接

00:14:14.670 --> 00:14:17.780 align:start position:0%
你只需要使用加号

00:14:17.790 --> 00:14:20.510 align:start position:0%
这个是 10 加上 0，等于 10

00:14:20.520 --> 00:14:24.770 align:start position:0%
我们也可以用 10 加上 10，就等于 20

00:14:24.780 --> 00:14:27.620 align:start position:0%
然后如果我们输入 console.log(sum)

00:14:27.630 --> 00:14:30.440 align:start position:0%
就会看到这里显示答案是 20

00:14:37.220 --> 00:14:39.670 align:start position:0%
控制台显示 10 加上 10，等于 20

00:14:39.680 --> 00:14:41.470 align:start position:0%
你应该已经想到减法是怎样的

00:14:41.480 --> 00:14:45.069 align:start position:0%
这里我们输入减号

00:14:45.079 --> 00:14:49.090 align:start position:0%
意思是 45 减去 0

00:14:49.100 --> 00:14:55.300 align:start position:0%
我们也可以输入 45 减去 33，就等于 12

00:14:55.310 --> 00:14:57.970 align:start position:0%
所以变量 difference 现在等于 12

00:14:57.980 --> 00:15:00.670 align:start position:0%
JavaScript 里的乘法使用这个星号

00:15:04.970 --> 00:15:07.660 align:start position:0%
这个表示 8 乘以 0，等于 0

00:15:07.670 --> 00:15:14.489 align:start position:0%
我们可以改成 8 乘以 10，等于 80

00:15:14.499 --> 00:15:17.009 align:start position:0%
现在变量 product 就等于 80
 
00:15:17.019 --> 00:15:20.789 align:start position:0%
在 JavaScript 中你可以使用这个斜线做除法

00:15:20.799 --> 00:15:23.999 align:start position:0%
slash symbol so this says 66 divided by
这个是指 66 除以 0

00:15:24.009 --> 00:15:28.469 align:start position:0%
我们把它改成 33

00:15:28.479 --> 00:15:32.879 align:start position:0%
所以现在 66 除以 33 的商是 2

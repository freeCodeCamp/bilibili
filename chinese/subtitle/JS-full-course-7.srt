00:30:19.810 --> 00:30:22.620 align:start position:0%
你可以用 += 把变量转换成字符串

00:30:22.630 --> 00:30:24.510 align:start position:0%
你可以看到这个变量 anAdjective，它的赋值是 awesome

00:30:27.160 --> 00:30:30.270 align:start position:0%
然后我们有另一个变量 ourStr，赋值 freeCodeCamp is

00:30:33.130 --> 00:30:36.720 align:start position:0%
用 += 将两个变量连接起来

00:30:36.730 --> 00:30:41.130 align:start position:0%
现在 ourStr 变量的值就是 freeCodeCamp is awesome

00:30:44.470 --> 00:30:49.640 align:start position:0%
另一个例子

00:30:49.650 --> 00:30:54.000 align:start position:0%
我们定义变量 someAdjective 的值为 worthwhile

00:30:54.010 --> 00:30:58.890 align:start position:0%
然后我们使用 +=

00:30:58.900 --> 00:31:02.700 align:start position:0%
输入 myStr += someAdjective

00:31:07.450 --> 00:31:13.930 align:start position:0%
myStr 的值就成为了 Learning to code is worthwhile

00:31:16.130 --> 00:31:19.450 align:start position:0%
有时候你想要计算一个字符串的长度

00:31:19.460 --> 00:31:21.160 align:start position:0%
用 JavaScript 代码很容易实现

00:31:21.170 --> 00:31:24.520 align:start position:0%
变量 firstName 赋值为 Ada

00:31:24.530 --> 00:31:27.490 align:start position:0%
我们使用 .length 属性确定长度

00:31:27.500 --> 00:31:29.620 align:start position:0%
所以就是 firstName.length

00:31:29.630 --> 00:31:32.320 align:start position:0%
记住 firstName 的值是 Ada

00:31:32.330 --> 00:31:34.420 align:start position:0%
然后 .length 就会返回一个整数

00:31:34.430 --> 00:31:36.610 align:start position:0%
也就是字符串中字母的数量

00:31:36.620 --> 00:31:39.250 align:start position:0%
结果就是 3

00:31:39.260 --> 00:31:40.150 align:start position:0%
我们再试一次

00:31:40.160 --> 00:31:42.940 align:start position:0%
另一个例子

00:31:42.950 --> 00:31:46.510 align:start position:0%
lastNameLength 等于 lastName

00:31:46.520 --> 00:31:48.700 align:start position:0%
我们需要输入 .length

00:31:48.710 --> 00:31:51.520 align:start position:0%
使用 console.log

00:31:51.530 --> 00:31:55.120 align:start position:0%
输入 lastNameLength

00:31:55.130 --> 00:31:57.610 align:start position:0%
点击运行

00:31:57.620 --> 00:32:04.030 align:start position:0%
结果是 8

00:32:04.040 --> 00:32:06.770 align:start position:0%
因为这个字符串 lovelace 有 8 个字母
 
00:32:06.780 --> 00:32:09.170 align:start position:0%
可以使用括号来索引一个字符串中的字母

00:32:11.100 --> 00:32:13.460 align:start position:0%
这里变量 firstName 的值是 Ada

00:32:13.470 --> 00:32:15.650 align:start position:0%
这里 firstName 后面有个括号

00:32:21.210 --> 00:32:23.120 align:start position:0%
里面有一个数字

00:32:23.130 --> 00:32:26.300 align:start position:0%
大部分现代编程语言比如 JavaScript

00:32:26.310 --> 00:32:29.630 align:start position:0%
不是和我们平时一样从 1 开始计数

00:32:29.640 --> 00:32:32.690 align:start position:0%
而是从 0 开始

00:32:32.700 --> 00:32:35.570 align:start position:0%
这叫作从 0 开始的索引

00:32:35.580 --> 00:32:38.300 align:start position:0%
所以数字 0 指的是字符串的第一位

00:32:41.580 --> 00:32:45.710 align:start position:0%
也就是 A

00:32:45.720 --> 00:32:48.590 align:start position:0%
d 对应数字 1，a 对应数字 2

00:32:48.600 --> 00:32:50.840 align:start position:0%
所以 firstName 的第一个字母

00:32:50.850 --> 00:32:54.530 align:start position:0%
如果我们输入 firstName[0]

00:32:54.540 --> 00:32:57.410 align:start position:0%
结果就是 A

00:32:57.420 --> 00:33:01.490 align:start position:0%
我们再举一个例子

00:33:01.500 --> 00:33:03.260 align:start position:0%
我们想要索引变量 lastName 的第一个字母

00:33:03.270 --> 00:33:06.830 align:start position:0%
那么我们在括号中输入数字 0

00:33:06.840 --> 00:33:10.340 align:start position:0%
如果我想要索引第二个字母

00:33:10.350 --> 00:33:13.910 align:start position:0%
我就在括号中输入 1

00:33:13.920 --> 00:33:16.570 align:start position:0%
如果我输入 console.log

00:33:20.970 --> 00:33:23.660 align:start position:0%
（如屏幕显示）

00:33:23.670 --> 00:33:29.789 align:start position:0%
控制台会显示 L

00:33:29.799 --> 00:33:32.710 align:start position:0%
因为第一个字母是 L

00:33:32.720 --> 00:33:36.609 align:start position:0%
字符串是不可变的

00:33:36.619 --> 00:33:38.440 align:start position:0%
意思是一个字符串在创建之后就不能改变

00:33:38.450 --> 00:33:41.529 align:start position:0%
但这并不是说不能改变一个字符串整体

00:33:41.539 --> 00:33:44.289 align:start position:0%
只是不能改变字符串的单个字母

00:33:44.299 --> 00:33:46.659 align:start position:0%
string literal cannot be changed so look
所以我们看这个例子

00:33:46.669 --> 00:33:48.999 align:start position:0%
我们用括号法选取 myStr 中的第一个字母

00:33:51.529 --> 00:33:53.889 align:start position:0%
现在这个变量的值是 Jello World

00:33:53.899 --> 00:33:57.159 align:start position:0%
我们想把第一个字母改为 H

00:33:57.169 --> 00:33:59.169 align:start position:0%
也就是 Hello World

00:33:59.179 --> 00:34:02.039 align:start position:0%
但是如果我运行的话，因为字符串的不可变性，它会显示错误

00:34:04.669 --> 00:34:06.789 align:start position:0%
我们还是可以把它改为 Hello World

00:34:06.799 --> 00:34:09.399 align:start position:0%
只是我们不能像那样只改第一个字母

00:34:09.409 --> 00:34:12.309 align:start position:0%
所以我们得输入 myStr =

00:34:13.819 --> 00:34:19.240 align:start position:0%
输入整个字符串 Hello World

00:34:25.690 --> 00:34:29.020 align:start position:0%
这样我们就把这个字符串改为了 Hello World

00:34:29.030 --> 00:34:31.540 align:start position:0%
你可以使用括号找出一个字符串中的任何字母的位置

00:34:33.919 --> 00:34:35.800 align:start position:0%
所以我们刚才找出了第一个字母

position
现在我们找出第二个字母

00:34:39.140 --> 00:34:40.990 align:start position:0%
记住从零开始的索引方法

00:34:41.000 --> 00:34:43.690 align:start position:0%
1 表示第二位

00:34:43.700 --> 00:34:45.790 align:start position:0%
position we can also get the third
0 表示第一位

00:34:45.800 --> 00:34:47.680 align:start position:0%
我们也可以找出变量 lastName 的第三个字母

00:34:47.690 --> 00:34:49.930 align:start position:0%
我们在括号中输入 2

00:34:49.940 --> 00:34:54.050 align:start position:0%
来找出第三个字母

00:34:56.610 --> 00:34:59.360 align:start position:0%
你也可以用括号法找出一个字符串中的最后一个字母

00:35:01.170 --> 00:35:04.160 align:start position:0%
即使你不知道这个字符串中有多少字母

00:35:04.170 --> 00:35:06.530 align:start position:0%
你可以根据它的长度来确定

00:35:06.540 --> 00:35:09.170 align:start position:0%
所以你看这个括号中我们输入一行表达

00:35:12.690 --> 00:35:17.590 align:start position:0%
firstName.length - 1

00:35:17.600 --> 00:35:20.330 align:start position:0%
长度是 3，3 减去 1 就是 2

00:35:20.340 --> 00:35:22.760 align:start position:0%
我们之所以减去 1 是因为我们从 0 开始计数

00:35:25.830 --> 00:35:28.970 align:start position:0%
所以长度减去 1 就是这个变量的最后一位

00:35:28.980 --> 00:35:31.550 align:start position:0%
这里我们也可以采取同样的操作

00:35:36.620 --> 00:35:43.730 align:start position:0%
来找出变量 lastName 的最后一个字母

00:35:43.740 --> 00:35:45.770 align:start position:0%
我输入 lastName.length - 1

00:35:45.780 --> 00:35:51.070 align:start position:0%
就找到了变量 lastName 的最后一个字母

00:35:51.080 --> 00:35:53.800 align:start position:0%
也就是 e

00:35:53.810 --> 00:35:56.050 align:start position:0%
我们已经看到了如何使用括号法

00:35:56.060 --> 00:35:58.420 align:start position:0%
来找出一个字符串的最后一个字母

00:35:58.430 --> 00:35:59.950 align:start position:0%
你也可以找出倒数第三个或倒数第四个字母

00:36:02.540 --> 00:36:05.080 align:start position:0%
so you just subtract however much you
你想找出倒数第几个

00:36:05.090 --> 00:36:07.420 align:start position:0%
就直接从字符长度中减去多少

00:36:07.430 --> 00:36:09.880 align:start position:0%
所以我们在括号中输入

00:36:09.890 --> 00:36:12.070 align:start position:0%
firstName.length - 3

00:36:12.080 --> 00:36:14.830 align:start position:0%
就找出了倒数第三个字母

00:36:14.840 --> 00:36:17.800 align:start position:0%
我们想找出这个变量的倒数第二个字母

00:36:17.810 --> 00:36:20.410 align:start position:0%
也是类似的操作方式

00:36:20.420 --> 00:36:23.770 align:start position:0%
我们输入 lastName.length

00:36:23.780 --> 00:36:27.100 align:start position:0%
然后减去 2

00:36:27.110 --> 00:36:31.260 align:start position:0%
就找出了这个字符串的倒数第二个字母

00:36:33.790 --> 00:36:36.900 align:start position:0%
现在我们运用我们关于字符串的知识

00:36:36.910 --> 00:36:39.750 align:start position:0%
来创建一个疯狂填词游戏

00:36:39.760 --> 00:36:42.359 align:start position:0%
疯狂填词游戏会给你一些句子

00:36:42.369 --> 00:36:45.329 align:start position:0%
句子中缺少一些单词

00:36:45.339 --> 00:36:47.700 align:start position:0%
比如名词，动词，形容词和副词

00:36:47.710 --> 00:36:50.460 align:start position:0%
然后你选择单词填写到空缺的地方

00:36:50.470 --> 00:36:52.320 align:start position:0%
组成一个可能会很有趣也有一定意义的句子

00:36:55.030 --> 00:36:56.220 align:start position:0%
我来介绍一下怎么做

00:36:59.980 --> 00:37:02.640 align:start position:0%
这里也会用到函数

00:37:02.650 --> 00:37:05.790 align:start position:0%
目前我们还没讲到函数

00:37:05.800 --> 00:37:07.740 align:start position:0%
我稍后会详细讲解

00:37:07.750 --> 00:37:09.599 align:start position:0%
但是现在就先用它

00:37:09.609 --> 00:37:12.900 align:start position:0%
因为它不是本节内容的重点

00:37:12.910 --> 00:37:15.750 align:start position:0%
这个函数叫作 wordBlanks

00:37:15.760 --> 00:37:18.780 align:start position:0%
你可以调用函数

00:37:18.790 --> 00:37:22.380 align:start position:0%
但是你必须传入某些类型的单词

00:37:22.390 --> 00:37:26.910 align:start position:0%
你输入一个名词，一个形容词，一个动词和一个副词

00:37:26.920 --> 00:37:29.640 align:start position:0%
所以这里你可以看到我们调用函数 wordBlanks

00:37:31.690 --> 00:37:35.010 align:start position:0%
这是函数名

00:37:35.020 --> 00:37:39.270 align:start position:0%
我们传入一个名词，一个形容词，一个动词和一个副词

00:37:39.280 --> 00:37:42.270 align:start position:0%
注意我们将使用这些传入的词来组一个句子

00:37:49.030 --> 00:37:52.230 align:start position:0%
我们知道这个 result 变量的初始值是一个空字符串

00:37:52.240 --> 00:37:55.109 align:start position:0%
稍后我们需要使用所有这些单词和 result 变量

00:37:58.060 --> 00:38:00.180 align:start position:0%
result 将从 wordBlanks 函数返回

00:38:00.190 --> 00:38:02.190 align:start position:0%
最后我们将使用 console.log 显示结果

00:38:06.630 --> 00:38:11.820 align:start position:0%
dot log so what I'm gonna do here is do
所以我在这里输入 result +=

00:38:11.830 --> 00:38:14.339 align:start position:0%
我们通过 += 给变量 result 加上一些东西

00:38:17.080 --> 00:38:20.520 align:start position:0%
也会使用这些名词，形容词，动词和副词

00:38:24.580 --> 00:38:31.620 align:start position:0%
输入 The，然后输入 myAdjective

00:38:31.630 --> 00:38:36.390 align:start position:0%
myAdjective 现在是指 big

00:38:36.400 --> 00:38:40.890 align:start position:0%
然后我们输入名词，myNoun

00:38:40.900 --> 00:38:45.290 align:start position:0%
因为形容词是用来修饰名词的

00:38:45.300 --> 00:38:47.930 align:start position:0%
a big dog（一只大狗）

00:38:47.940 --> 00:38:53.590 align:start position:0%
然后我们输入这个名词正在做什么，即动词，myVerb

00:38:53.600 --> 00:38:58.480 align:start position:0%
The big dog ran（一只大狗跑）

00:38:58.490 --> 00:39:03.230 align:start position:0%
那么它跑向哪里呢

00:39:03.240 --> 00:39:06.200 align:start position:0%
to the store（跑向商店）

00:39:06.210 --> 00:39:08.750 align:start position:0%
这里我们需要输入一个空格

00:39:14.640 --> 00:39:20.120 align:start position:0%
然后我们输入副词

00:39:20.130 --> 00:39:22.250 align:start position:0%
最后输入一个句号

00:39:22.260 --> 00:39:25.400 align:start position:0%
现在我们还需要输入一些东西

00:39:25.410 --> 00:39:28.010 align:start position:0%
在 myAdjective，myNoun，myVerb 之间没有空格

00:39:30.630 --> 00:39:32.120 align:start position:0%
如果我点击运行

00:39:32.130 --> 00:39:35.690 align:start position:0%
你会看到控制台显示

00:39:35.700 --> 00:39:38.240 align:start position:0%
（如屏幕显示）没有空格

00:39:41.930 --> 00:39:52.340 align:start position:0%
所以我们需要在这之间输入空格

00:39:52.350 --> 00:39:55.160 align:start position:0%
现在我们再运行

00:39:55.170 --> 00:39:59.480 align:start position:0%
这些名词、形容词、动词和副词就被放进句子里了

00:40:02.310 --> 00:40:04.370 align:start position:0%
有趣的是我们其实可以传入不同的单词

00:40:04.380 --> 00:40:06.500 align:start position:0%
比如我复制粘贴这一句

00:40:10.050 --> 00:40:15.290 align:start position:0%
我删掉 dog 这个单词，输入 bike（自行车）

00:40:15.300 --> 00:40:23.300 align:start position:0%
和一个形容词，我输入 slow（慢的）

00:40:23.310 --> 00:40:31.730 align:start position:0%
动词我输入 flew（飞行）

00:40:31.740 --> 00:40:35.930 align:start position:0%
副词我输入 slowly（慢慢地）

00:40:35.940 --> 00:40:38.540 align:start position:0%
现在我们看控制台

00:40:38.550 --> 00:40:41.120 align:start position:0%
我们就运行两个句子

00:40:41.130 --> 00:40:47.660 align:start position:0%
大狗快速跑向商店

00:40:47.670 --> 00:40:50.819 align:start position:0%
自行车慢慢地驶向商店

00:40:50.829 --> 00:40:53.670 align:start position:0%
数组可以让你在一个地方存储多个数据

00:40:53.680 --> 00:40:56.609 align:start position:0%
看这个例子，变量 ourArray

00:40:56.619 --> 00:40:58.799 align:start position:0%
数组通常是以括号开始和结束

00:41:03.339 --> 00:41:06.150 align:start position:0%
数组中的每一个元素由一个逗号隔开

00:41:08.529 --> 00:41:10.979 align:start position:0%
所以你可以看这里第一个元素是一个字符串

00:41:10.989 --> 00:41:13.349 align:start position:0%
第二个元素是一个数字

00:41:13.359 --> 00:41:15.479 align:start position:0%
你可以输入更多元素

00:41:15.489 --> 00:41:18.089 align:start position:0%
只需要在元素之间输入一个逗号

00:41:18.099 --> 00:41:20.759 align:start position:0%
你可以添加任何数据类型的元素

00:41:24.190 --> 00:41:27.029 align:start position:0%
这里我们有一个字符串和一个数字

00:41:27.039 --> 00:41:29.819 align:start position:0%
你也可以输入数组或者浮点数

00:41:29.829 --> 00:41:32.430 align:start position:0%
总之就是任何数据类型

00:41:32.440 --> 00:41:36.660 align:start position:0%
我们看另一个例子

00:41:36.670 --> 00:41:40.440 align:start position:0%
我们给 myArray 输入值 Quincy

00:41:40.450 --> 00:41:46.020 align:start position:0%
然后输入数字 1

00:41:46.030 --> 00:41:48.690 align:start position:0%
因为 Quincy 是第一位（译者注：Quincy 是 freeCodeCamp 的创始人）

00:41:48.700 --> 00:41:51.420 align:start position:0%
当数组中的一个元素是另一个数组时

00:41:51.430 --> 00:41:54.720 align:start position:0%
这叫作嵌套数组或者多维数组

00:41:56.230 --> 00:41:58.320 align:start position:0%
你看这是数组的开头和结尾

00:42:00.609 --> 00:42:03.270 align:start position:0%
但是数组的第一个元素是

00:42:03.280 --> 00:42:05.430 align:start position:0%
another array with two elements of its
一个有两个元素的数组

array<00:41:56.470><c> and</c><00:41:56.710><c> here's</c><00:41:56.950><c> end</c><00:41:57.250><c> of</c><00:41:57.430><c> the</c><00:41:57.520><c> array</c><00:41:57.790><c> but</c>
own<00:42:03.490><c> same</c><00:42:04.150><c> with</c><00:42:04.270><c> here</c><00:42:04.420><c> the</c><00:42:04.540><c> second</c><00:42:04.990><c> element</c><00:42:05.140><c> is</c>

00:42:05.430 --> 00:42:05.440 align:start position:0%
own same with here the second element is
 

00:42:05.440 --> 00:42:08.550 align:start position:0%
own same with here the second element is
an<00:42:05.650><c> array</c><00:42:05.920><c> so</c><00:42:06.490><c> this</c><00:42:06.760><c> is</c><00:42:06.940><c> two</c><00:42:07.270><c> arrays</c><00:42:07.780><c> within</c>

00:42:08.550 --> 00:42:08.560 align:start position:0%
an array so this is two arrays within
 

00:42:08.560 --> 00:42:11.339 align:start position:0%
an array so this is two arrays within
another<00:42:08.950><c> array</c><00:42:09.369><c> so</c><00:42:10.359><c> we</c><00:42:10.390><c> can</c><00:42:10.810><c> do</c><00:42:10.930><c> that</c><00:42:11.080><c> here</c>

00:42:11.339 --> 00:42:11.349 align:start position:0%
another array so we can do that here
 

00:42:11.349 --> 00:42:12.510 align:start position:0%
another array so we can do that here
here's<00:42:11.650><c> another</c><00:42:11.890><c> example</c>

00:42:12.510 --> 00:42:12.520 align:start position:0%
here's another example
 

00:42:12.520 --> 00:42:15.120 align:start position:0%
here's another example
so<00:42:13.060><c> let's</c><00:42:13.869><c> our</c><00:42:14.140><c> first</c><00:42:14.440><c> element</c><00:42:14.920><c> in</c><00:42:14.980><c> the</c><00:42:15.010><c> array</c>

00:42:15.120 --> 00:42:15.130 align:start position:0%
so let's our first element in the array
 

00:42:15.130 --> 00:42:19.740 align:start position:0%
so let's our first element in the array
will<00:42:15.910><c> be</c><00:42:15.940><c> an</c><00:42:16.300><c> array</c><00:42:16.650><c> with</c><00:42:17.650><c> a</c><00:42:17.680><c> string</c><00:42:18.460><c> and</c><00:42:18.790><c> a</c>

00:42:19.740 --> 00:42:19.750 align:start position:0%
will be an array with a string and a
 

00:42:19.750 --> 00:42:23.099 align:start position:0%
will be an array with a string and a
number<00:42:20.320><c> and</c><00:42:20.530><c> then</c><00:42:21.460><c> I'll</c><00:42:21.820><c> put</c><00:42:22.359><c> a</c><00:42:22.390><c> comma</c><00:42:22.750><c> that</c>

00:42:23.099 --> 00:42:23.109 align:start position:0%
number and then I'll put a comma that
 

00:42:23.109 --> 00:42:24.839 align:start position:0%
number and then I'll put a comma that
put<00:42:23.349><c> the</c><00:42:23.470><c> second</c><00:42:23.920><c> element</c><00:42:24.130><c> of</c><00:42:24.430><c> the</c><00:42:24.609><c> array</c>

00:42:24.839 --> 00:42:24.849 align:start position:0%
put the second element of the array
 

00:42:24.849 --> 00:42:28.710 align:start position:0%
put the second element of the array
which<00:42:25.090><c> will</c><00:42:25.240><c> be</c><00:42:25.330><c> another</c><00:42:25.599><c> array</c><00:42:27.690><c> with</c><00:42:28.690><c> a</c>

00:42:28.710 --> 00:42:28.720 align:start position:0%
which will be another array with a
 

00:42:28.720 --> 00:42:36.150 align:start position:0%
which will be another array with a
string<00:42:29.230><c> and</c><00:42:29.500><c> a</c><00:42:30.430><c> number</c>

00:42:36.150 --> 00:42:36.160 align:start position:0%
 
 

00:42:36.160 --> 00:42:38.520 align:start position:0%
 
earlier<00:42:37.060><c> we</c><00:42:37.300><c> learned</c><00:42:37.540><c> how</c><00:42:37.780><c> to</c><00:42:37.840><c> use</c><00:42:37.990><c> bracket</c>

00:42:38.520 --> 00:42:38.530 align:start position:0%
earlier we learned how to use bracket
 

00:42:38.530 --> 00:42:40.590 align:start position:0%
earlier we learned how to use bracket
notation<00:42:38.680><c> to</c><00:42:39.160><c> find</c><00:42:39.370><c> a</c><00:42:39.490><c> specific</c><00:42:39.940><c> index</c><00:42:40.360><c> in</c><00:42:40.510><c> a</c>

00:42:40.590 --> 00:42:40.600 align:start position:0%
notation to find a specific index in a
 

00:42:40.600 --> 00:42:43.050 align:start position:0%
notation to find a specific index in a
string<00:42:41.020><c> you</c><00:42:41.740><c> can</c><00:42:41.770><c> do</c><00:42:42.040><c> the</c><00:42:42.190><c> same</c><00:42:42.430><c> thing</c><00:42:42.820><c> with</c>

00:42:43.050 --> 00:42:43.060 align:start position:0%
string you can do the same thing with
 

00:42:43.060 --> 00:42:46.140 align:start position:0%
string you can do the same thing with
arrays<00:42:43.570><c> so</c><00:42:43.990><c> look</c><00:42:44.500><c> at</c><00:42:44.620><c> this</c><00:42:44.740><c> array</c><00:42:45.340><c> our</c><00:42:45.640><c> array</c>

00:42:46.140 --> 00:42:46.150 align:start position:0%
arrays so look at this array our array
 

00:42:46.150 --> 00:42:49.800 align:start position:0%
arrays so look at this array our array
we<00:42:46.780><c> have</c><00:42:46.930><c> three</c><00:42:47.290><c> elements</c><00:42:47.770><c> 50</c><00:42:48.310><c> 60</c><00:42:48.910><c> 70</c><00:42:49.540><c> and</c>

00:42:49.800 --> 00:42:49.810 align:start position:0%
we have three elements 50 60 70 and
 

00:42:49.810 --> 00:42:55.290 align:start position:0%
we have three elements 50 60 70 and
these<00:42:50.710><c> have</c><00:42:50.950><c> the</c><00:42:51.070><c> indexes</c><00:42:51.880><c> 0</c><00:42:52.600><c> 1</c><00:42:53.230><c> 2</c><00:42:53.920><c> so</c><00:42:54.300><c> with</c>

00:42:55.290 --> 00:42:55.300 align:start position:0%
these have the indexes 0 1 2 so with
 

00:42:55.300 --> 00:42:57.360 align:start position:0%
these have the indexes 0 1 2 so with
this<00:42:55.480><c> our</c><00:42:55.660><c> array</c><00:42:56.170><c> with</c><00:42:56.620><c> the</c><00:42:56.650><c> bracket</c><00:42:57.340><c> notation</c>

00:42:57.360 --> 00:42:57.370 align:start position:0%
this our array with the bracket notation
 

00:42:57.370 --> 00:43:00.030 align:start position:0%
this our array with the bracket notation
in<00:42:58.030><c> the</c><00:42:58.180><c> 0</c><00:42:58.570><c> that's</c><00:42:58.990><c> going</c><00:42:59.140><c> to</c><00:42:59.230><c> be</c><00:42:59.290><c> index</c><00:42:59.710><c> 1</c>

00:43:00.030 --> 00:43:00.040 align:start position:0%
in the 0 that's going to be index 1
 

00:43:00.040 --> 00:43:02.640 align:start position:0%
in the 0 that's going to be index 1
which<00:43:00.310><c> is</c><00:43:00.460><c> going</c><00:43:00.550><c> to</c><00:43:00.640><c> equal</c><00:43:00.850><c> 50</c><00:43:01.600><c> so</c><00:43:02.290><c> we</c><00:43:02.320><c> can</c><00:43:02.530><c> do</c>

00:43:02.640 --> 00:43:02.650 align:start position:0%
which is going to equal 50 so we can do
 

00:43:02.650 --> 00:43:05.220 align:start position:0%
which is going to equal 50 so we can do
the<00:43:02.710><c> same</c><00:43:02.890><c> thing</c><00:43:03.190><c> here</c><00:43:03.550><c> my</c><00:43:04.000><c> array</c><00:43:04.420><c> equals</c><00:43:04.750><c> 50</c>

00:43:05.220 --> 00:43:05.230 align:start position:0%
the same thing here my array equals 50
 

00:43:05.230 --> 00:43:08.730 align:start position:0%
the same thing here my array equals 50
60<00:43:05.920><c> 70</c><00:43:06.670><c> so</c><00:43:07.300><c> let's</c><00:43:07.570><c> try</c><00:43:07.810><c> to</c><00:43:07.840><c> find</c><00:43:08.110><c> the</c><00:43:08.410><c> first</c>

00:43:08.730 --> 00:43:08.740 align:start position:0%
60 70 so let's try to find the first
 

00:43:08.740 --> 00:43:15.500 align:start position:0%
60 70 so let's try to find the first
element<00:43:08.920><c> that</c><00:43:09.310><c> array</c><00:43:09.580><c> so</c><00:43:10.450><c> var</c><00:43:11.380><c> are</c><00:43:12.480><c> my</c><00:43:13.480><c> data</c>

00:43:15.500 --> 00:43:15.510 align:start position:0%
element that array so var are my data
 

00:43:15.510 --> 00:43:19.470 align:start position:0%
element that array so var are my data
equals<00:43:16.510><c> my</c><00:43:17.170><c> array</c><00:43:17.890><c> and</c><00:43:18.310><c> then</c><00:43:19.060><c> I'm</c><00:43:19.150><c> going</c><00:43:19.300><c> to</c><00:43:19.330><c> do</c>

00:43:19.470 --> 00:43:19.480 align:start position:0%
equals my array and then I'm going to do
 

00:43:19.480 --> 00:43:22.770 align:start position:0%
equals my array and then I'm going to do
index<00:43:19.990><c> 0</c><00:43:20.320><c> I</c><00:43:20.620><c> could</c><00:43:20.800><c> do</c><00:43:20.980><c> index</c><00:43:21.280><c> 1</c><00:43:21.550><c> index</c><00:43:22.090><c> 2</c><00:43:22.480><c> and</c>

00:43:22.770 --> 00:43:22.780 align:start position:0%
index 0 I could do index 1 index 2 and
 

00:43:22.780 --> 00:43:25.860 align:start position:0%
index 0 I could do index 1 index 2 and
then<00:43:23.440><c> if</c><00:43:23.530><c> we</c><00:43:23.680><c> console</c><00:43:24.280><c> dot</c><00:43:24.430><c> log</c><00:43:24.490><c> that</c><00:43:25.120><c> we</c><00:43:25.690><c> can</c>

00:43:25.860 --> 00:43:25.870 align:start position:0%
then if we console dot log that we can
 

00:43:25.870 --> 00:43:28.440 align:start position:0%
then if we console dot log that we can
see<00:43:26.050><c> for</c><00:43:26.230><c> sure</c><00:43:26.260><c> what</c><00:43:26.680><c> that</c><00:43:26.710><c> is</c><00:43:27.010><c> so</c><00:43:27.820><c> if</c><00:43:27.880><c> I</c><00:43:27.970><c> put</c><00:43:28.210><c> my</c>

00:43:28.440 --> 00:43:28.450 align:start position:0%
see for sure what that is so if I put my
 

00:43:28.450 --> 00:43:32.150 align:start position:0%
see for sure what that is so if I put my
data<00:43:28.870><c> and</c><00:43:29.830><c> we</c><00:43:30.370><c> can</c><00:43:30.520><c> see</c><00:43:30.820><c> in</c><00:43:31.030><c> the</c><00:43:31.210><c> console</c><00:43:31.750><c> it's</c>

00:43:32.150 --> 00:43:32.160 align:start position:0%
data and we can see in the console it's
 

00:43:32.160 --> 00:43:37.380 align:start position:0%
data and we can see in the console it's
50

00:43:37.380 --> 00:43:37.390 align:start position:0%
 
 

00:43:37.390 --> 00:43:40.770 align:start position:0%
 
you<00:43:38.020><c> can</c><00:43:38.230><c> use</c><00:43:38.410><c> array</c><00:43:38.920><c> indexes</c><00:43:39.730><c> to</c><00:43:40.060><c> modify</c>

00:43:40.770 --> 00:43:40.780 align:start position:0%
you can use array indexes to modify
 

00:43:40.780 --> 00:43:43.680 align:start position:0%
you can use array indexes to modify
arrays<00:43:41.320><c> now</c><00:43:42.250><c> we</c><00:43:42.310><c> try</c><00:43:42.700><c> to</c><00:43:42.730><c> do</c><00:43:42.940><c> this</c><00:43:43.120><c> earlier</c>

00:43:43.680 --> 00:43:43.690 align:start position:0%
arrays now we try to do this earlier
 

00:43:43.690 --> 00:43:46.230 align:start position:0%
arrays now we try to do this earlier
with<00:43:43.870><c> strings</c><00:43:44.410><c> using</c><00:43:44.890><c> bracket</c><00:43:45.430><c> notation</c><00:43:45.580><c> and</c>

00:43:46.230 --> 00:43:46.240 align:start position:0%
with strings using bracket notation and
 

00:43:46.240 --> 00:43:49.290 align:start position:0%
with strings using bracket notation and
we<00:43:46.810><c> were</c><00:43:46.990><c> not</c><00:43:47.200><c> able</c><00:43:47.500><c> to</c><00:43:47.710><c> modify</c><00:43:48.280><c> a</c><00:43:48.460><c> string</c>

00:43:49.290 --> 00:43:49.300 align:start position:0%
we were not able to modify a string
 

00:43:49.300 --> 00:43:51.810 align:start position:0%
we were not able to modify a string
using<00:43:49.630><c> bracket</c><00:43:50.140><c> notation</c><00:43:50.230><c> but</c><00:43:51.220><c> with</c><00:43:51.370><c> arrays</c>

00:43:51.810 --> 00:43:51.820 align:start position:0%
using bracket notation but with arrays
 

00:43:51.820 --> 00:43:56.430 align:start position:0%
using bracket notation but with arrays
you<00:43:52.300><c> can</c><00:43:52.690><c> so</c><00:43:53.380><c> the</c><00:43:53.710><c> original</c><00:43:54.130><c> array</c><00:43:54.370><c> is</c><00:43:54.810><c> 1864</c><00:43:55.810><c> 99</c>

00:43:56.430 --> 00:43:56.440 align:start position:0%
you can so the original array is 1864 99
 

00:43:56.440 --> 00:43:58.980 align:start position:0%
you can so the original array is 1864 99
and<00:43:56.800><c> then</c><00:43:57.490><c> we're</c><00:43:57.670><c> gonna</c><00:43:57.760><c> use</c><00:43:57.880><c> the</c><00:43:58.210><c> array</c><00:43:58.720><c> index</c>

00:43:58.980 --> 00:43:58.990 align:start position:0%
and then we're gonna use the array index
 

00:43:58.990 --> 00:44:02.520 align:start position:0%
and then we're gonna use the array index
of<00:43:59.350><c> 1</c><00:43:59.680><c> now</c><00:44:00.250><c> 1</c><00:44:00.610><c> is</c><00:44:00.850><c> going</c><00:44:01.060><c> to</c><00:44:01.180><c> be</c><00:44:01.450><c> the</c><00:44:01.900><c> second</c>

00:44:02.520 --> 00:44:02.530 align:start position:0%
of 1 now 1 is going to be the second
 

00:44:02.530 --> 00:44:07.020 align:start position:0%
of 1 now 1 is going to be the second
number<00:44:02.890><c> or</c><00:44:03.100><c> 0</c><00:44:03.580><c> 1</c><00:44:04.180><c> 2</c><00:44:04.930><c> and</c><00:44:05.260><c> this</c><00:44:05.800><c> number</c><00:44:06.040><c> 64</c><00:44:06.820><c> is</c>

00:44:07.020 --> 00:44:07.030 align:start position:0%
number or 0 1 2 and this number 64 is
 

00:44:07.030 --> 00:44:09.720 align:start position:0%
number or 0 1 2 and this number 64 is
going<00:44:07.180><c> to</c><00:44:07.240><c> be</c><00:44:07.300><c> set</c><00:44:07.510><c> to</c><00:44:07.540><c> 45</c><00:44:08.020><c> so</c><00:44:08.920><c> the</c><00:44:09.160><c> new</c><00:44:09.400><c> array</c>

00:44:09.720 --> 00:44:09.730 align:start position:0%
going to be set to 45 so the new array
 

00:44:09.730 --> 00:44:14.310 align:start position:0%
going to be set to 45 so the new array
is<00:44:09.910><c> gonna</c><00:44:10.090><c> be</c><00:44:10.830><c> 1845</c><00:44:11.880><c> 99</c><00:44:12.930><c> let's</c><00:44:13.930><c> try</c><00:44:14.140><c> it</c><00:44:14.200><c> again</c>

00:44:14.310 --> 00:44:14.320 align:start position:0%
is gonna be 1845 99 let's try it again
 

00:44:14.320 --> 00:44:19.800 align:start position:0%
is gonna be 1845 99 let's try it again
with<00:44:14.800><c> this</c><00:44:15.420><c> 1864</c><00:44:16.420><c> 99</c><00:44:16.930><c> so</c><00:44:17.890><c> let's</c><00:44:18.580><c> do</c><00:44:18.820><c> my</c><00:44:19.210><c> array</c>

00:44:19.800 --> 00:44:19.810 align:start position:0%
with this 1864 99 so let's do my array
 

00:44:19.810 --> 00:44:23.730 align:start position:0%
with this 1864 99 so let's do my array
and<00:44:20.640><c> then</c><00:44:21.640><c> instead</c><00:44:22.210><c> of</c><00:44:22.300><c> doing</c><00:44:22.450><c> the</c><00:44:22.570><c> first</c><00:44:22.990><c> the</c>

00:44:23.730 --> 00:44:23.740 align:start position:0%
and then instead of doing the first the
 

00:44:23.740 --> 00:44:25.050 align:start position:0%
and then instead of doing the first the
second<00:44:24.190><c> digit</c><00:44:24.430><c> I'm</c><00:44:24.700><c> gonna</c><00:44:24.820><c> do</c><00:44:24.910><c> the</c><00:44:25.030><c> first</c>

00:44:25.050 --> 00:44:25.060 align:start position:0%
second digit I'm gonna do the first
 

00:44:25.060 --> 00:44:27.390 align:start position:0%
second digit I'm gonna do the first
digit<00:44:25.810><c> and</c><00:44:25.960><c> the</c><00:44:26.260><c> array</c><00:44:26.500><c> the</c><00:44:26.650><c> first</c><00:44:26.680><c> index</c>

00:44:27.390 --> 00:44:27.400 align:start position:0%
digit and the array the first index
 

00:44:27.400 --> 00:44:31.080 align:start position:0%
digit and the array the first index
which<00:44:27.640><c> would</c><00:44:27.850><c> be</c><00:44:27.970><c> index</c><00:44:28.450><c> 0</c><00:44:28.960><c> and</c><00:44:29.460><c> I</c><00:44:30.460><c> will</c><00:44:30.670><c> say</c>

00:44:31.080 --> 00:44:31.090 align:start position:0%
which would be index 0 and I will say
 

00:44:31.090 --> 00:44:35.520 align:start position:0%
which would be index 0 and I will say
equals<00:44:32.250><c> 45</c><00:44:33.270><c> so</c><00:44:34.270><c> now</c><00:44:34.600><c> this</c><00:44:34.870><c> array</c><00:44:35.230><c> has</c><00:44:35.380><c> been</c>

00:44:35.520 --> 00:44:35.530 align:start position:0%
equals 45 so now this array has been
 

00:44:35.530 --> 00:44:38.730 align:start position:0%
equals 45 so now this array has been
updated<00:44:36.100><c> so</c><00:44:36.520><c> if</c><00:44:36.610><c> I</c><00:44:36.700><c> do</c><00:44:36.760><c> console</c><00:44:37.390><c> that</c><00:44:37.510><c> log</c><00:44:37.900><c> and</c>

00:44:38.730 --> 00:44:38.740 align:start position:0%
updated so if I do console that log and
 

00:44:38.740 --> 00:44:42.090 align:start position:0%
updated so if I do console that log and
then<00:44:39.370><c> through</c><00:44:39.610><c> my</c><00:44:39.640><c> array</c><00:44:40.480><c> will</c><00:44:41.320><c> see</c><00:44:41.680><c> that</c><00:44:41.950><c> the</c>

00:44:42.090 --> 00:44:42.100 align:start position:0%
then through my array will see that the
 

00:44:42.100 --> 00:44:50.930 align:start position:0%
then through my array will see that the
array<00:44:42.400><c> is</c><00:44:42.430><c> now</c><00:44:42.940><c> 45</c><00:44:43.950><c> 64</c><00:44:44.950><c> 99</c>

00:44:50.930 --> 00:44:50.940 align:start position:0%
 
 

00:44:50.940 --> 00:44:53.790 align:start position:0%
 
you<00:44:51.940><c> can</c><00:44:52.120><c> also</c><00:44:52.270><c> use</c><00:44:52.570><c> bracket</c><00:44:53.050><c> notation</c><00:44:53.170><c> to</c>

00:44:53.790 --> 00:44:53.800 align:start position:0%
you can also use bracket notation to
 

00:44:53.800 --> 00:44:56.040 align:start position:0%
you can also use bracket notation to
select<00:44:54.220><c> an</c><00:44:54.460><c> element</c><00:44:55.000><c> in</c><00:44:55.150><c> a</c><00:44:55.330><c> multi-dimensional</c>

00:44:56.040 --> 00:44:56.050 align:start position:0%
select an element in a multi-dimensional
 

00:44:56.050 --> 00:45:00.420 align:start position:0%
select an element in a multi-dimensional
or<00:44:56.830><c> array</c><00:44:57.790><c> of</c><00:44:58.120><c> arrays</c><00:44:58.500><c> so</c><00:44:59.500><c> you</c><00:44:59.590><c> can</c><00:44:59.860><c> see</c><00:45:00.100><c> this</c>

00:45:00.420 --> 00:45:00.430 align:start position:0%
or array of arrays so you can see this
 

00:45:00.430 --> 00:45:02.850 align:start position:0%
or array of arrays so you can see this
array<00:45:00.760><c> here</c><00:45:01.060><c> we</c><00:45:01.300><c> have</c><00:45:01.450><c> our</c><00:45:01.600><c> outer</c><00:45:01.930><c> array</c><00:45:02.350><c> but</c>

00:45:02.850 --> 00:45:02.860 align:start position:0%
array here we have our outer array but
 

00:45:02.860 --> 00:45:05.550 align:start position:0%
array here we have our outer array but
inside<00:45:03.310><c> that</c><00:45:03.340><c> array</c><00:45:03.910><c> are</c><00:45:04.240><c> more</c><00:45:04.990><c> arrays</c><00:45:05.290><c> the</c>

00:45:05.550 --> 00:45:05.560 align:start position:0%
inside that array are more arrays the
 

00:45:05.560 --> 00:45:07.530 align:start position:0%
inside that array are more arrays the
elements<00:45:06.100><c> of</c><00:45:06.220><c> the</c><00:45:06.580><c> array</c><00:45:06.790><c> or</c><00:45:06.970><c> other</c><00:45:07.150><c> arrays</c>

00:45:07.530 --> 00:45:07.540 align:start position:0%
elements of the array or other arrays
 

00:45:07.540 --> 00:45:10.470 align:start position:0%
elements of the array or other arrays
and<00:45:07.900><c> the</c><00:45:08.740><c> last</c><00:45:09.040><c> element</c><00:45:09.550><c> of</c><00:45:09.880><c> the</c><00:45:10.150><c> array</c>

00:45:10.470 --> 00:45:10.480 align:start position:0%
and the last element of the array
 

00:45:10.480 --> 00:45:13.740 align:start position:0%
and the last element of the array
actually<00:45:10.810><c> has</c><00:45:11.350><c> an</c><00:45:11.740><c> array</c><00:45:12.190><c> in</c><00:45:12.550><c> this</c><00:45:13.300><c> so</c><00:45:13.540><c> this</c><00:45:13.690><c> is</c>

00:45:13.740 --> 00:45:13.750 align:start position:0%
actually has an array in this so this is
 

00:45:13.750 --> 00:45:17.370 align:start position:0%
actually has an array in this so this is
a<00:45:13.900><c> three-layer</c><00:45:14.770><c> deep</c><00:45:15.220><c> array</c><00:45:15.700><c> right</c><00:45:16.030><c> here</c><00:45:16.420><c> so</c>

00:45:17.370 --> 00:45:17.380 align:start position:0%
a three-layer deep array right here so
 

00:45:17.380 --> 00:45:20.700 align:start position:0%
a three-layer deep array right here so
to<00:45:18.130><c> access</c><00:45:18.400><c> an</c><00:45:18.970><c> array</c><00:45:19.270><c> of</c><00:45:19.840><c> arrays</c><00:45:20.020><c> or</c><00:45:20.530><c> an</c>

00:45:20.700 --> 00:45:20.710 align:start position:0%
to access an array of arrays or an
 

00:45:20.710 --> 00:45:23.010 align:start position:0%
to access an array of arrays or an
element<00:45:21.160><c> within</c><00:45:21.370><c> an</c><00:45:22.000><c> array</c><00:45:22.360><c> that's</c><00:45:22.570><c> within</c><00:45:22.810><c> an</c>

00:45:23.010 --> 00:45:23.020 align:start position:0%
element within an array that's within an
 

00:45:23.020 --> 00:45:25.500 align:start position:0%
element within an array that's within an
array<00:45:23.320><c> you</c><00:45:23.920><c> use</c><00:45:24.190><c> a</c><00:45:24.550><c> double</c><00:45:25.000><c> bracket</c><00:45:25.390><c> notation</c>

00:45:25.500 --> 00:45:25.510 align:start position:0%
array you use a double bracket notation
 

00:45:25.510 --> 00:45:28.680 align:start position:0%
array you use a double bracket notation
so<00:45:26.410><c> if</c><00:45:26.500><c> you</c><00:45:26.590><c> see</c><00:45:26.770><c> this</c><00:45:26.920><c> example</c><00:45:27.130><c> here</c><00:45:27.760><c> my</c><00:45:28.330><c> array</c>

00:45:28.680 --> 00:45:28.690 align:start position:0%
so if you see this example here my array
 

00:45:28.690 --> 00:45:31.950 align:start position:0%
so if you see this example here my array
the<00:45:29.200><c> first</c><00:45:29.250><c> bracket</c><00:45:30.250><c> is</c><00:45:30.400><c> 0</c><00:45:30.850><c> that's</c><00:45:31.510><c> gonna</c><00:45:31.720><c> get</c>

00:45:31.950 --> 00:45:31.960 align:start position:0%
the first bracket is 0 that's gonna get
 

00:45:31.960 --> 00:45:34.380 align:start position:0%
the first bracket is 0 that's gonna get
the<00:45:32.170><c> first</c><00:45:32.590><c> element</c><00:45:32.860><c> in</c><00:45:33.370><c> the</c><00:45:33.400><c> array</c><00:45:33.580><c> which</c>

00:45:34.380 --> 00:45:34.390 align:start position:0%
the first element in the array which
 

00:45:34.390 --> 00:45:37.260 align:start position:0%
the first element in the array which
would<00:45:34.570><c> be</c><00:45:34.690><c> right</c><00:45:34.900><c> here</c><00:45:35.380><c> and</c><00:45:35.560><c> then</c><00:45:36.550><c> that</c>

00:45:37.260 --> 00:45:37.270 align:start position:0%
would be right here and then that
 

00:45:37.270 --> 00:45:39.930 align:start position:0%
would be right here and then that
element<00:45:37.540><c> is</c><00:45:37.840><c> an</c><00:45:37.990><c> array</c><00:45:38.260><c> so</c><00:45:38.950><c> the</c><00:45:39.250><c> second</c>

00:45:39.930 --> 00:45:39.940 align:start position:0%
element is an array so the second
 

00:45:39.940 --> 00:45:42.810 align:start position:0%
element is an array so the second
bracket<00:45:40.240><c> would</c><00:45:41.020><c> be</c><00:45:41.260><c> the</c><00:45:41.500><c> index</c><00:45:42.100><c> of</c><00:45:42.400><c> the</c><00:45:42.790><c> array</c>

00:45:42.810 --> 00:45:42.820 align:start position:0%
bracket would be the index of the array
 

00:45:42.820 --> 00:45:46.110 align:start position:0%
bracket would be the index of the array
within<00:45:43.390><c> the</c><00:45:43.630><c> array</c><00:45:43.930><c> so</c><00:45:44.470><c> this</c><00:45:44.500><c> 0</c><00:45:45.160><c> will</c><00:45:45.640><c> point</c><00:45:45.940><c> to</c>

00:45:46.110 --> 00:45:46.120 align:start position:0%
within the array so this 0 will point to
 

00:45:46.120 --> 00:45:48.810 align:start position:0%
within the array so this 0 will point to
here<00:45:46.510><c> so</c><00:45:47.290><c> let's</c><00:45:47.560><c> try</c><00:45:47.770><c> to</c><00:45:47.830><c> figure</c><00:45:48.160><c> out</c><00:45:48.340><c> how</c><00:45:48.760><c> we</c>

00:45:48.810 --> 00:45:48.820 align:start position:0%
here so let's try to figure out how we
 

00:45:48.820 --> 00:45:52.770 align:start position:0%
here so let's try to figure out how we
can<00:45:49.210><c> select</c><00:45:49.750><c> a</c><00:45:50.020><c> value</c><00:45:50.260><c> equal</c><00:45:51.040><c> to</c><00:45:51.070><c> 8</c><00:45:51.540><c> well</c><00:45:52.540><c> let's</c>

00:45:52.770 --> 00:45:52.780 align:start position:0%
can select a value equal to 8 well let's
 

00:45:52.780 --> 00:45:55.440 align:start position:0%
can select a value equal to 8 well let's
see<00:45:53.080><c> I</c><00:45:53.260><c> see</c><00:45:53.740><c> an</c><00:45:53.950><c> eight</c><00:45:54.220><c> right</c><00:45:54.520><c> here</c><00:45:54.580><c> so</c><00:45:55.420><c> let's</c>

00:45:55.440 --> 00:45:55.450 align:start position:0%
see I see an eight right here so let's
 

00:45:55.450 --> 00:45:57.210 align:start position:0%
see I see an eight right here so let's
figure<00:45:55.810><c> out</c><00:45:55.900><c> what</c><00:45:56.080><c> this</c><00:45:56.230><c> first</c><00:45:56.620><c> number</c><00:45:56.890><c> should</c>

00:45:57.210 --> 00:45:57.220 align:start position:0%
figure out what this first number should
 

00:45:57.220 --> 00:46:03.870 align:start position:0%
figure out what this first number should
be<00:45:57.250><c> well</c><00:45:58.060><c> let's</c><00:45:58.330><c> count</c><00:45:58.600><c> 0</c><00:45:59.490><c> 1</c><00:46:01.650><c> 2</c><00:46:02.650><c> so</c><00:46:03.070><c> the</c><00:46:03.580><c> third</c>

00:46:03.870 --> 00:46:03.880 align:start position:0%
be well let's count 0 1 2 so the third
 

00:46:03.880 --> 00:46:08.640 align:start position:0%
be well let's count 0 1 2 so the third
array<00:46:04.180><c> would</c><00:46:04.510><c> be</c><00:46:04.620><c> index</c><00:46:05.620><c> 2</c><00:46:06.690><c> now</c><00:46:07.690><c> when</c><00:46:08.410><c> you</c><00:46:08.500><c> want</c>

00:46:08.640 --> 00:46:08.650 align:start position:0%
array would be index 2 now when you want
 

00:46:08.650 --> 00:46:12.780 align:start position:0%
array would be index 2 now when you want
to<00:46:08.800><c> go</c><00:46:08.950><c> 0</c><00:46:09.640><c> 1</c><00:46:10.600><c> now</c><00:46:11.170><c> if</c><00:46:11.320><c> you</c><00:46:11.470><c> index</c><00:46:12.010><c> 1</c><00:46:12.340><c> to</c><00:46:12.520><c> get</c><00:46:12.640><c> the</c>

00:46:12.780 --> 00:46:12.790 align:start position:0%
to go 0 1 now if you index 1 to get the
 

00:46:12.790 --> 00:46:16.350 align:start position:0%
to go 0 1 now if you index 1 to get the
second<00:46:13.300><c> number</c><00:46:13.720><c> in</c><00:46:13.870><c> the</c><00:46:13.930><c> third</c><00:46:14.890><c> array</c><00:46:15.400><c> so</c>

00:46:16.350 --> 00:46:16.360 align:start position:0%
second number in the third array so
 

00:46:16.360 --> 00:46:19.350 align:start position:0%
second number in the third array so
let's<00:46:16.750><c> test</c><00:46:17.230><c> to</c><00:46:17.470><c> see</c><00:46:17.680><c> if</c><00:46:17.710><c> that</c><00:46:17.920><c> equals</c><00:46:18.100><c> 8</c><00:46:18.610><c> so</c>

00:46:19.350 --> 00:46:19.360 align:start position:0%
let's test to see if that equals 8 so
 

00:46:19.360 --> 00:46:22.590 align:start position:0%
let's test to see if that equals 8 so
I'll<00:46:19.690><c> do</c><00:46:19.840><c> a</c><00:46:19.870><c> consult</c><00:46:20.470><c> out</c><00:46:20.710><c> log</c><00:46:21.100><c> and</c><00:46:21.550><c> then</c><00:46:22.180><c> do</c><00:46:22.360><c> my</c>

00:46:22.590 --> 00:46:22.600 align:start position:0%
I'll do a consult out log and then do my
 

00:46:22.600 --> 00:46:27.110 align:start position:0%
I'll do a consult out log and then do my
data<00:46:22.930><c> here</c><00:46:23.670><c> and</c><00:46:24.670><c> we'll</c><00:46:25.120><c> see</c><00:46:25.330><c> if</c><00:46:25.420><c> that</c><00:46:25.480><c> equals</c><00:46:25.690><c> 8</c>

00:46:27.110 --> 00:46:27.120 align:start position:0%
data here and we'll see if that equals 8
 

00:46:27.120 --> 00:46:33.260 align:start position:0%
data here and we'll see if that equals 8

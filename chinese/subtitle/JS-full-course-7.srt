00:30:19.810 --> 00:30:22.620 align:start position:0%
你可以用 += 把变量转换成字符串

00:30:22.630 --> 00:30:24.510 align:start position:0%
你可以看到这个变量 anAdjective，它的赋值是 awesome

00:30:27.160 --> 00:30:30.270 align:start position:0%
然后我们有另一个变量 ourStr，赋值 freeCodeCamp is

00:30:33.130 --> 00:30:36.720 align:start position:0%
用 += 将两个变量连接起来

00:30:36.730 --> 00:30:41.130 align:start position:0%
现在 ourStr 变量的值就是 freeCodeCamp is awesome

00:30:44.470 --> 00:30:49.640 align:start position:0%
另一个例子

00:30:49.650 --> 00:30:54.000 align:start position:0%
我们定义变量 someAdjective 的值为 worthwhile

00:30:54.010 --> 00:30:58.890 align:start position:0%
然后我们使用 +=

00:30:58.900 --> 00:31:02.700 align:start position:0%
输入 myStr += someAdjective

00:31:07.450 --> 00:31:13.930 align:start position:0%
myStr 的值就成为了 Learning to code is worthwhile

00:31:16.130 --> 00:31:19.450 align:start position:0%
有时候你想要计算一个字符串的长度

00:31:19.460 --> 00:31:21.160 align:start position:0%
用 JavaScript 代码很容易实现

00:31:21.170 --> 00:31:24.520 align:start position:0%
变量 firstName 赋值为 Ada

00:31:24.530 --> 00:31:27.490 align:start position:0%
我们使用 .length 属性确定长度

00:31:27.500 --> 00:31:29.620 align:start position:0%
所以就是 firstName.length

00:31:29.630 --> 00:31:32.320 align:start position:0%
记住 firstName 的值是 Ada

00:31:32.330 --> 00:31:34.420 align:start position:0%
然后 .length 就会返回一个整数

00:31:34.430 --> 00:31:36.610 align:start position:0%
也就是字符串中字母的数量

00:31:36.620 --> 00:31:39.250 align:start position:0%
结果就是 3

00:31:39.260 --> 00:31:40.150 align:start position:0%
我们再试一次

00:31:40.160 --> 00:31:42.940 align:start position:0%
另一个例子

00:31:42.950 --> 00:31:46.510 align:start position:0%
lastNameLength 等于 lastName

00:31:46.520 --> 00:31:48.700 align:start position:0%
我们需要输入 .length

00:31:48.710 --> 00:31:51.520 align:start position:0%
使用 console.log

00:31:51.530 --> 00:31:55.120 align:start position:0%
输入 lastNameLength

00:31:55.130 --> 00:31:57.610 align:start position:0%
点击运行

00:31:57.620 --> 00:32:04.030 align:start position:0%
结果是 8

00:32:04.040 --> 00:32:06.770 align:start position:0%
因为这个字符串 lovelace 有 8 个字母
 
00:32:06.780 --> 00:32:09.170 align:start position:0%
可以使用括号来索引一个字符串中的字母

00:32:11.100 --> 00:32:13.460 align:start position:0%
这里变量 firstName 的值是 Ada

00:32:13.470 --> 00:32:15.650 align:start position:0%
这里 firstName 后面有个括号

00:32:21.210 --> 00:32:23.120 align:start position:0%
里面有一个数字

00:32:23.130 --> 00:32:26.300 align:start position:0%
大部分现代编程语言比如 JavaScript

00:32:26.310 --> 00:32:29.630 align:start position:0%
不是和我们平时一样从 1 开始计数

00:32:29.640 --> 00:32:32.690 align:start position:0%
而是从 0 开始

00:32:32.700 --> 00:32:35.570 align:start position:0%
这叫作从 0 开始的索引

00:32:35.580 --> 00:32:38.300 align:start position:0%
所以数字 0 指的是字符串的第一位

00:32:41.580 --> 00:32:45.710 align:start position:0%
也就是 A

00:32:45.720 --> 00:32:48.590 align:start position:0%
d 对应数字 1，a 对应数字 2

00:32:48.600 --> 00:32:50.840 align:start position:0%
所以 firstName 的第一个字母

00:32:50.850 --> 00:32:54.530 align:start position:0%
如果我们输入 firstName[0]

00:32:54.540 --> 00:32:57.410 align:start position:0%
结果就是 A

00:32:57.420 --> 00:33:01.490 align:start position:0%
我们再举一个例子

00:33:01.500 --> 00:33:03.260 align:start position:0%
我们想要索引变量 lastName 的第一个字母

00:33:03.270 --> 00:33:06.830 align:start position:0%
那么我们在括号中输入数字 0

00:33:06.840 --> 00:33:10.340 align:start position:0%
如果我想要索引第二个字母

00:33:10.350 --> 00:33:13.910 align:start position:0%
我就在括号中输入 1

00:33:13.920 --> 00:33:16.570 align:start position:0%
如果我输入 console.log

00:33:20.970 --> 00:33:23.660 align:start position:0%
（如屏幕显示）

00:33:23.670 --> 00:33:29.789 align:start position:0%
控制台会显示 L

00:33:29.799 --> 00:33:32.710 align:start position:0%
因为第一个字母是 L

00:33:32.720 --> 00:33:36.609 align:start position:0%
字符串是不可变的

00:33:36.619 --> 00:33:38.440 align:start position:0%
意思是一个字符串在创建之后就不能改变

00:33:38.450 --> 00:33:41.529 align:start position:0%
但这并不是说不能改变一个字符串整体

00:33:41.539 --> 00:33:44.289 align:start position:0%
只是不能改变字符串的单个字母

00:33:44.299 --> 00:33:46.659 align:start position:0%
string literal cannot be changed so look
所以我们看这个例子

00:33:46.669 --> 00:33:48.999 align:start position:0%
我们用括号法选取 myStr 中的第一个字母

00:33:51.529 --> 00:33:53.889 align:start position:0%
现在这个变量的值是 Jello World

00:33:53.899 --> 00:33:57.159 align:start position:0%
我们想把第一个字母改为 H

00:33:57.169 --> 00:33:59.169 align:start position:0%
也就是 Hello World

00:33:59.179 --> 00:34:02.039 align:start position:0%
但是如果我运行的话，因为字符串的不可变性，它会显示错误

00:34:04.669 --> 00:34:06.789 align:start position:0%
我们还是可以把它改为 Hello World

00:34:06.799 --> 00:34:09.399 align:start position:0%
只是我们不能像那样只改第一个字母

00:34:09.409 --> 00:34:12.309 align:start position:0%
所以我们得输入 myStr =

00:34:13.819 --> 00:34:19.240 align:start position:0%
输入整个字符串 Hello World

00:34:25.690 --> 00:34:29.020 align:start position:0%
这样我们就把这个字符串改为了 Hello World

00:34:29.030 --> 00:34:31.540 align:start position:0%
你可以使用括号找出一个字符串中的任何字母的位置

00:34:33.919 --> 00:34:35.800 align:start position:0%
所以我们刚才找出了第一个字母

position
现在我们找出第二个字母

00:34:39.140 --> 00:34:40.990 align:start position:0%
记住从零开始的索引方法

00:34:41.000 --> 00:34:43.690 align:start position:0%
1 表示第二位

00:34:43.700 --> 00:34:45.790 align:start position:0%
position we can also get the third
0 表示第一位

00:34:45.800 --> 00:34:47.680 align:start position:0%
我们也可以找出变量 lastName 的第三个字母

00:34:47.690 --> 00:34:49.930 align:start position:0%
我们在括号中输入 2

00:34:49.940 --> 00:34:54.050 align:start position:0%
来找出第三个字母

00:34:56.610 --> 00:34:59.360 align:start position:0%
你也可以用括号法找出一个字符串中的最后一个字母

00:35:01.170 --> 00:35:04.160 align:start position:0%
即使你不知道这个字符串中有多少字母

00:35:04.170 --> 00:35:06.530 align:start position:0%
你可以根据它的长度来确定

00:35:06.540 --> 00:35:09.170 align:start position:0%
所以你看这个括号中我们输入一行表达

00:35:12.690 --> 00:35:17.590 align:start position:0%
firstName.length - 1

00:35:17.600 --> 00:35:20.330 align:start position:0%
长度是 3，3 减去 1 就是 2

00:35:20.340 --> 00:35:22.760 align:start position:0%
我们之所以减去 1 是因为我们从 0 开始计数

00:35:25.830 --> 00:35:28.970 align:start position:0%
所以长度减去 1 就是这个变量的最后一位

00:35:28.980 --> 00:35:31.550 align:start position:0%
这里我们也可以采取同样的操作

00:35:36.620 --> 00:35:43.730 align:start position:0%
来找出变量 lastName 的最后一个字母

00:35:43.740 --> 00:35:45.770 align:start position:0%
我输入 lastName.length - 1

00:35:45.780 --> 00:35:51.070 align:start position:0%
就找到了变量 lastName 的最后一个字母

00:35:51.080 --> 00:35:53.800 align:start position:0%
也就是 e

00:35:53.810 --> 00:35:56.050 align:start position:0%
我们已经看到了如何使用括号法

00:35:56.060 --> 00:35:58.420 align:start position:0%
来找出一个字符串的最后一个字母

00:35:58.430 --> 00:35:59.950 align:start position:0%
你也可以找出倒数第三个或倒数第四个字母

00:36:02.540 --> 00:36:05.080 align:start position:0%
so you just subtract however much you
你想找出倒数第几个

00:36:05.090 --> 00:36:07.420 align:start position:0%
就直接从字符长度中减去多少

00:36:07.430 --> 00:36:09.880 align:start position:0%
所以我们在括号中输入

00:36:09.890 --> 00:36:12.070 align:start position:0%
firstName.length - 3

00:36:12.080 --> 00:36:14.830 align:start position:0%
就找出了倒数第三个字母

00:36:14.840 --> 00:36:17.800 align:start position:0%
我们想找出这个变量的倒数第二个字母

00:36:17.810 --> 00:36:20.410 align:start position:0%
也是类似的操作方式

00:36:20.420 --> 00:36:23.770 align:start position:0%
我们输入 lastName.length

00:36:23.780 --> 00:36:27.100 align:start position:0%
然后减去 2

00:36:27.110 --> 00:36:31.260 align:start position:0%
就找出了这个字符串的倒数第二个字母

00:36:33.790 --> 00:36:36.900 align:start position:0%
现在我们运用我们关于字符串的知识

00:36:36.910 --> 00:36:39.750 align:start position:0%
来创建一个疯狂填词游戏

00:36:39.760 --> 00:36:42.359 align:start position:0%
疯狂填词游戏会给你一些句子

00:36:42.369 --> 00:36:45.329 align:start position:0%
句子中缺少一些单词

00:36:45.339 --> 00:36:47.700 align:start position:0%
比如名词，动词，形容词和副词

00:36:47.710 --> 00:36:50.460 align:start position:0%
然后你选择单词填写到空缺的地方

00:36:50.470 --> 00:36:52.320 align:start position:0%
组成一个可能会很有趣也有一定意义的句子

00:36:55.030 --> 00:36:56.220 align:start position:0%
我来介绍一下怎么做

00:36:59.980 --> 00:37:02.640 align:start position:0%
这里也会用到函数

00:37:02.650 --> 00:37:05.790 align:start position:0%
目前我们还没讲到函数

00:37:05.800 --> 00:37:07.740 align:start position:0%
我稍后会详细讲解

00:37:07.750 --> 00:37:09.599 align:start position:0%
但是现在就先用它

00:37:09.609 --> 00:37:12.900 align:start position:0%
因为它不是本节内容的重点

00:37:12.910 --> 00:37:15.750 align:start position:0%
这个函数叫作 wordBlanks

00:37:15.760 --> 00:37:18.780 align:start position:0%
你可以调用函数

00:37:18.790 --> 00:37:22.380 align:start position:0%
但是你必须传入某些类型的单词

00:37:22.390 --> 00:37:26.910 align:start position:0%
你输入一个名词，一个形容词，一个动词和一个副词

00:37:26.920 --> 00:37:29.640 align:start position:0%
所以这里你可以看到我们调用函数 wordBlanks

00:37:31.690 --> 00:37:35.010 align:start position:0%
这是函数名

00:37:35.020 --> 00:37:39.270 align:start position:0%
我们传入一个名词，一个形容词，一个动词和一个副词

00:37:39.280 --> 00:37:42.270 align:start position:0%
注意我们将使用这些传入的词来组一个句子

00:37:49.030 --> 00:37:52.230 align:start position:0%
我们知道这个 result 变量的初始值是一个空字符串

00:37:52.240 --> 00:37:55.109 align:start position:0%
稍后我们需要使用所有这些单词和 result 变量

00:37:58.060 --> 00:38:00.180 align:start position:0%
result 将从 wordBlanks 函数返回

00:38:00.190 --> 00:38:02.190 align:start position:0%
最后我们将使用 console.log 显示结果

00:38:06.630 --> 00:38:11.820 align:start position:0%
dot log so what I'm gonna do here is do
所以我在这里输入 result +=

00:38:11.830 --> 00:38:14.339 align:start position:0%
我们通过 += 给变量 result 加上一些东西

00:38:17.080 --> 00:38:20.520 align:start position:0%
也会使用这些名词，形容词，动词和副词

00:38:24.580 --> 00:38:31.620 align:start position:0%
输入 The，然后输入 myAdjective

00:38:31.630 --> 00:38:36.390 align:start position:0%
myAdjective 现在是指 big

00:38:36.400 --> 00:38:40.890 align:start position:0%
然后我们输入名词，myNoun

00:38:40.900 --> 00:38:45.290 align:start position:0%
因为形容词是用来修饰名词的

00:38:45.300 --> 00:38:47.930 align:start position:0%
a big dog（一只大狗）

00:38:47.940 --> 00:38:53.590 align:start position:0%
然后我们输入这个名词正在做什么，即动词，myVerb

00:38:53.600 --> 00:38:58.480 align:start position:0%
The big dog ran（一只大狗跑）

00:38:58.490 --> 00:39:03.230 align:start position:0%
那么它跑向哪里呢

00:39:03.240 --> 00:39:06.200 align:start position:0%
to the store（跑向商店）

00:39:06.210 --> 00:39:08.750 align:start position:0%
这里我们需要输入一个空格

00:39:14.640 --> 00:39:20.120 align:start position:0%
然后我们输入副词

00:39:20.130 --> 00:39:22.250 align:start position:0%
最后输入一个句号

00:39:22.260 --> 00:39:25.400 align:start position:0%
现在我们还需要输入一些东西

00:39:25.410 --> 00:39:28.010 align:start position:0%
在 myAdjective，myNoun，myVerb 之间没有空格

00:39:30.630 --> 00:39:32.120 align:start position:0%
如果我点击运行

00:39:32.130 --> 00:39:35.690 align:start position:0%
你会看到控制台显示

00:39:35.700 --> 00:39:38.240 align:start position:0%
（如屏幕显示）没有空格

00:39:41.930 --> 00:39:52.340 align:start position:0%
所以我们需要在这之间输入空格

00:39:52.350 --> 00:39:55.160 align:start position:0%
现在我们再运行

00:39:55.170 --> 00:39:59.480 align:start position:0%
这些名词、形容词、动词和副词就被放进句子里了

00:40:02.310 --> 00:40:04.370 align:start position:0%
有趣的是我们其实可以传入不同的单词

00:40:04.380 --> 00:40:06.500 align:start position:0%
比如我复制粘贴这一句

00:40:10.050 --> 00:40:15.290 align:start position:0%
我删掉 dog 这个单词，输入 bike（自行车）

00:40:15.300 --> 00:40:23.300 align:start position:0%
和一个形容词，我输入 slow（慢的）

00:40:23.310 --> 00:40:31.730 align:start position:0%
动词我输入 flew（飞行）

00:40:31.740 --> 00:40:35.930 align:start position:0%
副词我输入 slowly（慢慢地）

00:40:35.940 --> 00:40:38.540 align:start position:0%
现在我们看控制台

00:40:38.550 --> 00:40:41.120 align:start position:0%
我们就运行两个句子

00:40:41.130 --> 00:40:47.660 align:start position:0%
大狗快速跑向商店

00:40:47.670 --> 00:40:50.819 align:start position:0%
自行车慢慢地驶向商店

00:40:50.829 --> 00:40:53.670 align:start position:0%
数组可以让你在一个地方存储多个数据

00:40:53.680 --> 00:40:56.609 align:start position:0%
看这个例子，变量 ourArray

00:40:56.619 --> 00:40:58.799 align:start position:0%
数组通常是以括号开始和结束

00:41:03.339 --> 00:41:06.150 align:start position:0%
数组中的每一个元素由一个逗号隔开

00:41:08.529 --> 00:41:10.979 align:start position:0%
所以你可以看这里第一个元素是一个字符串

00:41:10.989 --> 00:41:13.349 align:start position:0%
第二个元素是一个数字

00:41:13.359 --> 00:41:15.479 align:start position:0%
你可以输入更多元素

00:41:15.489 --> 00:41:18.089 align:start position:0%
只需要在元素之间输入一个逗号

00:41:18.099 --> 00:41:20.759 align:start position:0%
你可以添加任何数据类型的元素

00:41:24.190 --> 00:41:27.029 align:start position:0%
这里我们有一个字符串和一个数字

00:41:27.039 --> 00:41:29.819 align:start position:0%
你也可以输入数组或者浮点数

00:41:29.829 --> 00:41:32.430 align:start position:0%
总之就是任何数据类型

00:41:32.440 --> 00:41:36.660 align:start position:0%
我们看另一个例子

00:41:36.670 --> 00:41:40.440 align:start position:0%
我们给 myArray 输入值 Quincy

00:41:40.450 --> 00:41:46.020 align:start position:0%
然后输入数字 1

00:41:46.030 --> 00:41:48.690 align:start position:0%
因为 Quincy 是第一位（译者注：Quincy 是 freeCodeCamp 的创始人）

00:41:48.700 --> 00:41:51.420 align:start position:0%
当数组中的一个元素是另一个数组时

00:41:51.430 --> 00:41:54.720 align:start position:0%
这叫作嵌套数组或者多维数组

00:41:56.230 --> 00:41:58.320 align:start position:0%
你看这是数组的开头和结尾

00:42:00.609 --> 00:42:03.270 align:start position:0%
但是数组的第一个元素是

00:42:03.280 --> 00:42:05.430 align:start position:0%
一个有两个元素的数组

00:42:05.440 --> 00:42:08.550 align:start position:0%
第二个元素也是一个数组

00:42:08.560 --> 00:42:11.339 align:start position:0%
所以这是一个数组中有两个数组

00:42:11.349 --> 00:42:12.510 align:start position:0%
所以我们再输入另一个例子

00:42:15.130 --> 00:42:19.740 align:start position:0%
这个数组的第一个元素是一个

00:42:19.750 --> 00:42:23.099 align:start position:0%
包含一个字符串和一个数字的数组

00:42:23.109 --> 00:42:24.839 align:start position:0%
然后我输入一个逗号

00:42:24.849 --> 00:42:28.710 align:start position:0%
再输入数组的第二个元素

00:42:28.720 --> 00:42:36.150 align:start position:0%
这也是一个数组

00:42:36.160 --> 00:42:38.520 align:start position:0%
有一个字符串和一个数字

00:42:38.530 --> 00:42:40.590 align:start position:0%
之前我们学习了用括号索引一个字符串中的字母

00:42:43.060 --> 00:42:46.140 align:start position:0%
你也可以对数组进行同样的操作

00:42:46.150 --> 00:42:49.800 align:start position:0%
看这个数组，ourArray

00:42:49.810 --> 00:42:55.290 align:start position:0%
有三个元素，50，60 和 70

00:42:55.300 --> 00:42:57.360 align:start position:0%
它们的索引是 0，1，2

00:42:57.370 --> 00:43:00.030 align:start position:0%
所以 ourArray[0] 的值是索引 1

00:43:02.650 --> 00:43:05.220 align:start position:0%
也就是 50

00:43:05.230 --> 00:43:08.730 align:start position:0%
这里我们可以做同样的操作

00:43:08.740 --> 00:43:15.500 align:start position:0%
数组 myArray 的值是 50，60，70

00:43:15.510 --> 00:43:19.470 align:start position:0%
我们来找出这个数组的第一个元素

00:43:19.480 --> 00:43:22.770 align:start position:0%
输入变量 myData

00:43:22.770 --> 00:43:22.780 align:start position:0%
myData = myArray[0]，索引 0

00:43:22.780 --> 00:43:25.860 align:start position:0%
也可以索引 1 和 2

00:43:25.870 --> 00:43:28.440 align:start position:0%
然后我们输入 console.log(myData)，看看显示什么

00:43:32.160 --> 00:43:37.380 align:start position:0%
控制台显示 50

00:43:40.780 --> 00:43:43.680 align:start position:0%
你可以使用数组索引来修改数组

00:43:43.690 --> 00:43:46.230 align:start position:0%
之前我们试过对字符串这么操作

00:43:49.300 --> 00:43:51.810 align:start position:0%
但是不能修改字符串

00:43:51.820 --> 00:43:56.430 align:start position:0%
但是这样是可以修改数组的

00:43:56.440 --> 00:43:58.980 align:start position:0%
数组原来的值是 18，64，99

00:43:58.990 --> 00:44:02.520 align:start position:0%
我们输入数组索引 1

00:44:02.530 --> 00:44:07.020 align:start position:0%
索引 1 代表第二个数字

00:44:07.030 --> 00:44:09.720 align:start position:0%
18，64，99 分别是索引 0，1，2

00:44:09.730 --> 00:44:14.310 align:start position:0%
数字 64 将被改为 45

00:44:14.320 --> 00:44:19.800 align:start position:0%
所以新的数组是 18，45，99

00:44:19.810 --> 00:44:23.730 align:start position:0%
我们再试一遍，这个数组 18，64，99 进行操作

00:44:23.730 --> 00:44:23.740 align:start position:0%
and then instead of doing the first the
输入 myArray

00:44:25.060 --> 00:44:27.390 align:start position:0%
对第二个元素进行操作

00:44:27.400 --> 00:44:31.080 align:start position:0%
也就是第一个索引，索引 0

00:44:31.090 --> 00:44:35.520 align:start position:0%
把它改为 45

00:44:35.530 --> 00:44:38.730 align:start position:0%
现在这个数组已经被更新了

00:44:38.740 --> 00:44:42.090 align:start position:0%
使用 console.log 来显示结果

00:44:42.100 --> 00:44:50.930 align:start position:0%
我们可以看到这个数组现在是 45，64，99

00:44:53.800 --> 00:44:56.040 align:start position:0%
你也可以使用括号

00:44:56.050 --> 00:45:00.420 align:start position:0%
从一个多维数组中选择元素（数组的数组）

00:45:00.430 --> 00:45:02.850 align:start position:0%
你可以看这个数组

00:45:02.860 --> 00:45:05.550 align:start position:0%
我们有最外维的数组

00:45:05.560 --> 00:45:07.530 align:start position:0%
这个数组里面还有数组

00:45:10.480 --> 00:45:13.740 align:start position:0%
外维数组的最后一个元素

00:45:13.750 --> 00:45:17.370 align:start position:0%
是数组里包含数组

00:45:17.370 --> 00:45:17.380 align:start position:0%
所以这是一个三维数组

00:45:20.710 --> 00:45:23.010 align:start position:0%
所以要读取数组里的数组（就是数组的一个元素）

00:45:25.510 --> 00:45:28.680 align:start position:0%
你需要使用双层括号

00:45:28.690 --> 00:45:31.950 align:start position:0%
看这个例子，myArray 后面第一个括号里是索引 0

00:45:31.960 --> 00:45:34.380 align:start position:0%
这是指数组的第一个元素

00:45:34.390 --> 00:45:37.260 align:start position:0%
也就是这里

00:45:39.940 --> 00:45:42.810 align:start position:0%
然后呢，这个元素是一个数组

00:45:42.820 --> 00:45:46.110 align:start position:0%
所以第二个括号索引的数组里的数组

00:45:46.120 --> 00:45:48.810 align:start position:0%
这个 0 指向这里（1）

00:45:48.820 --> 00:45:52.770 align:start position:0%
现在我们试试看怎么找出 8 这个值

00:45:55.450 --> 00:45:57.210 align:start position:0%
这里有一个 8

00:45:57.220 --> 00:46:03.870 align:start position:0%
我们想想第一个括号里的索引应该是什么

00:46:03.880 --> 00:46:08.640 align:start position:0%
这是索引 0，1，2

00:46:08.650 --> 00:46:12.780 align:start position:0%
在第一个括号输入索引 2 找到第三个数组

00:46:12.790 --> 00:46:16.350 align:start position:0%
索引这个数组里的元素，0，1

00:46:16.360 --> 00:46:19.350 align:start position:0%
那么在第二个括号输入索引 1，找到第三个数组里的第二个数字

00:46:19.360 --> 00:46:22.590 align:start position:0%
现在我们测试一下是不是等于 8

00:46:22.600 --> 00:46:27.110 align:start position:0%
输入 console.log，然后运行

00:46:27.120 --> 00:46:33.260 align:start position:0%
我们看看它是不是等于 8

00:47:27.120 --> 00:48:33.260 align:start position:0%
结果显示是 8，我们做对了

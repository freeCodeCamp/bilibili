so<02:15:42.720><c> we're</c><02:15:42.960><c> gonna</c><02:15:43.110><c> iterate</c><02:15:43.530><c> through</c><02:15:43.830><c> this</c><02:15:43.980><c> loop</c>

02:15:44.270 --> 02:15:44.280 align:start position:0%
so we're gonna iterate through this loop
 

02:15:44.280 --> 02:15:47.840 align:start position:0%
so we're gonna iterate through this loop
while<02:15:44.700><c> I</c><02:15:45.060><c> is</c><02:15:45.320><c> more</c><02:15:46.320><c> than</c><02:15:46.650><c> 0</c><02:15:47.400><c> we're</c><02:15:47.670><c> going</c><02:15:47.700><c> to</c>

02:15:47.840 --> 02:15:47.850 align:start position:0%
while I is more than 0 we're going to
 

02:15:47.850 --> 02:15:50.210 align:start position:0%
while I is more than 0 we're going to
keep<02:15:48.030><c> iterating</c><02:15:48.300><c> and</c><02:15:48.780><c> at</c><02:15:49.380><c> the</c><02:15:49.530><c> end</c><02:15:49.739><c> of</c><02:15:49.980><c> each</c>

02:15:50.210 --> 02:15:50.220 align:start position:0%
keep iterating and at the end of each
 

02:15:50.220 --> 02:15:52.400 align:start position:0%
keep iterating and at the end of each
iteration<02:15:50.400><c> we're</c><02:15:51.210><c> gonna</c><02:15:51.330><c> decrement</c><02:15:52.290><c> I</c>

02:15:52.400 --> 02:15:52.410 align:start position:0%
iteration we're gonna decrement I
 

02:15:52.410 --> 02:15:54.830 align:start position:0%
iteration we're gonna decrement I
instead<02:15:53.040><c> of</c><02:15:53.130><c> increment</c><02:15:53.700><c> it</c><02:15:53.850><c> we're</c><02:15:54.420><c> gonna</c><02:15:54.540><c> go</c>

02:15:54.830 --> 02:15:54.840 align:start position:0%
instead of increment it we're gonna go
 

02:15:54.840 --> 02:15:58.520 align:start position:0%
instead of increment it we're gonna go
down<02:15:55.140><c> by</c><02:15:55.470><c> 2</c><02:15:55.530><c> i</c><02:15:56.330><c> minus</c><02:15:57.330><c> equals</c><02:15:57.810><c> 2</c><02:15:58.020><c> means</c><02:15:58.320><c> i</c>

02:15:58.520 --> 02:15:58.530 align:start position:0%
down by 2 i minus equals 2 means i
 

02:15:58.530 --> 02:16:01.430 align:start position:0%
down by 2 i minus equals 2 means i
equals<02:15:58.950><c> I</c><02:15:59.130><c> minus</c><02:15:59.160><c> 2</c><02:15:59.520><c> so</c><02:16:00.510><c> we're</c><02:16:01.020><c> gonna</c><02:16:01.140><c> continue</c>

02:16:01.430 --> 02:16:01.440 align:start position:0%
equals I minus 2 so we're gonna continue
 

02:16:01.440 --> 02:16:03.590 align:start position:0%
equals I minus 2 so we're gonna continue
pushing<02:16:02.010><c> the</c><02:16:02.280><c> lower</c><02:16:02.550><c> and</c><02:16:02.820><c> lower</c><02:16:02.970><c> numbers</c><02:16:03.420><c> onto</c>

02:16:03.590 --> 02:16:03.600 align:start position:0%
pushing the lower and lower numbers onto
 

02:16:03.600 --> 02:16:06.110 align:start position:0%
pushing the lower and lower numbers onto
the<02:16:03.930><c> array</c><02:16:04.170><c> until</c><02:16:04.710><c> I</c><02:16:04.770><c> is</c><02:16:04.920><c> less</c><02:16:05.250><c> than</c><02:16:05.310><c> 0</c><02:16:05.820><c> so</c>

02:16:06.110 --> 02:16:06.120 align:start position:0%
the array until I is less than 0 so
 

02:16:06.120 --> 02:16:08.210 align:start position:0%
the array until I is less than 0 so
let's<02:16:06.780><c> log</c><02:16:07.110><c> this</c><02:16:07.380><c> out</c><02:16:07.590><c> and</c><02:16:07.770><c> see</c><02:16:07.920><c> what</c><02:16:08.040><c> our</c>

02:16:08.210 --> 02:16:08.220 align:start position:0%
let's log this out and see what our
 

02:16:08.220 --> 02:16:12.640 align:start position:0%
let's log this out and see what our
array<02:16:08.640><c> becomes</c><02:16:09.180><c> you</c><02:16:09.600><c> can</c><02:16:09.750><c> see</c><02:16:09.989><c> 10</c><02:16:10.530><c> 8</c><02:16:10.950><c> 6</c><02:16:11.520><c> 4</c><02:16:12.150><c> 2</c>

02:16:12.640 --> 02:16:12.650 align:start position:0%
array becomes you can see 10 8 6 4 2
 

02:16:12.650 --> 02:16:15.140 align:start position:0%
array becomes you can see 10 8 6 4 2
well<02:16:13.650><c> I'm</c><02:16:13.890><c> gonna</c><02:16:14.160><c> write</c><02:16:14.340><c> another</c><02:16:14.580><c> one</c><02:16:14.880><c> where</c>

02:16:15.140 --> 02:16:15.150 align:start position:0%
well I'm gonna write another one where
 

02:16:15.150 --> 02:16:17.300 align:start position:0%
well I'm gonna write another one where
we're<02:16:15.360><c> gonna</c><02:16:15.480><c> push</c><02:16:15.870><c> the</c><02:16:16.080><c> odd</c><02:16:16.260><c> numbers</c><02:16:16.770><c> from</c><02:16:17.010><c> 9</c>

02:16:17.300 --> 02:16:17.310 align:start position:0%
we're gonna push the odd numbers from 9
 

02:16:17.310 --> 02:16:21.080 align:start position:0%
we're gonna push the odd numbers from 9
through<02:16:17.820><c> 1</c><02:16:18.150><c> to</c><02:16:18.810><c> my</c><02:16:19.020><c> I</c><02:16:19.050><c> took</c><02:16:19.650><c> the</c><02:16:19.890><c> my</c><02:16:20.070><c> array</c><02:16:20.370><c> so</c>

02:16:21.080 --> 02:16:21.090 align:start position:0%
through 1 to my I took the my array so
 

02:16:21.090 --> 02:16:24.710 align:start position:0%
through 1 to my I took the my array so
another<02:16:21.810><c> for</c><02:16:22.170><c> loop</c><02:16:22.410><c> and</c><02:16:22.680><c> I'm</c><02:16:23.640><c> going</c><02:16:23.670><c> to</c><02:16:24.150><c> do</c><02:16:24.330><c> VAR</c>

02:16:24.710 --> 02:16:24.720 align:start position:0%
another for loop and I'm going to do VAR
 

02:16:24.720 --> 02:16:28.190 align:start position:0%
another for loop and I'm going to do VAR
I<02:16:25.110><c> equals</c><02:16:26.010><c> 9</c><02:16:26.430><c> because</c><02:16:27.120><c> we</c><02:16:27.270><c> want</c><02:16:27.450><c> to</c><02:16:27.480><c> start</c><02:16:27.810><c> at</c><02:16:27.900><c> 9</c>

02:16:28.190 --> 02:16:28.200 align:start position:0%
I equals 9 because we want to start at 9
 

02:16:28.200 --> 02:16:32.120 align:start position:0%
I equals 9 because we want to start at 9
now<02:16:28.890><c> we'll</c><02:16:29.100><c> still</c><02:16:29.370><c> do</c><02:16:29.520><c> I</c><02:16:29.550><c> is</c><02:16:29.960><c> more</c><02:16:30.960><c> than</c><02:16:31.170><c> 0</c><02:16:31.620><c> so</c>

02:16:32.120 --> 02:16:32.130 align:start position:0%
now we'll still do I is more than 0 so
 

02:16:32.130 --> 02:16:34.250 align:start position:0%
now we'll still do I is more than 0 so
while<02:16:32.460><c> I</c><02:16:32.700><c> is</c><02:16:32.760><c> more</c><02:16:33.210><c> than</c><02:16:33.360><c> 0</c><02:16:33.660><c> we're</c><02:16:33.900><c> gonna</c><02:16:34.019><c> keep</c>

02:16:34.250 --> 02:16:34.260 align:start position:0%
while I is more than 0 we're gonna keep
 

02:16:34.260 --> 02:16:36.500 align:start position:0%
while I is more than 0 we're gonna keep
going<02:16:34.559><c> through</c><02:16:34.710><c> this</c><02:16:34.800><c> array</c><02:16:34.980><c> and</c><02:16:35.429><c> we'll</c><02:16:36.030><c> do</c><02:16:36.179><c> I</c>

02:16:36.500 --> 02:16:36.510 align:start position:0%
going through this array and we'll do I
 

02:16:36.510 --> 02:16:38.330 align:start position:0%
going through this array and we'll do I
and<02:16:36.870><c> we</c><02:16:37.349><c> just</c><02:16:37.530><c> everything</c><02:16:37.889><c> else</c><02:16:37.950><c> is</c><02:16:38.160><c> really</c>

02:16:38.330 --> 02:16:38.340 align:start position:0%
and we just everything else is really
 

02:16:38.340 --> 02:16:42.919 align:start position:0%
and we just everything else is really
the<02:16:38.519><c> same</c><02:16:38.760><c> -</c><02:16:39.150><c> equals</c><02:16:40.519><c> 2</c><02:16:41.519><c> and</c><02:16:41.880><c> this</c><02:16:42.660><c> is</c><02:16:42.719><c> gonna</c>

02:16:42.919 --> 02:16:42.929 align:start position:0%
the same - equals 2 and this is gonna
 

02:16:42.929 --> 02:16:46.280 align:start position:0%
the same - equals 2 and this is gonna
get<02:16:43.200><c> all</c><02:16:43.260><c> the</c><02:16:43.710><c> odd</c><02:16:44.010><c> numbers</c><02:16:44.179><c> onto</c><02:16:45.179><c> the</c><02:16:46.050><c> array</c>

02:16:46.280 --> 02:16:46.290 align:start position:0%
get all the odd numbers onto the array
 

02:16:46.290 --> 02:16:50.120 align:start position:0%
get all the odd numbers onto the array
so<02:16:46.920><c> we</c><02:16:46.950><c> just</c><02:16:47.219><c> have</c><02:16:47.340><c> to</c><02:16:47.429><c> do</c><02:16:47.550><c> my</c><02:16:47.719><c> array</c><02:16:48.719><c> dot</c><02:16:49.530><c> push</c>

02:16:50.120 --> 02:16:50.130 align:start position:0%
so we just have to do my array dot push
 

02:16:50.130 --> 02:16:53.900 align:start position:0%
so we just have to do my array dot push
and<02:16:50.519><c> then</c><02:16:51.179><c> push</c><02:16:51.510><c> on</c><02:16:51.690><c> the</c><02:16:51.750><c> I</c><02:16:51.929><c> there</c><02:16:52.469><c> and</c><02:16:52.910><c> I'll</c>

02:16:53.900 --> 02:16:53.910 align:start position:0%
and then push on the I there and I'll
 

02:16:53.910 --> 02:16:57.350 align:start position:0%
and then push on the I there and I'll
just<02:16:53.969><c> console</c><02:16:54.660><c> that</c><02:16:54.780><c> log</c><02:16:55.340><c> so</c><02:16:56.340><c> we</c><02:16:56.490><c> can</c><02:16:56.670><c> see</c><02:16:57.000><c> what</c>

02:16:57.350 --> 02:16:57.360 align:start position:0%
just console that log so we can see what
 

02:16:57.360 --> 02:17:02.500 align:start position:0%
just console that log so we can see what
it<02:16:57.480><c> ended</c><02:16:57.750><c> up</c><02:16:57.840><c> as</c><02:16:58.110><c> my</c><02:16:59.010><c> array</c><02:16:59.880><c> and</c><02:17:00.690><c> I'll</c><02:17:01.650><c> run</c><02:17:02.010><c> the</c>

02:17:02.500 --> 02:17:02.510 align:start position:0%
it ended up as my array and I'll run the
 

02:17:02.510 --> 02:17:11.480 align:start position:0%
it ended up as my array and I'll run the
code<02:17:03.510><c> 9</c><02:17:04.440><c> 7</c><02:17:05.070><c> 5</c><02:17:05.340><c> 3</c><02:17:05.400><c> 1</c><02:17:06.080><c> we</c><02:17:07.080><c> did</c><02:17:07.260><c> it</c>

02:17:11.480 --> 02:17:11.490 align:start position:0%
 
 

02:17:11.490 --> 02:17:14.390 align:start position:0%
 
it<02:17:11.670><c> is</c><02:17:12.240><c> common</c><02:17:12.630><c> in</c><02:17:12.720><c> JavaScript</c><02:17:13.470><c> to</c><02:17:13.800><c> iterate</c>

02:17:14.390 --> 02:17:14.400 align:start position:0%
it is common in JavaScript to iterate
 

02:17:14.400 --> 02:17:17.090 align:start position:0%
it is common in JavaScript to iterate
through<02:17:14.430><c> the</c><02:17:14.760><c> contents</c><02:17:15.600><c> of</c><02:17:15.720><c> an</c><02:17:15.930><c> array</c><02:17:16.200><c> so</c><02:17:16.920><c> look</c>

02:17:17.090 --> 02:17:17.100 align:start position:0%
through the contents of an array so look
 

02:17:17.100 --> 02:17:19.370 align:start position:0%
through the contents of an array so look
at<02:17:17.250><c> this</c><02:17:17.370><c> example</c><02:17:17.480><c> we</c><02:17:18.480><c> have</c><02:17:18.510><c> this</c><02:17:18.750><c> array</c><02:17:19.020><c> here</c>

02:17:19.370 --> 02:17:19.380 align:start position:0%
at this example we have this array here
 

02:17:19.380 --> 02:17:22.160 align:start position:0%
at this example we have this array here
before<02:17:20.190><c> we</c><02:17:20.460><c> were</c><02:17:20.670><c> are</c><02:17:20.880><c> always</c><02:17:21.450><c> adding</c><02:17:21.990><c> items</c>

02:17:22.160 --> 02:17:22.170 align:start position:0%
before we were are always adding items
 

02:17:22.170 --> 02:17:24.110 align:start position:0%
before we were are always adding items
to<02:17:22.410><c> the</c><02:17:22.620><c> array</c><02:17:22.830><c> but</c><02:17:23.370><c> this</c><02:17:23.550><c> time</c><02:17:23.760><c> the</c><02:17:23.910><c> array</c>

02:17:24.110 --> 02:17:24.120 align:start position:0%
to the array but this time the array
 

02:17:24.120 --> 02:17:27.140 align:start position:0%
to the array but this time the array
already<02:17:24.450><c> exists</c><02:17:24.900><c> right</c><02:17:25.380><c> here</c><02:17:25.620><c> our</c><02:17:25.860><c> array</c><02:17:26.160><c> 9</c><02:17:26.700><c> 10</c>

02:17:27.140 --> 02:17:27.150 align:start position:0%
already exists right here our array 9 10
 

02:17:27.150 --> 02:17:32.510 align:start position:0%
already exists right here our array 9 10
11<02:17:27.330><c> 12</c><02:17:27.720><c> so</c><02:17:28.710><c> we</c><02:17:29.430><c> are</c><02:17:29.610><c> going</c><02:17:29.970><c> to</c><02:17:30.090><c> start</c><02:17:30.600><c> at</c><02:17:30.870><c> 0</c><02:17:31.520><c> but</c>

02:17:32.510 --> 02:17:32.520 align:start position:0%
11 12 so we are going to start at 0 but
 

02:17:32.520 --> 02:17:34.970 align:start position:0%
11 12 so we are going to start at 0 but
now<02:17:32.820><c> instead</c><02:17:33.810><c> of</c><02:17:33.870><c> going</c><02:17:34.170><c> to</c><02:17:34.470><c> a</c><02:17:34.500><c> specific</c>

02:17:34.970 --> 02:17:34.980 align:start position:0%
now instead of going to a specific
 

02:17:34.980 --> 02:17:38.450 align:start position:0%
now instead of going to a specific
number<02:17:35.790><c> of</c><02:17:36.000><c> iterations</c><02:17:36.810><c> we</c><02:17:37.470><c> are</c><02:17:37.680><c> going</c><02:17:37.980><c> to</c><02:17:38.220><c> the</c>

02:17:38.450 --> 02:17:38.460 align:start position:0%
number of iterations we are going to the
 

02:17:38.460 --> 02:17:41.990 align:start position:0%
number of iterations we are going to the
our<02:17:38.730><c> array</c><02:17:39.240><c> dot</c><02:17:39.540><c> length</c><02:17:40.020><c> so</c><02:17:40.770><c> the</c><02:17:41.160><c> length</c><02:17:41.430><c> is</c><02:17:41.580><c> 4</c>

02:17:41.990 --> 02:17:42.000 align:start position:0%
our array dot length so the length is 4
 

02:17:42.000 --> 02:17:44.480 align:start position:0%
our array dot length so the length is 4
here<02:17:42.480><c> but</c><02:17:42.720><c> if</c><02:17:42.810><c> we</c><02:17:42.870><c> added</c><02:17:43.230><c> elements</c><02:17:44.100><c> to</c><02:17:44.310><c> this</c>

02:17:44.480 --> 02:17:44.490 align:start position:0%
here but if we added elements to this
 

02:17:44.490 --> 02:17:47.000 align:start position:0%
here but if we added elements to this
array<02:17:44.850><c> that</c><02:17:45.510><c> means</c><02:17:45.780><c> this</c><02:17:46.020><c> loop</c><02:17:46.350><c> would</c><02:17:46.530><c> just</c><02:17:46.740><c> go</c>

02:17:47.000 --> 02:17:47.010 align:start position:0%
array that means this loop would just go
 

02:17:47.010 --> 02:17:49.580 align:start position:0%
array that means this loop would just go
even<02:17:47.370><c> longer</c><02:17:47.760><c> until</c><02:17:48.420><c> we</c><02:17:48.660><c> went</c><02:17:48.900><c> through</c><02:17:49.200><c> every</c>

02:17:49.580 --> 02:17:49.590 align:start position:0%
even longer until we went through every
 

02:17:49.590 --> 02:17:51.770 align:start position:0%
even longer until we went through every
element<02:17:49.980><c> of</c><02:17:50.190><c> that</c><02:17:50.340><c> array</c><02:17:50.490><c> and</c><02:17:50.910><c> then</c><02:17:51.540><c> at</c><02:17:51.660><c> the</c>

02:17:51.770 --> 02:17:51.780 align:start position:0%
element of that array and then at the
 

02:17:51.780 --> 02:17:55.130 align:start position:0%
element of that array and then at the
end<02:17:51.810><c> we're</c><02:17:52.320><c> going</c><02:17:52.530><c> to</c><02:17:52.650><c> increment</c><02:17:53.310><c> I</c><02:17:53.790><c> by</c><02:17:54.090><c> 1</c><02:17:54.840><c> at</c>

02:17:55.130 --> 02:17:55.140 align:start position:0%
end we're going to increment I by 1 at
 

02:17:55.140 --> 02:17:57.350 align:start position:0%
end we're going to increment I by 1 at
the<02:17:55.410><c> end</c><02:17:55.470><c> of</c><02:17:55.650><c> each</c><02:17:55.770><c> iteration</c><02:17:55.880><c> so</c><02:17:56.880><c> look</c><02:17:57.150><c> what</c>

02:17:57.350 --> 02:17:57.360 align:start position:0%
the end of each iteration so look what
 

02:17:57.360 --> 02:17:59.750 align:start position:0%
the end of each iteration so look what
we're<02:17:57.510><c> doing</c><02:17:57.780><c> inside</c><02:17:58.200><c> the</c><02:17:58.410><c> array</c><02:17:58.620><c> we're</c><02:17:59.370><c> doing</c>

02:17:59.750 --> 02:17:59.760 align:start position:0%
we're doing inside the array we're doing
 

02:17:59.760 --> 02:18:03.020 align:start position:0%
we're doing inside the array we're doing
our<02:18:00.000><c> total</c><02:18:00.600><c> that</c><02:18:01.380><c> starts</c><02:18:01.830><c> out</c><02:18:01.980><c> at</c><02:18:02.160><c> 0</c><02:18:02.490><c> up</c><02:18:02.700><c> here</c>

02:18:03.020 --> 02:18:03.030 align:start position:0%
our total that starts out at 0 up here
 

02:18:03.030 --> 02:18:05.450 align:start position:0%
our total that starts out at 0 up here
and<02:18:03.210><c> we're</c><02:18:03.600><c> doing</c><02:18:03.660><c> plus</c><02:18:04.110><c> equals</c><02:18:04.650><c> that</c><02:18:05.160><c> means</c>

02:18:05.450 --> 02:18:05.460 align:start position:0%
and we're doing plus equals that means
 

02:18:05.460 --> 02:18:07.580 align:start position:0%
and we're doing plus equals that means
we're<02:18:05.610><c> going</c><02:18:05.700><c> to</c><02:18:05.790><c> do</c><02:18:05.880><c> our</c><02:18:05.910><c> total</c><02:18:06.780><c> equals</c><02:18:07.350><c> our</c>

02:18:07.580 --> 02:18:07.590 align:start position:0%
we're going to do our total equals our
 

02:18:07.590 --> 02:18:10.760 align:start position:0%
we're going to do our total equals our
total<02:18:08.130><c> plus</c><02:18:08.610><c> something</c><02:18:09.420><c> else</c><02:18:09.720><c> so</c><02:18:10.440><c> we're</c><02:18:10.650><c> gonna</c>

02:18:10.760 --> 02:18:10.770 align:start position:0%
total plus something else so we're gonna
 

02:18:10.770 --> 02:18:14.210 align:start position:0%
total plus something else so we're gonna
keep<02:18:11.130><c> adding</c><02:18:11.370><c> to</c><02:18:11.910><c> the</c><02:18:11.940><c> total</c><02:18:12.530><c> whatever</c><02:18:13.530><c> is</c><02:18:13.830><c> in</c>

02:18:14.210 --> 02:18:14.220 align:start position:0%
keep adding to the total whatever is in
 

02:18:14.220 --> 02:18:17.680 align:start position:0%
keep adding to the total whatever is in
the<02:18:14.460><c> array</c><02:18:14.730><c> at</c><02:18:15.000><c> that</c><02:18:15.420><c> index</c><02:18:16.020><c> so</c><02:18:16.440><c> our</c><02:18:16.770><c> array</c><02:18:17.250><c> I</c>

02:18:17.680 --> 02:18:17.690 align:start position:0%
the array at that index so our array I
 

02:18:17.690 --> 02:18:22.570 align:start position:0%
the array at that index so our array I
so<02:18:18.690><c> it</c><02:18:18.900><c> starts</c><02:18:19.260><c> at</c><02:18:19.350><c> 0</c><02:18:19.740><c> and</c><02:18:19.830><c> then</c><02:18:20.550><c> it</c><02:18:20.670><c> goes</c><02:18:20.850><c> 1</c><02:18:21.330><c> 2</c><02:18:21.900><c> 3</c>

02:18:22.570 --> 02:18:22.580 align:start position:0%
so it starts at 0 and then it goes 1 2 3
 

02:18:22.580 --> 02:18:26.180 align:start position:0%
so it starts at 0 and then it goes 1 2 3
until<02:18:23.580><c> it</c><02:18:23.700><c> gets</c><02:18:23.940><c> to</c><02:18:24.240><c> 4</c><02:18:25.020><c> which</c><02:18:25.590><c> is</c><02:18:25.800><c> the</c><02:18:25.950><c> length</c>

02:18:26.180 --> 02:18:26.190 align:start position:0%
until it gets to 4 which is the length
 

02:18:26.190 --> 02:18:28.130 align:start position:0%
until it gets to 4 which is the length
of<02:18:26.340><c> the</c><02:18:26.430><c> array</c><02:18:26.670><c> and</c><02:18:26.880><c> it</c><02:18:26.970><c> doesn't</c><02:18:27.390><c> even</c><02:18:27.510><c> run</c><02:18:27.960><c> the</c>

02:18:28.130 --> 02:18:28.140 align:start position:0%
of the array and it doesn't even run the
 

02:18:28.140 --> 02:18:31.940 align:start position:0%
of the array and it doesn't even run the
iteration<02:18:28.770><c> at</c><02:18:28.980><c> 4</c><02:18:29.340><c> and</c><02:18:29.670><c> there</c><02:18:30.390><c> is</c><02:18:30.570><c> no</c><02:18:30.810><c> index</c><02:18:31.470><c> 4</c>

02:18:31.940 --> 02:18:31.950 align:start position:0%
iteration at 4 and there is no index 4
 

02:18:31.950 --> 02:18:36.320 align:start position:0%
iteration at 4 and there is no index 4
on<02:18:32.280><c> the</c><02:18:32.550><c> array</c><02:18:32.850><c> remember</c><02:18:33.450><c> it's</c><02:18:33.600><c> 0</c><02:18:33.900><c> 1</c><02:18:34.200><c> 2</c><02:18:35.040><c> 3</c><02:18:35.610><c> so</c>

02:18:36.320 --> 02:18:36.330 align:start position:0%
on the array remember it's 0 1 2 3 so
 

02:18:36.330 --> 02:18:37.850 align:start position:0%
on the array remember it's 0 1 2 3 so
this<02:18:36.540><c> is</c><02:18:36.660><c> just</c><02:18:36.780><c> going</c><02:18:37.020><c> to</c><02:18:37.110><c> add</c><02:18:37.230><c> up</c><02:18:37.500><c> all</c><02:18:37.680><c> those</c>

02:18:37.850 --> 02:18:37.860 align:start position:0%
this is just going to add up all those
 

02:18:37.860 --> 02:18:40.820 align:start position:0%
this is just going to add up all those
numbers<02:18:37.920><c> if</c><02:18:38.610><c> we</c><02:18:39.180><c> run</c><02:18:39.480><c> this</c><02:18:39.660><c> we</c><02:18:39.960><c> can</c><02:18:40.170><c> see</c><02:18:40.410><c> it</c>

02:18:40.820 --> 02:18:40.830 align:start position:0%
numbers if we run this we can see it
 

02:18:40.830 --> 02:18:43.190 align:start position:0%
numbers if we run this we can see it
adds<02:18:41.040><c> up</c><02:18:41.250><c> to</c><02:18:41.280><c> 42</c><02:18:42.030><c> I'm</c><02:18:42.600><c> gonna</c><02:18:42.870><c> write</c><02:18:42.990><c> another</c>

02:18:43.190 --> 02:18:43.200 align:start position:0%
adds up to 42 I'm gonna write another
 

02:18:43.200 --> 02:18:45.170 align:start position:0%
adds up to 42 I'm gonna write another
for<02:18:43.530><c> loop</c><02:18:43.680><c> down</c><02:18:43.890><c> here</c><02:18:44.190><c> that's</c><02:18:44.430><c> going</c><02:18:44.730><c> to</c><02:18:44.880><c> add</c>

02:18:45.170 --> 02:18:45.180 align:start position:0%
for loop down here that's going to add
 

02:18:45.180 --> 02:18:47.990 align:start position:0%
for loop down here that's going to add
up<02:18:45.420><c> all</c><02:18:45.630><c> the</c><02:18:45.750><c> numbers</c><02:18:45.780><c> in</c><02:18:46.230><c> this</c><02:18:46.620><c> array</c><02:18:46.950><c> here</c><02:18:47.280><c> so</c>

02:18:47.990 --> 02:18:48.000 align:start position:0%
up all the numbers in this array here so
 

02:18:48.000 --> 02:18:54.680 align:start position:0%
up all the numbers in this array here so
we'll<02:18:48.660><c> do</c><02:18:48.810><c> for</c><02:18:49.490><c> our</c><02:18:50.490><c> I</c><02:18:51.380><c> equals</c><02:18:52.380><c> 0</c><02:18:53.220><c> and</c><02:18:53.610><c> then</c><02:18:54.570><c> we</c>

02:18:54.680 --> 02:18:54.690 align:start position:0%
we'll do for our I equals 0 and then we
 

02:18:54.690 --> 02:19:00.430 align:start position:0%
we'll do for our I equals 0 and then we
do<02:18:54.810><c> I</c><02:18:55.110><c> is</c><02:18:55.500><c> less</c><02:18:56.310><c> than</c><02:18:57.140><c> my</c><02:18:58.140><c> array</c><02:18:58.920><c> dot</c><02:18:59.670><c> length</c>

02:19:00.430 --> 02:19:00.440 align:start position:0%
do I is less than my array dot length
 

02:19:00.440 --> 02:19:07.070 align:start position:0%
do I is less than my array dot length
and<02:19:02.150><c> I</c><02:19:03.150><c> plus</c><02:19:04.140><c> plus</c><02:19:04.880><c> so</c><02:19:05.880><c> just</c><02:19:06.270><c> like</c><02:19:06.420><c> before</c><02:19:06.450><c> for</c>

02:19:07.070 --> 02:19:07.080 align:start position:0%
and I plus plus so just like before for
 

02:19:07.080 --> 02:19:10.430 align:start position:0%
and I plus plus so just like before for
each<02:19:07.680><c> element</c><02:19:08.190><c> in</c><02:19:08.490><c> my</c><02:19:09.240><c> array</c><02:19:09.540><c> we're</c><02:19:10.080><c> gonna</c><02:19:10.170><c> do</c>

02:19:10.430 --> 02:19:10.440 align:start position:0%
each element in my array we're gonna do
 

02:19:10.440 --> 02:19:14.880 align:start position:0%
each element in my array we're gonna do
a<02:19:10.710><c> my</c><02:19:11.370><c> we're</c><02:19:12.330><c> going</c><02:19:12.450><c> to</c><02:19:12.510><c> do</c><02:19:12.570><c> a</c><02:19:12.600><c> total</c>

02:19:14.880 --> 02:19:14.890 align:start position:0%
a my we're going to do a total
 

02:19:14.890 --> 02:19:21.480 align:start position:0%
a my we're going to do a total
plus<02:19:15.280><c> equals</c><02:19:16.560><c> my</c><02:19:17.560><c> array</c><02:19:18.900><c> index</c><02:19:19.900><c> I</c><02:19:20.081><c> so</c><02:19:20.621><c> we</c><02:19:21.461><c> have</c>

02:19:21.480 --> 02:19:21.490 align:start position:0%
plus equals my array index I so we have
 

02:19:21.490 --> 02:19:23.970 align:start position:0%
plus equals my array index I so we have
to<02:19:21.850><c> initialize</c><02:19:22.421><c> the</c><02:19:22.900><c> total</c><02:19:23.291><c> variable</c><02:19:23.770><c> right</c>

02:19:23.970 --> 02:19:23.980 align:start position:0%
to initialize the total variable right
 

02:19:23.980 --> 02:19:28.920 align:start position:0%
to initialize the total variable right
up<02:19:24.131><c> here</c><02:19:24.461><c> so</c><02:19:24.940><c> the</c><02:19:25.150><c> VAR</c><02:19:25.510><c> total</c><02:19:26.610><c> equals</c><02:19:27.610><c> zero</c><02:19:28.541><c> and</c>

02:19:28.920 --> 02:19:28.930 align:start position:0%
up here so the VAR total equals zero and
 

02:19:28.930 --> 02:19:31.111 align:start position:0%
up here so the VAR total equals zero and
then<02:19:29.591><c> at</c><02:19:29.680><c> the</c><02:19:29.831><c> end</c><02:19:29.860><c> we</c><02:19:30.371><c> can</c><02:19:30.551><c> just</c><02:19:30.760><c> we'll</c><02:19:31.091><c> just</c>

02:19:31.111 --> 02:19:31.121 align:start position:0%
then at the end we can just we'll just
 

02:19:31.121 --> 02:19:34.770 align:start position:0%
then at the end we can just we'll just
console<02:19:31.871><c> dot</c><02:19:32.081><c> log</c><02:19:32.140><c> that</c><02:19:33.131><c> out</c><02:19:33.310><c> to</c><02:19:33.940><c> see</c><02:19:34.301><c> what</c><02:19:34.570><c> the</c>

02:19:34.770 --> 02:19:34.780 align:start position:0%
console dot log that out to see what the
 

02:19:34.780 --> 02:19:40.111 align:start position:0%
console dot log that out to see what the
total<02:19:35.081><c> is</c><02:19:36.660><c> so</c><02:19:37.660><c> if</c><02:19:38.020><c> I</c><02:19:38.140><c> just</c><02:19:38.410><c> run</c><02:19:39.310><c> this</c><02:19:39.520><c> we</c><02:19:39.910><c> can</c>

02:19:40.111 --> 02:19:40.121 align:start position:0%
total is so if I just run this we can
 

02:19:40.121 --> 02:19:45.960 align:start position:0%
total is so if I just run this we can
see<02:19:40.331><c> that</c><02:19:40.541><c> the</c><02:19:40.751><c> total</c><02:19:40.961><c> this</c><02:19:41.171><c> time</c><02:19:41.410><c> is</c><02:19:41.650><c> 20</c>

02:19:45.960 --> 02:19:45.970 align:start position:0%
 
 

02:19:45.970 --> 02:19:48.690 align:start position:0%
 
if<02:19:46.080><c> you</c><02:19:47.080><c> have</c><02:19:47.260><c> a</c><02:19:47.290><c> multi-dimensional</c><02:19:48.040><c> or</c>

02:19:48.690 --> 02:19:48.700 align:start position:0%
if you have a multi-dimensional or
 

02:19:48.700 --> 02:19:51.360 align:start position:0%
if you have a multi-dimensional or
nested<02:19:49.480><c> array</c><02:19:49.900><c> you</c><02:19:50.530><c> can</c><02:19:50.561><c> use</c><02:19:50.980><c> nested</c>

02:19:51.360 --> 02:19:51.370 align:start position:0%
nested array you can use nested
 

02:19:51.370 --> 02:19:53.970 align:start position:0%
nested array you can use nested
for-loops<02:19:52.000><c> to</c><02:19:52.660><c> access</c><02:19:53.200><c> all</c><02:19:53.381><c> the</c><02:19:53.440><c> array</c>

02:19:53.970 --> 02:19:53.980 align:start position:0%
for-loops to access all the array
 

02:19:53.980 --> 02:19:56.131 align:start position:0%
for-loops to access all the array
elements<02:19:54.580><c> so</c><02:19:55.120><c> for</c><02:19:55.360><c> instance</c><02:19:55.721><c> we</c><02:19:55.900><c> have</c><02:19:55.931><c> this</c>

02:19:56.131 --> 02:19:56.141 align:start position:0%
elements so for instance we have this
 

02:19:56.141 --> 02:19:58.650 align:start position:0%
elements so for instance we have this
multiply<02:19:56.681><c> off</c><02:19:56.860><c> function</c><02:19:57.521><c> it's</c><02:19:58.061><c> defined</c><02:19:58.511><c> up</c>

02:19:58.650 --> 02:19:58.660 align:start position:0%
multiply off function it's defined up
 

02:19:58.660 --> 02:20:00.421 align:start position:0%
multiply off function it's defined up
here<02:19:58.690><c> but</c><02:19:59.171><c> we're</c><02:19:59.320><c> calling</c><02:19:59.530><c> it</c><02:19:59.801><c> here</c><02:20:00.131><c> and</c><02:20:00.280><c> we're</c>

02:20:00.421 --> 02:20:00.431 align:start position:0%
here but we're calling it here and we're
 

02:20:00.431 --> 02:20:03.301 align:start position:0%
here but we're calling it here and we're
passing<02:20:01.000><c> in</c><02:20:01.210><c> this</c><02:20:01.780><c> multi-dimensional</c><02:20:02.530><c> array</c>

02:20:03.301 --> 02:20:03.311 align:start position:0%
passing in this multi-dimensional array
 

02:20:03.311 --> 02:20:05.911 align:start position:0%
passing in this multi-dimensional array
which<02:20:04.210><c> is</c><02:20:04.360><c> basically</c><02:20:04.690><c> an</c><02:20:04.870><c> array</c><02:20:04.960><c> with</c><02:20:05.591><c> arrays</c>

02:20:05.911 --> 02:20:05.921 align:start position:0%
which is basically an array with arrays
 

02:20:05.921 --> 02:20:08.730 align:start position:0%
which is basically an array with arrays
inside<02:20:06.370><c> the</c><02:20:06.551><c> array</c><02:20:06.790><c> so</c><02:20:07.540><c> inside</c><02:20:08.290><c> the</c><02:20:08.500><c> first</c>

02:20:08.730 --> 02:20:08.740 align:start position:0%
inside the array so inside the first
 

02:20:08.740 --> 02:20:13.320 align:start position:0%
inside the array so inside the first
array<02:20:09.070><c> there</c><02:20:09.280><c> are</c><02:20:09.341><c> three</c><02:20:09.580><c> elements</c><02:20:09.761><c> 1</c><02:20:10.771><c> 2</c><02:20:11.940><c> 3</c><02:20:12.940><c> and</c>

02:20:13.320 --> 02:20:13.330 align:start position:0%
array there are three elements 1 2 3 and
 

02:20:13.330 --> 02:20:14.791 align:start position:0%
array there are three elements 1 2 3 and
you<02:20:13.391><c> can</c><02:20:13.450><c> see</c><02:20:13.570><c> each</c><02:20:13.841><c> of</c><02:20:13.990><c> those</c><02:20:14.110><c> elements</c><02:20:14.351><c> are</c>

02:20:14.791 --> 02:20:14.801 align:start position:0%
you can see each of those elements are
 

02:20:14.801 --> 02:20:16.711 align:start position:0%
you can see each of those elements are
an<02:20:14.950><c> array</c><02:20:15.190><c> with</c><02:20:15.580><c> their</c><02:20:15.790><c> own</c><02:20:16.000><c> set</c><02:20:16.301><c> of</c><02:20:16.330><c> elements</c>

02:20:16.711 --> 02:20:16.721 align:start position:0%
an array with their own set of elements
 

02:20:16.721 --> 02:20:19.140 align:start position:0%
an array with their own set of elements
so<02:20:17.620><c> we</c><02:20:17.801><c> are</c><02:20:17.891><c> going</c><02:20:18.131><c> to</c><02:20:18.221><c> use</c><02:20:18.370><c> nested</c><02:20:18.671><c> for-loops</c>

02:20:19.140 --> 02:20:19.150 align:start position:0%
so we are going to use nested for-loops
 

02:20:19.150 --> 02:20:21.810 align:start position:0%
so we are going to use nested for-loops
within<02:20:19.811><c> this</c><02:20:19.960><c> multiply</c><02:20:20.471><c> all</c><02:20:20.681><c> function</c><02:20:21.311><c> to</c>

02:20:21.810 --> 02:20:21.820 align:start position:0%
within this multiply all function to
 

02:20:21.820 --> 02:20:25.230 align:start position:0%
within this multiply all function to
multiply<02:20:22.360><c> every</c><02:20:22.900><c> number</c><02:20:23.650><c> in</c><02:20:24.040><c> these</c><02:20:24.641><c> nested</c>

02:20:25.230 --> 02:20:25.240 align:start position:0%
multiply every number in these nested
 

02:20:25.240 --> 02:20:27.690 align:start position:0%
multiply every number in these nested
arrays<02:20:25.480><c> here</c><02:20:25.841><c> so</c><02:20:26.591><c> let's</c><02:20:26.921><c> get</c><02:20:27.040><c> started</c><02:20:27.431><c> we're</c>

02:20:27.690 --> 02:20:27.700 align:start position:0%
arrays here so let's get started we're
 

02:20:27.700 --> 02:20:30.150 align:start position:0%
arrays here so let's get started we're
going<02:20:27.820><c> to</c><02:20:27.910><c> start</c><02:20:28.120><c> with</c><02:20:28.181><c> a</c><02:20:28.240><c> for</c><02:20:28.540><c> loop</c><02:20:28.721><c> and</c><02:20:29.500><c> it's</c>

02:20:30.150 --> 02:20:30.160 align:start position:0%
going to start with a for loop and it's
 

02:20:30.160 --> 02:20:31.560 align:start position:0%
going to start with a for loop and it's
going<02:20:30.311><c> to</c><02:20:30.400><c> look</c><02:20:30.551><c> just</c><02:20:30.610><c> like</c><02:20:30.971><c> the</c><02:20:31.120><c> other</c><02:20:31.150><c> four</c>

02:20:31.560 --> 02:20:31.570 align:start position:0%
going to look just like the other four
 

02:20:31.570 --> 02:20:34.560 align:start position:0%
going to look just like the other four
loops<02:20:31.841><c> that</c><02:20:31.990><c> we</c><02:20:32.141><c> started</c><02:20:32.591><c> I</c><02:20:32.801><c> equals</c><02:20:33.400><c> 0</c><02:20:34.150><c> we're</c>

02:20:34.560 --> 02:20:34.570 align:start position:0%
loops that we started I equals 0 we're
 

02:20:34.570 --> 02:20:37.381 align:start position:0%
loops that we started I equals 0 we're
going<02:20:34.721><c> to</c><02:20:34.780><c> initialize</c><02:20:35.381><c> I</c><02:20:35.591><c> to</c><02:20:35.620><c> 0</c><02:20:36.011><c> and</c><02:20:36.391><c> then</c>

02:20:37.381 --> 02:20:37.391 align:start position:0%
going to initialize I to 0 and then
 

02:20:37.391 --> 02:20:41.331 align:start position:0%
going to initialize I to 0 and then
we're<02:20:37.900><c> gonna</c><02:20:38.110><c> say</c><02:20:38.500><c> while</c><02:20:39.040><c> I</c><02:20:39.341><c> is</c><02:20:39.761><c> less</c><02:20:40.120><c> than</c><02:20:40.570><c> our</c>

02:20:41.331 --> 02:20:41.341 align:start position:0%
we're gonna say while I is less than our
 

02:20:41.341 --> 02:20:45.541 align:start position:0%
we're gonna say while I is less than our
length<02:20:42.341><c> and</c><02:20:43.801><c> then</c><02:20:44.801><c> we're</c><02:20:45.070><c> just</c><02:20:45.101><c> going</c><02:20:45.460><c> to</c>

02:20:45.541 --> 02:20:45.551 align:start position:0%
length and then we're just going to
 

02:20:45.551 --> 02:20:48.381 align:start position:0%
length and then we're just going to
increment<02:20:45.790><c> I</c><02:20:46.181><c> at</c><02:20:46.570><c> the</c><02:20:47.051><c> end</c><02:20:47.230><c> of</c><02:20:47.440><c> each</c><02:20:47.620><c> iteration</c>

02:20:48.381 --> 02:20:48.391 align:start position:0%
increment I at the end of each iteration
 

02:20:48.391 --> 02:20:51.541 align:start position:0%
increment I at the end of each iteration
now<02:20:49.391><c> are</c><02:20:49.811><c> that</c><02:20:50.561><c> linked</c><02:20:50.950><c> that's</c><02:20:51.250><c> going</c><02:20:51.490><c> to</c>

02:20:51.541 --> 02:20:51.551 align:start position:0%
now are that linked that's going to
 

02:20:51.551 --> 02:20:54.091 align:start position:0%
now are that linked that's going to
start<02:20:51.851><c> off</c><02:20:52.030><c> as</c><02:20:52.330><c> 3</c><02:20:52.870><c> because</c><02:20:53.230><c> we're</c><02:20:53.410><c> passing</c><02:20:53.921><c> in</c>

02:20:54.091 --> 02:20:54.101 align:start position:0%
start off as 3 because we're passing in
 

02:20:54.101 --> 02:20:57.631 align:start position:0%
start off as 3 because we're passing in
this<02:20:54.400><c> array</c><02:20:54.971><c> and</c><02:20:55.710><c> the</c><02:20:56.710><c> first</c><02:20:57.040><c> level</c><02:20:57.280><c> of</c><02:20:57.460><c> the</c>

02:20:57.631 --> 02:20:57.641 align:start position:0%
this array and the first level of the
 

02:20:57.641 --> 02:21:00.780 align:start position:0%
this array and the first level of the
array<02:20:57.851><c> there's</c><02:20:58.181><c> just</c><02:20:58.360><c> 1</c><02:20:58.631><c> 2</c><02:20:59.051><c> 3</c><02:20:59.410><c> elements</c><02:21:00.280><c> so</c>

02:21:00.780 --> 02:21:00.790 align:start position:0%
array there's just 1 2 3 elements so
 

02:21:00.790 --> 02:21:03.780 align:start position:0%
array there's just 1 2 3 elements so
that's<02:21:00.971><c> gonna</c><02:21:01.120><c> be</c><02:21:01.210><c> 3</c><02:21:01.660><c> but</c><02:21:02.381><c> now</c><02:21:02.980><c> we're</c><02:21:03.400><c> gonna</c><02:21:03.521><c> go</c>

02:21:03.780 --> 02:21:03.790 align:start position:0%
that's gonna be 3 but now we're gonna go
 

02:21:03.790 --> 02:21:06.720 align:start position:0%
that's gonna be 3 but now we're gonna go
inside<02:21:04.511><c> this</c><02:21:04.870><c> for</c><02:21:05.261><c> loop</c><02:21:05.500><c> and</c><02:21:05.710><c> create</c><02:21:06.250><c> another</c>

02:21:06.720 --> 02:21:06.730 align:start position:0%
inside this for loop and create another
 

02:21:06.730 --> 02:21:11.251 align:start position:0%
inside this for loop and create another
for<02:21:07.330><c> loop</c><02:21:07.570><c> so</c><02:21:08.410><c> we're</c><02:21:08.921><c> gonna</c><02:21:09.070><c> do</c><02:21:09.190><c> VAR</c><02:21:09.490><c> J</c><02:21:10.301><c> equals</c>

02:21:11.251 --> 02:21:11.261 align:start position:0%
for loop so we're gonna do VAR J equals
 

02:21:11.261 --> 02:21:14.371 align:start position:0%
for loop so we're gonna do VAR J equals
0<02:21:12.190><c> normally</c><02:21:13.091><c> its</c><02:21:13.240><c> standard</c><02:21:13.660><c> practice</c><02:21:13.811><c> to</c><02:21:14.200><c> call</c>

02:21:14.371 --> 02:21:14.381 align:start position:0%
0 normally its standard practice to call
 

02:21:14.381 --> 02:21:15.900 align:start position:0%
0 normally its standard practice to call
the<02:21:14.561><c> variable</c><02:21:14.860><c> that</c><02:21:15.011><c> we're</c><02:21:15.221><c> incrementing</c><02:21:15.521><c> I</c>

02:21:15.900 --> 02:21:15.910 align:start position:0%
the variable that we're incrementing I
 

02:21:15.910 --> 02:21:18.541 align:start position:0%
the variable that we're incrementing I
but<02:21:16.631><c> we</c><02:21:16.721><c> already</c><02:21:16.900><c> have</c><02:21:17.141><c> an</c><02:21:17.261><c> eye</c><02:21:17.530><c> within</c><02:21:18.190><c> this</c>

02:21:18.541 --> 02:21:18.551 align:start position:0%
but we already have an eye within this
 

02:21:18.551 --> 02:21:20.911 align:start position:0%
but we already have an eye within this
scope<02:21:18.940><c> so</c><02:21:19.511><c> we</c><02:21:19.811><c> need</c><02:21:19.990><c> to</c><02:21:20.110><c> create</c><02:21:20.320><c> another</c><02:21:20.471><c> name</c>

02:21:20.911 --> 02:21:20.921 align:start position:0%
scope so we need to create another name
 

02:21:20.921 --> 02:21:22.770 align:start position:0%
scope so we need to create another name
and<02:21:21.280><c> it's</c><02:21:21.490><c> pretty</c><02:21:21.820><c> standard</c><02:21:22.061><c> to</c><02:21:22.391><c> call</c><02:21:22.601><c> the</c>

02:21:22.770 --> 02:21:22.780 align:start position:0%
and it's pretty standard to call the
 

02:21:22.780 --> 02:21:26.551 align:start position:0%
and it's pretty standard to call the
next<02:21:23.080><c> variable</c><02:21:23.921><c> J</c><02:21:24.280><c> because</c><02:21:25.120><c> J</c><02:21:25.301><c> is</c><02:21:25.391><c> after</c><02:21:25.690><c> I</c><02:21:25.721><c> so</c>

02:21:26.551 --> 02:21:26.561 align:start position:0%
next variable J because J is after I so
 

02:21:26.561 --> 02:21:29.911 align:start position:0%
next variable J because J is after I so
now<02:21:27.101><c> we're</c><02:21:27.370><c> gonna</c><02:21:27.460><c> do</c><02:21:27.641><c> J</c><02:21:28.061><c> while</c><02:21:28.721><c> J</c><02:21:29.021><c> is</c><02:21:29.261><c> less</c>

02:21:29.911 --> 02:21:29.921 align:start position:0%
now we're gonna do J while J is less
 

02:21:29.921 --> 02:21:31.980 align:start position:0%
now we're gonna do J while J is less
than<02:21:30.280><c> now</c><02:21:31.030><c> this</c><02:21:31.240><c> is</c><02:21:31.360><c> where</c><02:21:31.480><c> it</c><02:21:31.570><c> gets</c><02:21:31.660><c> a</c><02:21:31.841><c> little</c>

02:21:31.980 --> 02:21:31.990 align:start position:0%
than now this is where it gets a little
 

02:21:31.990 --> 02:21:35.131 align:start position:0%
than now this is where it gets a little
tricky<02:21:32.500><c> we're</c><02:21:33.070><c> gonna</c><02:21:33.280><c> do</c><02:21:33.761><c> while</c><02:21:34.120><c> a</c><02:21:34.360><c> is</c><02:21:34.841><c> less</c>

02:21:35.131 --> 02:21:35.141 align:start position:0%
tricky we're gonna do while a is less
 

02:21:35.141 --> 02:21:40.801 align:start position:0%
tricky we're gonna do while a is less
than<02:21:35.440><c> our</c><02:21:36.030><c> index</c><02:21:37.030><c> I</c><02:21:37.681><c> dot</c><02:21:38.681><c> length</c><02:21:39.570><c> also</c><02:21:40.570><c> we're</c>

02:21:40.801 --> 02:21:40.811 align:start position:0%
than our index I dot length also we're
 

02:21:40.811 --> 02:21:44.310 align:start position:0%
than our index I dot length also we're
gonna<02:21:40.900><c> increment</c><02:21:41.171><c> J</c><02:21:41.410><c> here</c><02:21:42.070><c> so</c><02:21:43.061><c> this</c><02:21:43.721><c> is</c><02:21:43.990><c> going</c>

02:21:44.310 --> 02:21:44.320 align:start position:0%
gonna increment J here so this is going
 

02:21:44.320 --> 02:21:46.950 align:start position:0%
gonna increment J here so this is going
to<02:21:44.530><c> change</c><02:21:44.830><c> so</c><02:21:45.311><c> first</c><02:21:45.610><c> the</c><02:21:46.091><c> first</c><02:21:46.120><c> iteration</c>

02:21:46.950 --> 02:21:46.960 align:start position:0%
to change so first the first iteration
 

02:21:46.960 --> 02:21:49.140 align:start position:0%
to change so first the first iteration
of<02:21:47.110><c> this</c><02:21:47.290><c> outer</c><02:21:47.471><c> for</c><02:21:48.070><c> loop</c><02:21:48.101><c> we're</c><02:21:48.730><c> looking</c><02:21:49.061><c> at</c>

02:21:49.140 --> 02:21:49.150 align:start position:0%
of this outer for loop we're looking at
 

02:21:49.150 --> 02:21:50.850 align:start position:0%
of this outer for loop we're looking at
the<02:21:49.271><c> length</c><02:21:49.450><c> of</c><02:21:49.631><c> this</c><02:21:49.750><c> array</c><02:21:50.080><c> then</c><02:21:50.650><c> we're</c>

02:21:50.850 --> 02:21:50.860 align:start position:0%
the length of this array then we're
 

02:21:50.860 --> 02:21:52.110 align:start position:0%
the length of this array then we're
linking<02:21:50.980><c> looking</c><02:21:51.521><c> at</c><02:21:51.610><c> the</c><02:21:51.700><c> length</c><02:21:51.851><c> of</c><02:21:52.000><c> this</c>

02:21:52.110 --> 02:21:52.120 align:start position:0%
linking looking at the length of this
 

02:21:52.120 --> 02:21:54.060 align:start position:0%
linking looking at the length of this
array<02:21:52.421><c> then</c><02:21:53.021><c> we're</c><02:21:53.261><c> looking</c><02:21:53.591><c> at</c><02:21:53.740><c> the</c><02:21:53.860><c> length</c>

02:21:54.060 --> 02:21:54.070 align:start position:0%
array then we're looking at the length
 

02:21:54.070 --> 02:21:56.581 align:start position:0%
array then we're looking at the length
of<02:21:54.311><c> this</c><02:21:54.521><c> array</c><02:21:54.820><c> the</c><02:21:55.511><c> index</c><02:21:56.080><c> is</c><02:21:56.230><c> going</c><02:21:56.351><c> to</c><02:21:56.500><c> be</c>

02:21:56.581 --> 02:21:56.591 align:start position:0%
of this array the index is going to be
 

02:21:56.591 --> 02:21:57.900 align:start position:0%
of this array the index is going to be
different<02:21:56.801><c> every</c><02:21:56.980><c> time</c><02:21:57.311><c> so</c><02:21:57.521><c> we're</c><02:21:57.641><c> going</c><02:21:57.761><c> to</c>

02:21:57.900 --> 02:21:57.910 align:start position:0%
different every time so we're going to
 

02:21:57.910 --> 02:21:59.990 align:start position:0%
different every time so we're going to
be<02:21:58.120><c> going</c><02:21:58.601><c> to</c><02:21:58.750><c> each</c><02:21:59.200><c> different</c>

02:21:59.990 --> 02:22:00.000 align:start position:0%
be going to each different
 

02:22:00.000 --> 02:22:04.230 align:start position:0%
be going to each different
inside<02:22:01.000><c> the</c><02:22:01.210><c> nested</c><02:22:01.540><c> array</c><02:22:02.101><c> so</c><02:22:03.101><c> at</c><02:22:03.580><c> this</c><02:22:03.910><c> point</c>

02:22:04.230 --> 02:22:04.240 align:start position:0%
inside the nested array so at this point
 

02:22:04.240 --> 02:22:07.410 align:start position:0%
inside the nested array so at this point
we<02:22:05.050><c> just</c><02:22:05.080><c> have</c><02:22:05.500><c> to</c><02:22:05.920><c> multiply</c><02:22:06.730><c> all</c><02:22:07.120><c> the</c><02:22:07.300><c> numbers</c>

02:22:07.410 --> 02:22:07.420 align:start position:0%
we just have to multiply all the numbers
 

02:22:07.420 --> 02:22:09.631 align:start position:0%
we just have to multiply all the numbers
together<02:22:07.720><c> so</c><02:22:08.410><c> we</c><02:22:08.561><c> already</c><02:22:08.830><c> have</c><02:22:08.950><c> the</c><02:22:09.130><c> product</c>

02:22:09.631 --> 02:22:09.641 align:start position:0%
together so we already have the product
 

02:22:09.641 --> 02:22:11.490 align:start position:0%
together so we already have the product
that<02:22:09.760><c> we've</c><02:22:09.880><c> defined</c><02:22:10.271><c> above</c><02:22:10.630><c> so</c><02:22:11.230><c> we're</c><02:22:11.380><c> gonna</c>

02:22:11.490 --> 02:22:11.500 align:start position:0%
that we've defined above so we're gonna
 

02:22:11.500 --> 02:22:15.540 align:start position:0%
that we've defined above so we're gonna
do<02:22:11.590><c> product</c><02:22:12.160><c> x</c><02:22:13.170><c> equals</c><02:22:14.170><c> which</c><02:22:15.160><c> is</c><02:22:15.280><c> just</c><02:22:15.431><c> gonna</c>

02:22:15.540 --> 02:22:15.550 align:start position:0%
do product x equals which is just gonna
 

02:22:15.550 --> 02:22:17.790 align:start position:0%
do product x equals which is just gonna
multiply<02:22:15.790><c> everything</c><02:22:16.420><c> together</c><02:22:16.570><c> and</c><02:22:17.110><c> we're</c>

02:22:17.790 --> 02:22:17.800 align:start position:0%
multiply everything together and we're
 

02:22:17.800 --> 02:22:24.540 align:start position:0%
multiply everything together and we're
going<02:22:18.070><c> to</c><02:22:18.160><c> do</c><02:22:18.280><c> our</c><02:22:18.700><c> eye</c><02:22:21.750><c> Hey</c><02:22:22.780><c> so</c><02:22:23.771><c> the</c><02:22:24.280><c> eye</c>

02:22:24.540 --> 02:22:24.550 align:start position:0%
going to do our eye Hey so the eye
 

02:22:24.550 --> 02:22:28.410 align:start position:0%
going to do our eye Hey so the eye
references<02:22:25.480><c> the</c><02:22:25.811><c> outer</c><02:22:26.760><c> array</c><02:22:27.760><c> and</c><02:22:28.090><c> the</c><02:22:28.181><c> J</c>

02:22:28.410 --> 02:22:28.420 align:start position:0%
references the outer array and the J
 

02:22:28.420 --> 02:22:32.280 align:start position:0%
references the outer array and the J
references<02:22:29.290><c> the</c><02:22:29.800><c> inner</c><02:22:30.130><c> array</c><02:22:30.870><c> within</c><02:22:31.870><c> the</c>

02:22:32.280 --> 02:22:32.290 align:start position:0%
references the inner array within the
 

02:22:32.290 --> 02:22:35.040 align:start position:0%
references the inner array within the
what<02:22:32.470><c> we're</c><02:22:32.620><c> passing</c><02:22:33.040><c> in</c><02:22:33.190><c> and</c><02:22:33.460><c> now</c><02:22:34.330><c> we're</c><02:22:34.870><c> done</c>

02:22:35.040 --> 02:22:35.050 align:start position:0%
what we're passing in and now we're done
 

02:22:35.050 --> 02:22:38.250 align:start position:0%
what we're passing in and now we're done
so<02:22:35.771><c> let's</c><02:22:36.700><c> we</c><02:22:37.181><c> have</c><02:22:37.510><c> the</c><02:22:37.630><c> console</c><02:22:38.080><c> dot</c><02:22:38.200><c> log</c>

02:22:38.250 --> 02:22:38.260 align:start position:0%
so let's we have the console dot log
 

02:22:38.260 --> 02:22:40.020 align:start position:0%
so let's we have the console dot log
here<02:22:38.800><c> so</c><02:22:38.980><c> let's</c><02:22:39.130><c> run</c><02:22:39.400><c> this</c><02:22:39.521><c> and</c><02:22:39.760><c> see</c><02:22:39.790><c> what</c>

02:22:40.020 --> 02:22:40.030 align:start position:0%
here so let's run this and see what
 

02:22:40.030 --> 02:22:48.070 align:start position:0%
here so let's run this and see what
happens<02:22:40.090><c> and</c><02:22:42.720><c> 5040</c>

02:22:48.070 --> 02:22:48.080 align:start position:0%
 
 

02:22:48.080 --> 02:22:50.650 align:start position:0%
 
next<02:22:48.890><c> I'm</c><02:22:49.010><c> going</c><02:22:49.280><c> to</c><02:22:49.340><c> talk</c><02:22:49.580><c> about</c><02:22:49.729><c> do-while</c>

02:22:50.650 --> 02:22:50.660 align:start position:0%
next I'm going to talk about do-while
 

02:22:50.660 --> 02:22:53.380 align:start position:0%
next I'm going to talk about do-while
loops<02:22:51.140><c> now</c><02:22:51.770><c> we</c><02:22:51.830><c> already</c><02:22:52.280><c> talked</c><02:22:52.700><c> about</c><02:22:53.000><c> while</c>

02:22:53.380 --> 02:22:53.390 align:start position:0%
loops now we already talked about while
 

02:22:53.390 --> 02:22:55.809 align:start position:0%
loops now we already talked about while
loops<02:22:53.840><c> and</c><02:22:54.170><c> I'm</c><02:22:54.710><c> gonna</c><02:22:54.859><c> review</c><02:22:55.280><c> this</c><02:22:55.490><c> while</c>

02:22:55.809 --> 02:22:55.819 align:start position:0%
loops and I'm gonna review this while
 

02:22:55.819 --> 02:22:57.520 align:start position:0%
loops and I'm gonna review this while
loop<02:22:56.120><c> and</c><02:22:56.390><c> then</c><02:22:56.810><c> I</c><02:22:56.870><c> will</c><02:22:57.020><c> tell</c><02:22:57.200><c> you</c><02:22:57.319><c> how</c><02:22:57.500><c> a</c>

02:22:57.520 --> 02:22:57.530 align:start position:0%
loop and then I will tell you how a
 

02:22:57.530 --> 02:23:00.040 align:start position:0%
loop and then I will tell you how a
do-while<02:22:58.310><c> loop</c><02:22:58.670><c> is</c><02:22:58.910><c> different</c><02:22:59.569><c> than</c><02:22:59.750><c> a</c><02:22:59.840><c> while</c>

02:23:00.040 --> 02:23:00.050 align:start position:0%
do-while loop is different than a while
 

02:23:00.050 --> 02:23:04.059 align:start position:0%
do-while loop is different than a while
loop<02:23:00.319><c> so</c><02:23:00.620><c> this</c><02:23:01.370><c> while</c><02:23:01.729><c> loop</c><02:23:02.120><c> first</c><02:23:02.830><c> checks</c><02:23:03.830><c> the</c>

02:23:04.059 --> 02:23:04.069 align:start position:0%
loop so this while loop first checks the
 

02:23:04.069 --> 02:23:07.570 align:start position:0%
loop so this while loop first checks the
condition<02:23:04.670><c> before</c><02:23:05.300><c> it</c><02:23:05.899><c> runs</c><02:23:06.200><c> any</c><02:23:06.530><c> code</c><02:23:07.040><c> within</c>

02:23:07.570 --> 02:23:07.580 align:start position:0%
condition before it runs any code within
 

02:23:07.580 --> 02:23:12.010 align:start position:0%
condition before it runs any code within
the<02:23:08.330><c> loop</c><02:23:08.540><c> a</c><02:23:08.840><c> do</c><02:23:09.830><c> while</c><02:23:10.160><c> loop</c><02:23:10.220><c> will</c><02:23:11.120><c> always</c><02:23:11.330><c> run</c>

02:23:12.010 --> 02:23:12.020 align:start position:0%
the loop a do while loop will always run
 

02:23:12.020 --> 02:23:15.550 align:start position:0%
the loop a do while loop will always run
at<02:23:12.229><c> least</c><02:23:12.470><c> one</c><02:23:13.160><c> time</c><02:23:13.640><c> and</c><02:23:14.000><c> then</c><02:23:14.090><c> it</c><02:23:14.810><c> will</c><02:23:15.290><c> check</c>

02:23:15.550 --> 02:23:15.560 align:start position:0%
at least one time and then it will check
 

02:23:15.560 --> 02:23:19.090 align:start position:0%
at least one time and then it will check
the<02:23:15.620><c> condition</c><02:23:15.920><c> so</c><02:23:16.880><c> here</c><02:23:17.720><c> we</c><02:23:18.140><c> have</c><02:23:18.439><c> this</c><02:23:18.710><c> empty</c>

02:23:19.090 --> 02:23:19.100 align:start position:0%
the condition so here we have this empty
 

02:23:19.100 --> 02:23:22.179 align:start position:0%
the condition so here we have this empty
array<02:23:19.340><c> we</c><02:23:19.490><c> have</c><02:23:19.520><c> I</c><02:23:19.819><c> equals</c><02:23:20.300><c> 10</c><02:23:20.660><c> so</c><02:23:21.229><c> while</c><02:23:21.800><c> I</c><02:23:22.069><c> is</c>

02:23:22.179 --> 02:23:22.189 align:start position:0%
array we have I equals 10 so while I is
 

02:23:22.189 --> 02:23:26.200 align:start position:0%
array we have I equals 10 so while I is
less<02:23:22.819><c> than</c><02:23:23.359><c> 5</c><02:23:23.720><c> well</c><02:23:24.649><c> I</c><02:23:24.890><c> is</c><02:23:25.100><c> not</c><02:23:25.370><c> less</c><02:23:25.640><c> than</c><02:23:25.670><c> 5</c><02:23:26.000><c> so</c>

02:23:26.200 --> 02:23:26.210 align:start position:0%
less than 5 well I is not less than 5 so
 

02:23:26.210 --> 02:23:27.880 align:start position:0%
less than 5 well I is not less than 5 so
it's<02:23:26.359><c> not</c><02:23:26.479><c> gonna</c><02:23:26.660><c> do</c><02:23:26.810><c> anything</c><02:23:27.080><c> let's</c><02:23:27.710><c> see</c>

02:23:27.880 --> 02:23:27.890 align:start position:0%
it's not gonna do anything let's see
 

02:23:27.890 --> 02:23:30.760 align:start position:0%
it's not gonna do anything let's see
what<02:23:28.040><c> happens</c><02:23:28.430><c> so</c><02:23:28.970><c> we</c><02:23:29.210><c> see</c><02:23:29.420><c> it</c><02:23:29.689><c> logged</c><02:23:30.080><c> out</c><02:23:30.260><c> 10</c>

02:23:30.760 --> 02:23:30.770 align:start position:0%
what happens so we see it logged out 10
 

02:23:30.770 --> 02:23:33.460 align:start position:0%
what happens so we see it logged out 10
and<02:23:31.100><c> then</c><02:23:31.310><c> an</c><02:23:31.430><c> empty</c><02:23:31.670><c> array</c><02:23:32.330><c> because</c><02:23:33.050><c> I</c>

02:23:33.460 --> 02:23:33.470 align:start position:0%
and then an empty array because I
 

02:23:33.470 --> 02:23:35.800 align:start position:0%
and then an empty array because I
started<02:23:34.010><c> as</c><02:23:34.160><c> 10</c><02:23:34.460><c> and</c><02:23:34.729><c> my</c><02:23:35.000><c> array</c><02:23:35.270><c> started</c><02:23:35.750><c> as</c>

02:23:35.800 --> 02:23:35.810 align:start position:0%
started as 10 and my array started as
 

02:23:35.810 --> 02:23:37.389 align:start position:0%
started as 10 and my array started as
this<02:23:35.870><c> empty</c><02:23:36.080><c> erase</c><02:23:36.410><c> you</c><02:23:36.649><c> were</c><02:23:36.740><c> logging</c><02:23:36.979><c> the</c><02:23:37.220><c> I</c>

02:23:37.389 --> 02:23:37.399 align:start position:0%
this empty erase you were logging the I
 

02:23:37.399 --> 02:23:40.389 align:start position:0%
this empty erase you were logging the I
and<02:23:37.760><c> my</c><02:23:38.240><c> array</c><02:23:38.540><c> with</c><02:23:39.319><c> a</c><02:23:39.350><c> do-while</c><02:23:39.830><c> loop</c><02:23:40.130><c> it's</c>

02:23:40.389 --> 02:23:40.399 align:start position:0%
and my array with a do-while loop it's
 

02:23:40.399 --> 02:23:42.969 align:start position:0%
and my array with a do-while loop it's
different<02:23:40.819><c> so</c><02:23:41.270><c> what</c><02:23:41.390><c> I'm</c><02:23:41.450><c> going</c><02:23:41.569><c> to</c><02:23:41.600><c> do</c><02:23:41.780><c> is</c><02:23:41.990><c> cut</c>

02:23:42.969 --> 02:23:42.979 align:start position:0%
different so what I'm going to do is cut
 

02:23:42.979 --> 02:23:45.130 align:start position:0%
different so what I'm going to do is cut
this<02:23:43.310><c> line</c><02:23:43.880><c> up</c><02:23:44.120><c> here</c><02:23:44.450><c> and</c><02:23:44.510><c> put</c><02:23:44.840><c> it</c><02:23:44.899><c> at</c><02:23:44.960><c> the</c><02:23:45.020><c> end</c>

02:23:45.130 --> 02:23:45.140 align:start position:0%
this line up here and put it at the end
 

02:23:45.140 --> 02:23:47.830 align:start position:0%
this line up here and put it at the end
and<02:23:45.649><c> then</c><02:23:46.430><c> at</c><02:23:46.520><c> the</c><02:23:46.640><c> beginning</c><02:23:46.760><c> I'm</c><02:23:47.359><c> gonna</c><02:23:47.600><c> put</c>

02:23:47.830 --> 02:23:47.840 align:start position:0%
and then at the beginning I'm gonna put
 

02:23:47.840 --> 02:23:51.099 align:start position:0%
and then at the beginning I'm gonna put
the<02:23:47.990><c> keyword</c><02:23:48.530><c> do</c><02:23:49.220><c> in</c><02:23:49.580><c> a</c><02:23:49.850><c> do-while</c><02:23:50.240><c> loop</c><02:23:50.569><c> this</c>

02:23:51.099 --> 02:23:51.109 align:start position:0%
the keyword do in a do-while loop this
 

02:23:51.109 --> 02:23:53.950 align:start position:0%
the keyword do in a do-while loop this
is<02:23:51.290><c> always</c><02:23:51.710><c> run</c><02:23:51.979><c> at</c><02:23:52.160><c> least</c><02:23:52.340><c> once</c><02:23:52.819><c> before</c><02:23:53.359><c> it</c>

02:23:53.950 --> 02:23:53.960 align:start position:0%
is always run at least once before it
 

02:23:53.960 --> 02:23:55.960 align:start position:0%
is always run at least once before it
checks<02:23:54.229><c> the</c><02:23:54.350><c> condition</c><02:23:54.560><c> so</c><02:23:55.310><c> first</c><02:23:55.640><c> it's</c><02:23:55.819><c> going</c>

02:23:55.960 --> 02:23:55.970 align:start position:0%
checks the condition so first it's going
 

02:23:55.970 --> 02:23:58.059 align:start position:0%
checks the condition so first it's going
to<02:23:56.120><c> do</c><02:23:56.270><c> these</c><02:23:56.479><c> things</c><02:23:56.780><c> and</c><02:23:56.990><c> then</c><02:23:57.680><c> it's</c><02:23:57.890><c> going</c>

02:23:58.059 --> 02:23:58.069 align:start position:0%
to do these things and then it's going
 

02:23:58.069 --> 02:24:00.160 align:start position:0%
to do these things and then it's going
to<02:23:58.160><c> check</c><02:23:58.370><c> the</c><02:23:58.550><c> condition</c><02:23:59.060><c> in</c><02:23:59.210><c> this</c><02:23:59.660><c> case</c><02:23:59.720><c> it's</c>

02:24:00.160 --> 02:24:00.170 align:start position:0%
to check the condition in this case it's
 

02:24:00.170 --> 02:24:01.750 align:start position:0%
to check the condition in this case it's
going<02:24:00.319><c> to</c><02:24:00.410><c> find</c><02:24:00.649><c> out</c><02:24:00.770><c> the</c><02:24:00.890><c> condition</c><02:24:01.100><c> as</c><02:24:01.430><c> false</c>

02:24:01.750 --> 02:24:01.760 align:start position:0%
going to find out the condition as false
 

02:24:01.760 --> 02:24:03.580 align:start position:0%
going to find out the condition as false
and<02:24:02.060><c> it's</c><02:24:02.540><c> going</c><02:24:02.810><c> to</c><02:24:02.960><c> break</c><02:24:03.229><c> out</c><02:24:03.380><c> of</c><02:24:03.410><c> the</c><02:24:03.560><c> loop</c>

02:24:03.580 --> 02:24:03.590 align:start position:0%
and it's going to break out of the loop
 

02:24:03.590 --> 02:24:05.520 align:start position:0%
and it's going to break out of the loop
let's<02:24:04.189><c> see</c><02:24:04.370><c> what</c><02:24:04.460><c> happens</c><02:24:04.790><c> here</c>

02:24:05.520 --> 02:24:05.530 align:start position:0%
let's see what happens here
 

02:24:05.530 --> 02:24:10.240 align:start position:0%
let's see what happens here
see<02:24:06.530><c> now</c><02:24:06.859><c> I</c><02:24:06.890><c> is</c><02:24:07.189><c> 11</c><02:24:08.060><c> and</c><02:24:08.270><c> the</c><02:24:08.750><c> array</c><02:24:09.020><c> has</c><02:24:09.649><c> the</c><02:24:09.979><c> 10</c>

02:24:10.240 --> 02:24:10.250 align:start position:0%
see now I is 11 and the array has the 10
 

02:24:10.250 --> 02:24:14.801 align:start position:0%
see now I is 11 and the array has the 10
added<02:24:10.700><c> to</c><02:24:10.850><c> it</c>

02:24:14.801 --> 02:24:14.811 align:start position:0%
 
 

02:24:14.811 --> 02:24:18.371 align:start position:0%
 
this<02:24:15.591><c> is</c><02:24:15.860><c> a</c><02:24:15.891><c> coding</c><02:24:16.551><c> challenge</c><02:24:17.120><c> we</c><02:24:17.841><c> have</c><02:24:18.110><c> this</c>

02:24:18.371 --> 02:24:18.381 align:start position:0%
this is a coding challenge we have this
 

02:24:18.381 --> 02:24:21.220 align:start position:0%
this is a coding challenge we have this
array<02:24:18.891><c> of</c><02:24:19.070><c> objects</c><02:24:19.610><c> in</c><02:24:19.761><c> our</c><02:24:20.030><c> context</c><02:24:20.811><c> lists</c>

02:24:21.220 --> 02:24:21.230 align:start position:0%
array of objects in our context lists
 

02:24:21.230 --> 02:24:23.921 align:start position:0%
array of objects in our context lists
and<02:24:21.381><c> you'll</c><02:24:22.131><c> see</c><02:24:22.370><c> each</c><02:24:22.610><c> object</c><02:24:23.330><c> is</c><02:24:23.511><c> one</c><02:24:23.780><c> of</c><02:24:23.870><c> our</c>

02:24:23.921 --> 02:24:23.931 align:start position:0%
and you'll see each object is one of our
 

02:24:23.931 --> 02:24:26.201 align:start position:0%
and you'll see each object is one of our
contacts<02:24:24.410><c> with</c><02:24:24.650><c> the</c><02:24:25.041><c> first</c><02:24:25.311><c> name</c><02:24:25.551><c> a</c><02:24:25.580><c> last</c><02:24:25.910><c> name</c>

02:24:26.201 --> 02:24:26.211 align:start position:0%
contacts with the first name a last name
 

02:24:26.211 --> 02:24:29.381 align:start position:0%
contacts with the first name a last name
a<02:24:26.271><c> number</c><02:24:26.631><c> and</c><02:24:27.021><c> likes</c><02:24:27.530><c> so</c><02:24:28.341><c> these</c><02:24:28.940><c> are</c><02:24:29.091><c> key</c>

02:24:29.381 --> 02:24:29.391 align:start position:0%
a number and likes so these are key
 

02:24:29.391 --> 02:24:32.320 align:start position:0%
a number and likes so these are key
value<02:24:29.421><c> pairs</c><02:24:30.110><c> here</c><02:24:30.561><c> so</c><02:24:31.221><c> what</c><02:24:31.551><c> we</c><02:24:31.761><c> want</c><02:24:32.030><c> to</c><02:24:32.120><c> do</c>

02:24:32.320 --> 02:24:32.330 align:start position:0%
value pairs here so what we want to do
 

02:24:32.330 --> 02:24:35.860 align:start position:0%
value pairs here so what we want to do
is<02:24:32.570><c> create</c><02:24:33.351><c> this</c><02:24:33.681><c> lookup</c><02:24:34.461><c> profile</c><02:24:35.240><c> function</c>

02:24:35.860 --> 02:24:35.870 align:start position:0%
is create this lookup profile function
 

02:24:35.870 --> 02:24:38.621 align:start position:0%
is create this lookup profile function
where<02:24:36.320><c> we</c><02:24:36.440><c> pass</c><02:24:36.740><c> in</c><02:24:37.101><c> a</c><02:24:37.251><c> name</c><02:24:37.671><c> this</c><02:24:38.120><c> is</c><02:24:38.150><c> a</c><02:24:38.301><c> first</c>

02:24:38.621 --> 02:24:38.631 align:start position:0%
where we pass in a name this is a first
 

02:24:38.631 --> 02:24:41.501 align:start position:0%
where we pass in a name this is a first
name<02:24:38.870><c> and</c><02:24:39.141><c> the</c><02:24:39.711><c> property</c><02:24:40.280><c> and</c><02:24:40.521><c> it's</c><02:24:41.150><c> going</c><02:24:41.360><c> to</c>

02:24:41.501 --> 02:24:41.511 align:start position:0%
name and the property and it's going to
 

02:24:41.511 --> 02:24:43.810 align:start position:0%
name and the property and it's going to
return<02:24:41.900><c> the</c><02:24:42.141><c> value</c><02:24:42.471><c> of</c><02:24:42.501><c> that</c><02:24:42.650><c> property</c><02:24:42.950><c> for</c>

02:24:43.810 --> 02:24:43.820 align:start position:0%
return the value of that property for
 

02:24:43.820 --> 02:24:46.390 align:start position:0%
return the value of that property for
instance<02:24:44.211><c> if</c><02:24:44.421><c> we</c><02:24:44.931><c> pass</c><02:24:45.171><c> in</c><02:24:45.410><c> the</c><02:24:45.440><c> name</c><02:24:45.650><c> christen</c>

02:24:46.390 --> 02:24:46.400 align:start position:0%
instance if we pass in the name christen
 

02:24:46.400 --> 02:24:49.211 align:start position:0%
instance if we pass in the name christen
here<02:24:46.791><c> and</c><02:24:47.001><c> we</c><02:24:47.721><c> pass</c><02:24:48.021><c> in</c><02:24:48.261><c> the</c><02:24:48.291><c> property</c><02:24:48.950><c> of</c><02:24:49.160><c> a</c>

02:24:49.211 --> 02:24:49.221 align:start position:0%
here and we pass in the property of a
 

02:24:49.221 --> 02:24:52.841 align:start position:0%
here and we pass in the property of a
number<02:24:49.881><c> it</c><02:24:50.330><c> should</c><02:24:50.480><c> return</c><02:24:51.080><c> unknown</c><02:24:51.830><c> if</c><02:24:52.221><c> we</c>

02:24:52.841 --> 02:24:52.851 align:start position:0%
number it should return unknown if we
 

02:24:52.851 --> 02:24:56.081 align:start position:0%
number it should return unknown if we
pass<02:24:53.181><c> in</c><02:24:53.450><c> the</c><02:24:53.480><c> first</c><02:24:54.021><c> name</c><02:24:54.261><c> of</c><02:24:54.820><c> Sherlock</c><02:24:55.820><c> up</c>

02:24:56.081 --> 02:24:56.091 align:start position:0%
pass in the first name of Sherlock up
 

02:24:56.091 --> 02:25:00.041 align:start position:0%
pass in the first name of Sherlock up
here<02:24:56.421><c> and</c><02:24:56.601><c> we</c><02:24:57.110><c> return</c><02:24:57.620><c> the</c><02:24:57.830><c> property</c><02:24:58.101><c> and</c><02:24:59.051><c> we</c>

02:25:00.041 --> 02:25:00.051 align:start position:0%
here and we return the property and we
 

02:25:00.051 --> 02:25:02.440 align:start position:0%
here and we return the property and we
pass<02:25:00.320><c> in</c><02:25:00.561><c> the</c><02:25:00.681><c> property</c><02:25:01.160><c> of</c><02:25:01.251><c> likes</c><02:25:01.580><c> it</c><02:25:01.940><c> should</c>

02:25:02.440 --> 02:25:02.450 align:start position:0%
pass in the property of likes it should
 

02:25:02.450 --> 02:25:04.930 align:start position:0%
pass in the property of likes it should
return<02:25:02.811><c> the</c><02:25:02.961><c> array</c><02:25:03.230><c> intriguing</c><02:25:04.101><c> cases</c><02:25:04.521><c> and</c>

02:25:04.930 --> 02:25:04.940 align:start position:0%
return the array intriguing cases and
 

02:25:04.940 --> 02:25:08.230 align:start position:0%
return the array intriguing cases and
violin<02:25:05.870><c> if</c><02:25:06.351><c> the</c><02:25:06.980><c> name</c><02:25:07.221><c> that's</c><02:25:07.521><c> passed</c><02:25:07.791><c> in</c><02:25:08.030><c> does</c>

02:25:08.230 --> 02:25:08.240 align:start position:0%
violin if the name that's passed in does
 

02:25:08.240 --> 02:25:10.661 align:start position:0%
violin if the name that's passed in does
not<02:25:08.271><c> correspond</c><02:25:09.021><c> to</c><02:25:09.051><c> any</c><02:25:09.230><c> context</c><02:25:10.101><c> then</c><02:25:10.551><c> our</c>

02:25:10.661 --> 02:25:10.671 align:start position:0%
not correspond to any context then our
 

02:25:10.671 --> 02:25:13.121 align:start position:0%
not correspond to any context then our
functions<02:25:11.120><c> to</c><02:25:11.240><c> return</c><02:25:11.601><c> no</c><02:25:11.961><c> such</c><02:25:12.230><c> contact</c><02:25:12.801><c> and</c>

02:25:13.121 --> 02:25:13.131 align:start position:0%
functions to return no such contact and
 

02:25:13.131 --> 02:25:15.400 align:start position:0%
functions to return no such contact and
if<02:25:13.700><c> there's</c><02:25:13.910><c> no</c><02:25:14.030><c> property</c><02:25:14.511><c> it</c><02:25:14.780><c> should</c><02:25:15.080><c> return</c>

02:25:15.400 --> 02:25:15.410 align:start position:0%
if there's no property it should return
 

02:25:15.410 --> 02:25:18.011 align:start position:0%
if there's no property it should return
no<02:25:15.830><c> such</c><02:25:16.160><c> property</c><02:25:16.730><c> so</c><02:25:17.450><c> let's</c><02:25:17.660><c> go</c><02:25:17.811><c> to</c><02:25:17.900><c> this</c>

02:25:18.011 --> 02:25:18.021 align:start position:0%
no such property so let's go to this
 

02:25:18.021 --> 02:25:20.350 align:start position:0%
no such property so let's go to this
function<02:25:18.471><c> here</c><02:25:18.740><c> and</c><02:25:18.950><c> start</c><02:25:19.461><c> creating</c><02:25:19.791><c> it</c><02:25:20.150><c> so</c>

02:25:20.350 --> 02:25:20.360 align:start position:0%
function here and start creating it so
 

02:25:20.360 --> 02:25:21.730 align:start position:0%
function here and start creating it so
the<02:25:20.631><c> first</c><02:25:20.900><c> thing</c><02:25:21.110><c> we're</c><02:25:21.291><c> going</c><02:25:21.381><c> to</c><02:25:21.440><c> have</c><02:25:21.501><c> to</c>

02:25:21.730 --> 02:25:21.740 align:start position:0%
the first thing we're going to have to
 

02:25:21.740 --> 02:25:24.220 align:start position:0%
the first thing we're going to have to
do<02:25:21.891><c> is</c><02:25:22.041><c> iterate</c><02:25:22.311><c> through</c><02:25:23.120><c> each</c><02:25:23.391><c> element</c><02:25:24.110><c> in</c>

02:25:24.220 --> 02:25:24.230 align:start position:0%
do is iterate through each element in
 

02:25:24.230 --> 02:25:27.551 align:start position:0%
do is iterate through each element in
the<02:25:24.561><c> contacts</c><02:25:25.160><c> list</c><02:25:25.660><c> so</c><02:25:26.660><c> let's</c><02:25:26.841><c> make</c><02:25:27.051><c> a</c><02:25:27.080><c> for</c>

02:25:27.551 --> 02:25:27.561 align:start position:0%
the contacts list so let's make a for
 

02:25:27.561 --> 02:25:35.161 align:start position:0%
the contacts list so let's make a for
loop<02:25:27.740><c> so</c><02:25:28.221><c> for</c><02:25:29.230><c> bar</c><02:25:30.431><c> VAR</c><02:25:31.431><c> I</c><02:25:32.471><c> equals</c><02:25:33.471><c> 0</c>

02:25:35.161 --> 02:25:35.171 align:start position:0%
loop so for bar VAR I equals 0
 

02:25:35.171 --> 02:25:45.310 align:start position:0%
loop so for bar VAR I equals 0
while<02:25:36.171><c> I</c><02:25:36.410><c> is</c><02:25:36.950><c> less</c><02:25:37.521><c> than</c><02:25:39.251><c> contacts</c><02:25:42.190><c> length</c><02:25:44.320><c> and</c>

02:25:45.310 --> 02:25:45.320 align:start position:0%
while I is less than contacts length and
 

02:25:45.320 --> 02:25:47.470 align:start position:0%
while I is less than contacts length and
at<02:25:45.561><c> the</c><02:25:45.681><c> end</c><02:25:45.891><c> of</c><02:25:46.070><c> each</c><02:25:46.280><c> iteration</c><02:25:46.311><c> we'll</c><02:25:47.030><c> do</c><02:25:47.211><c> i</c>

02:25:47.470 --> 02:25:47.480 align:start position:0%
at the end of each iteration we'll do i
 

02:25:47.480 --> 02:25:51.131 align:start position:0%
at the end of each iteration we'll do i
+<02:25:47.931><c> +</c><02:25:48.230><c> to</c><02:25:48.381><c> increment</c><02:25:48.681><c> that</c><02:25:49.690><c> so</c><02:25:50.690><c> for</c><02:25:50.931><c> each</c><02:25:51.110><c> of</c>

02:25:51.131 --> 02:25:51.141 align:start position:0%
+ + to increment that so for each of
 

02:25:51.141 --> 02:25:52.930 align:start position:0%
+ + to increment that so for each of
these<02:25:51.351><c> contacts</c><02:25:52.011><c> the</c><02:25:52.280><c> first</c><02:25:52.610><c> thing</c><02:25:52.820><c> we're</c>

02:25:52.930 --> 02:25:52.940 align:start position:0%
these contacts the first thing we're
 

02:25:52.940 --> 02:25:56.411 align:start position:0%
these contacts the first thing we're
going<02:25:53.030><c> to</c><02:25:53.091><c> check</c><02:25:53.391><c> is</c><02:25:53.631><c> if</c><02:25:54.291><c> the</c><02:25:55.011><c> name</c><02:25:55.341><c> is</c><02:25:55.761><c> a</c><02:25:55.820><c> name</c>

02:25:56.411 --> 02:25:56.421 align:start position:0%
going to check is if the name is a name
 

02:25:56.421 --> 02:26:06.460 align:start position:0%
going to check is if the name is a name
in<02:25:56.721><c> this</c><02:25:56.870><c> list</c><02:25:57.261><c> so</c><02:25:57.671><c> if</c><02:25:59.561><c> contacts</c><02:26:00.561><c> I</c>

02:26:06.460 --> 02:26:06.470 align:start position:0%
 
 

02:26:06.470 --> 02:26:12.460 align:start position:0%
 
first<02:26:06.950><c> name</c><02:26:09.069><c> equals</c><02:26:10.069><c> equals</c><02:26:10.340><c> equals</c><02:26:11.200><c> the</c><02:26:12.200><c> name</c>

02:26:12.460 --> 02:26:12.470 align:start position:0%
first name equals equals equals the name
 

02:26:12.470 --> 02:26:14.590 align:start position:0%
first name equals equals equals the name
that<02:26:12.710><c> was</c><02:26:12.830><c> passed</c><02:26:13.130><c> in</c><02:26:13.430><c> so</c><02:26:14.300><c> we're</c><02:26:14.420><c> checking</c>

02:26:14.590 --> 02:26:14.600 align:start position:0%
that was passed in so we're checking
 

02:26:14.600 --> 02:26:16.330 align:start position:0%
that was passed in so we're checking
each<02:26:14.989><c> eye</c><02:26:15.170><c> to</c><02:26:15.200><c> see</c><02:26:15.620><c> if</c><02:26:15.680><c> was</c><02:26:15.859><c> the</c><02:26:15.950><c> name</c><02:26:16.100><c> that</c><02:26:16.250><c> was</c>

02:26:16.330 --> 02:26:16.340 align:start position:0%
each eye to see if was the name that was
 

02:26:16.340 --> 02:26:20.769 align:start position:0%
each eye to see if was the name that was
passed<02:26:16.670><c> in</c><02:26:16.970><c> and</c><02:26:18.160><c> if</c><02:26:19.160><c> so</c><02:26:19.580><c> we're</c><02:26:20.270><c> going</c><02:26:20.450><c> to</c><02:26:20.540><c> do</c>

02:26:20.769 --> 02:26:20.779 align:start position:0%
passed in and if so we're going to do
 

02:26:20.779 --> 02:26:23.469 align:start position:0%
passed in and if so we're going to do
something<02:26:21.520><c> now</c><02:26:22.520><c> if</c><02:26:22.850><c> now</c><02:26:23.120><c> we're</c><02:26:23.270><c> gonna</c><02:26:23.390><c> do</c>

02:26:23.469 --> 02:26:23.479 align:start position:0%
something now if now we're gonna do
 

02:26:23.479 --> 02:26:25.389 align:start position:0%
something now if now we're gonna do
something<02:26:23.660><c> else</c><02:26:23.870><c> so</c><02:26:24.020><c> let's</c><02:26:24.229><c> do</c><02:26:24.439><c> that</c><02:26:24.590><c> now</c>

02:26:25.389 --> 02:26:25.399 align:start position:0%
something else so let's do that now
 

02:26:25.399 --> 02:26:27.550 align:start position:0%
something else so let's do that now
remember<02:26:26.000><c> if</c><02:26:26.239><c> the</c><02:26:26.600><c> name</c><02:26:26.779><c> that</c><02:26:27.020><c> was</c><02:26:27.109><c> passed</c><02:26:27.350><c> in</c>

02:26:27.550 --> 02:26:27.560 align:start position:0%
remember if the name that was passed in
 

02:26:27.560 --> 02:26:29.380 align:start position:0%
remember if the name that was passed in
is<02:26:27.800><c> not</c><02:26:27.950><c> in</c><02:26:28.130><c> the</c><02:26:28.279><c> array</c><02:26:28.550><c> we're</c><02:26:29.029><c> going</c><02:26:29.060><c> to</c>

02:26:29.380 --> 02:26:29.390 align:start position:0%
is not in the array we're going to
 

02:26:29.390 --> 02:26:35.979 align:start position:0%
is not in the array we're going to
return<02:26:30.489><c> no</c><02:26:31.489><c> such</c><02:26:32.029><c> contact</c><02:26:34.630><c> however</c><02:26:35.630><c> if</c><02:26:35.750><c> it</c><02:26:35.870><c> is</c>

02:26:35.979 --> 02:26:35.989 align:start position:0%
return no such contact however if it is
 

02:26:35.989 --> 02:26:36.940 align:start position:0%
return no such contact however if it is
in<02:26:36.170><c> the</c><02:26:36.260><c> array</c><02:26:36.439><c> we're</c><02:26:36.529><c> gonna</c><02:26:36.680><c> do</c><02:26:36.739><c> something</c>

02:26:36.940 --> 02:26:36.950 align:start position:0%
in the array we're gonna do something
 

02:26:36.950 --> 02:26:39.519 align:start position:0%
in the array we're gonna do something
else<02:26:37.189><c> if</c><02:26:37.580><c> the</c><02:26:38.060><c> name</c><02:26:38.270><c> is</c><02:26:38.510><c> in</c><02:26:38.689><c> the</c><02:26:38.779><c> context</c><02:26:39.319><c> list</c>

02:26:39.519 --> 02:26:39.529 align:start position:0%
else if the name is in the context list
 

02:26:39.529 --> 02:26:41.440 align:start position:0%
else if the name is in the context list
we're<02:26:39.739><c> going</c><02:26:40.010><c> to</c><02:26:40.130><c> return</c><02:26:40.520><c> the</c><02:26:40.729><c> value</c><02:26:41.180><c> of</c><02:26:41.210><c> the</c>

02:26:41.440 --> 02:26:41.450 align:start position:0%
we're going to return the value of the
 

02:26:41.450 --> 02:26:44.219 align:start position:0%
we're going to return the value of the
property<02:26:41.899><c> that</c><02:26:41.960><c> was</c><02:26:42.140><c> passed</c><02:26:42.439><c> in</c><02:26:42.680><c> so</c><02:26:43.279><c> return</c>

02:26:44.219 --> 02:26:44.229 align:start position:0%
property that was passed in so return
 

02:26:44.229 --> 02:26:45.610 align:start position:0%
property that was passed in so return
contacts

02:26:45.610 --> 02:26:45.620 align:start position:0%
contacts
 

02:26:45.620 --> 02:26:50.229 align:start position:0%
contacts
I<02:26:47.380><c> dropped</c><02:26:48.380><c> so</c><02:26:49.370><c> this</c><02:26:49.550><c> will</c><02:26:49.729><c> return</c><02:26:50.060><c> the</c><02:26:50.120><c> value</c>

02:26:50.229 --> 02:26:50.239 align:start position:0%
I dropped so this will return the value
 

02:26:50.239 --> 02:26:51.969 align:start position:0%
I dropped so this will return the value
of<02:26:50.689><c> that</c><02:26:50.840><c> property</c><02:26:51.140><c> that</c><02:26:51.319><c> was</c><02:26:51.500><c> passed</c><02:26:51.739><c> in</c>

02:26:51.969 --> 02:26:51.979 align:start position:0%
of that property that was passed in
 

02:26:51.979 --> 02:26:53.920 align:start position:0%
of that property that was passed in
however<02:26:52.790><c> there</c><02:26:53.000><c> is</c><02:26:53.060><c> another</c><02:26:53.090><c> case</c><02:26:53.630><c> which</c><02:26:53.899><c> is</c>

02:26:53.920 --> 02:26:53.930 align:start position:0%
however there is another case which is
 

02:26:53.930 --> 02:26:56.979 align:start position:0%
however there is another case which is
if<02:26:54.260><c> the</c><02:26:54.830><c> property</c><02:26:55.340><c> does</c><02:26:55.550><c> not</c><02:26:55.580><c> exist</c><02:26:56.149><c> we</c><02:26:56.600><c> return</c>

02:26:56.979 --> 02:26:56.989 align:start position:0%
if the property does not exist we return
 

02:26:56.989 --> 02:27:00.400 align:start position:0%
if the property does not exist we return
no<02:26:57.229><c> such</c><02:26:57.529><c> property</c><02:26:58.330><c> so</c><02:26:59.330><c> a</c><02:26:59.359><c> fancy</c><02:26:59.899><c> way</c><02:27:00.109><c> in</c>

02:27:00.400 --> 02:27:00.410 align:start position:0%
no such property so a fancy way in
 

02:27:00.410 --> 02:27:03.610 align:start position:0%
no such property so a fancy way in
JavaScript<02:27:01.100><c> of</c><02:27:01.279><c> saying</c><02:27:01.630><c> use</c><02:27:02.630><c> this</c><02:27:02.989><c> value</c><02:27:03.500><c> if</c>

02:27:03.610 --> 02:27:03.620 align:start position:0%
JavaScript of saying use this value if
 

02:27:03.620 --> 02:27:06.070 align:start position:0%
JavaScript of saying use this value if
it<02:27:03.739><c> exists</c><02:27:04.310><c> but</c><02:27:04.790><c> otherwise</c><02:27:05.359><c> use</c><02:27:05.660><c> a</c><02:27:05.689><c> different</c>

02:27:06.070 --> 02:27:06.080 align:start position:0%
it exists but otherwise use a different
 

02:27:06.080 --> 02:27:08.440 align:start position:0%
it exists but otherwise use a different
value<02:27:06.319><c> is</c><02:27:06.680><c> to</c><02:27:07.100><c> use</c><02:27:07.279><c> the</c><02:27:07.460><c> or</c><02:27:07.609><c> operator</c>

02:27:08.440 --> 02:27:08.450 align:start position:0%
value is to use the or operator
 

02:27:08.450 --> 02:27:12.610 align:start position:0%
value is to use the or operator
so<02:27:09.050><c> we'll</c><02:27:09.560><c> say</c><02:27:09.770><c> return</c><02:27:10.220><c> contact</c><02:27:11.120><c> I</c><02:27:11.300><c> prop</c><02:27:11.630><c> or</c><02:27:11.960><c> if</c>

02:27:12.610 --> 02:27:12.620 align:start position:0%
so we'll say return contact I prop or if
 

02:27:12.620 --> 02:27:15.820 align:start position:0%
so we'll say return contact I prop or if
it<02:27:12.979><c> doesn't</c><02:27:13.279><c> exist</c><02:27:13.609><c> we're</c><02:27:14.180><c> gonna</c><02:27:14.300><c> return</c><02:27:14.830><c> no</c>

02:27:15.820 --> 02:27:15.830 align:start position:0%
it doesn't exist we're gonna return no
 

02:27:15.830 --> 02:27:19.900 align:start position:0%
it doesn't exist we're gonna return no
such<02:27:16.600><c> property</c><02:27:18.160><c> and</c><02:27:19.160><c> just</c><02:27:19.460><c> so</c><02:27:19.520><c> you</c><02:27:19.580><c> know</c><02:27:19.640><c> there</c>

02:27:19.900 --> 02:27:19.910 align:start position:0%
such property and just so you know there
 

02:27:19.910 --> 02:27:22.000 align:start position:0%
such property and just so you know there
would<02:27:20.000><c> be</c><02:27:20.029><c> a</c><02:27:20.120><c> way</c><02:27:20.359><c> to</c><02:27:20.390><c> do</c><02:27:20.779><c> this</c><02:27:20.960><c> without</c><02:27:21.140><c> using</c>

02:27:22.000 --> 02:27:22.010 align:start position:0%
would be a way to do this without using
 

02:27:22.010 --> 02:27:25.660 align:start position:0%
would be a way to do this without using
this<02:27:22.550><c> or</c><02:27:22.819><c> operator</c><02:27:23.479><c> as</c><02:27:23.750><c> long</c><02:27:24.529><c> as</c><02:27:24.830><c> that</c><02:27:25.430><c> your</c>

02:27:25.660 --> 02:27:25.670 align:start position:0%
this or operator as long as that your
 

02:27:25.670 --> 02:27:28.120 align:start position:0%
this or operator as long as that your
code<02:27:26.000><c> passes</c><02:27:26.450><c> the</c><02:27:26.840><c> requirements</c><02:27:27.590><c> that's</c><02:27:27.890><c> all</c>

02:27:28.120 --> 02:27:28.130 align:start position:0%
code passes the requirements that's all
 

02:27:28.130 --> 02:27:29.170 align:start position:0%
code passes the requirements that's all
that's<02:27:28.310><c> important</c>

02:27:29.170 --> 02:27:29.180 align:start position:0%
that's important
 

02:27:29.180 --> 02:27:31.210 align:start position:0%
that's important
there's<02:27:29.450><c> many</c><02:27:29.750><c> ways</c><02:27:29.840><c> of</c><02:27:30.140><c> doing</c><02:27:30.200><c> this</c><02:27:30.560><c> but</c>

02:27:31.210 --> 02:27:31.220 align:start position:0%
there's many ways of doing this but
 

02:27:31.220 --> 02:27:33.040 align:start position:0%
there's many ways of doing this but
let's<02:27:31.460><c> check</c><02:27:31.729><c> it</c><02:27:31.939><c> so</c><02:27:32.270><c> right</c><02:27:32.450><c> now</c><02:27:32.689><c> we</c><02:27:32.750><c> have</c><02:27:33.020><c> our</c>

02:27:33.040 --> 02:27:33.050 align:start position:0%
let's check it so right now we have our
 

02:27:33.050 --> 02:27:35.260 align:start position:0%
let's check it so right now we have our
lookup<02:27:33.470><c> profile</c><02:27:33.950><c> we're</c><02:27:34.430><c> passing</c><02:27:34.760><c> a</c><02:27:34.790><c> Maki</c><02:27:35.090><c> row</c>

02:27:35.260 --> 02:27:35.270 align:start position:0%
lookup profile we're passing a Maki row
 

02:27:35.270 --> 02:27:36.700 align:start position:0%
lookup profile we're passing a Maki row
and<02:27:35.390><c> we're</c><02:27:35.479><c> trying</c><02:27:35.689><c> to</c><02:27:35.750><c> find</c><02:27:35.930><c> the</c><02:27:36.140><c> likes</c><02:27:36.380><c> and</c>

02:27:36.700 --> 02:27:36.710 align:start position:0%
and we're trying to find the likes and
 

02:27:36.710 --> 02:27:39.840 align:start position:0%
and we're trying to find the likes and
we're<02:27:37.220><c> constantly</c><02:27:37.489><c> logging</c><02:27:38.479><c> the</c><02:27:38.600><c> data</c><02:27:38.840><c> and</c>

02:27:39.840 --> 02:27:39.850 align:start position:0%
we're constantly logging the data and
 

02:27:39.850 --> 02:27:43.630 align:start position:0%
we're constantly logging the data and
pizza<02:27:40.850><c> coding</c><02:27:41.450><c> brownie</c><02:27:42.020><c> points</c><02:27:42.500><c> so</c><02:27:43.310><c> what</c><02:27:43.520><c> if</c>

02:27:43.630 --> 02:27:43.640 align:start position:0%
pizza coding brownie points so what if
 

02:27:43.640 --> 02:27:46.090 align:start position:0%
pizza coding brownie points so what if
we<02:27:43.729><c> passed</c><02:27:44.060><c> in</c><02:27:44.330><c> something</c><02:27:44.810><c> else</c><02:27:45.020><c> if</c><02:27:45.260><c> we</c><02:27:45.739><c> passed</c>

02:27:46.090 --> 02:27:46.100 align:start position:0%
we passed in something else if we passed
 

02:27:46.100 --> 02:27:56.570 align:start position:0%
we passed in something else if we passed
in<02:27:46.430><c> Sherlock</c><02:27:47.270><c> a</c><02:27:48.580><c> pass</c><02:27:49.580><c> in</c><02:27:49.880><c> last</c><02:27:50.300><c> name</c>

02:27:56.570 --> 02:27:56.580 align:start position:0%
 
 

02:27:56.580 --> 02:27:59.030 align:start position:0%
 
contact<02:27:57.090><c> well</c><02:27:57.570><c> that's</c><02:27:57.840><c> working</c><02:27:58.050><c> because</c><02:27:58.680><c> I</c>

02:27:59.030 --> 02:27:59.040 align:start position:0%
contact well that's working because I
 

02:27:59.040 --> 02:28:03.380 align:start position:0%
contact well that's working because I
spelled<02:27:59.550><c> Sherlock</c><02:28:00.180><c> wrong</c><02:28:00.480><c> this</c><02:28:01.170><c> is</c><02:28:01.410><c> e</c><02:28:02.150><c> so</c><02:28:03.150><c> it's</c>

02:28:03.380 --> 02:28:03.390 align:start position:0%
spelled Sherlock wrong this is e so it's
 

02:28:03.390 --> 02:28:04.960 align:start position:0%
spelled Sherlock wrong this is e so it's
good<02:28:03.600><c> the</c><02:28:03.690><c> way</c><02:28:03.811><c> a</c><02:28:04.050><c> good</c><02:28:04.290><c> way</c><02:28:04.410><c> to</c><02:28:04.470><c> test</c><02:28:04.740><c> that</c>

02:28:04.960 --> 02:28:04.970 align:start position:0%
good the way a good way to test that
 

02:28:04.970 --> 02:28:08.450 align:start position:0%
good the way a good way to test that
Holmes<02:28:05.970><c> and</c><02:28:06.420><c> the</c><02:28:07.410><c> last</c><02:28:07.650><c> thing</c><02:28:07.830><c> we'll</c><02:28:07.950><c> check</c><02:28:08.220><c> is</c>

02:28:08.450 --> 02:28:08.460 align:start position:0%
Holmes and the last thing we'll check is
 

02:28:08.460 --> 02:28:10.400 align:start position:0%
Holmes and the last thing we'll check is
if<02:28:08.640><c> we</c><02:28:08.790><c> pass</c><02:28:09.061><c> in</c><02:28:09.210><c> a</c><02:28:09.271><c> property</c><02:28:09.840><c> that</c><02:28:09.960><c> does</c><02:28:10.260><c> not</c>

02:28:10.400 --> 02:28:10.410 align:start position:0%
if we pass in a property that does not
 

02:28:10.410 --> 02:28:15.020 align:start position:0%
if we pass in a property that does not
exist<02:28:11.090><c> I'll</c><02:28:12.090><c> just</c><02:28:12.390><c> say</c><02:28:12.630><c> hello</c><02:28:13.140><c> and</c><02:28:13.730><c> no</c><02:28:14.730><c> such</c>

02:28:15.020 --> 02:28:15.030 align:start position:0%
exist I'll just say hello and no such
 

02:28:15.030 --> 02:28:20.860 align:start position:0%
exist I'll just say hello and no such
property<02:28:15.540><c> so</c><02:28:16.230><c> our</c><02:28:16.561><c> function</c><02:28:16.920><c> works</c>

02:28:20.860 --> 02:28:20.870 align:start position:0%
 
 

02:28:20.870 --> 02:28:23.830 align:start position:0%
 
there<02:28:21.740><c> is</c><02:28:21.890><c> a</c><02:28:21.920><c> simple</c><02:28:22.311><c> way</c><02:28:22.610><c> to</c><02:28:22.640><c> create</c><02:28:23.150><c> a</c><02:28:23.480><c> random</c>

02:28:23.830 --> 02:28:23.840 align:start position:0%
there is a simple way to create a random
 

02:28:23.840 --> 02:28:26.710 align:start position:0%
there is a simple way to create a random
decimal<02:28:24.620><c> number</c><02:28:24.980><c> in</c><02:28:25.190><c> JavaScript</c><02:28:25.910><c> it's</c><02:28:26.420><c> with</c>

02:28:26.710 --> 02:28:26.720 align:start position:0%
decimal number in JavaScript it's with
 

02:28:26.720 --> 02:28:30.551 align:start position:0%
decimal number in JavaScript it's with
the<02:28:26.930><c> math</c><02:28:27.230><c> dot</c><02:28:27.590><c> random</c><02:28:27.880><c> function</c><02:28:28.880><c> so</c><02:28:29.720><c> we</c><02:28:30.351><c> have</c>

02:28:30.551 --> 02:28:30.561 align:start position:0%
the math dot random function so we have
 

02:28:30.561 --> 02:28:32.650 align:start position:0%
the math dot random function so we have
this<02:28:30.710><c> function</c><02:28:31.040><c> here</c><02:28:31.311><c> which</c><02:28:31.970><c> is</c><02:28:32.180><c> says</c><02:28:32.330><c> random</c>

02:28:32.650 --> 02:28:32.660 align:start position:0%
this function here which is says random
 

02:28:32.660 --> 02:28:34.841 align:start position:0%
this function here which is says random
function<02:28:33.080><c> and</c><02:28:33.260><c> it's</c><02:28:33.771><c> returning</c><02:28:33.950><c> zero</c>

02:28:34.841 --> 02:28:34.851 align:start position:0%
function and it's returning zero
 

02:28:34.851 --> 02:28:37.570 align:start position:0%
function and it's returning zero
currently<02:28:35.601><c> but</c><02:28:36.230><c> we're</c><02:28:36.410><c> gonna</c><02:28:36.561><c> use</c><02:28:36.890><c> the</c><02:28:37.160><c> math</c>

02:28:37.570 --> 02:28:37.580 align:start position:0%
currently but we're gonna use the math
 

02:28:37.580 --> 02:28:41.830 align:start position:0%
currently but we're gonna use the math
dot<02:28:38.120><c> random</c><02:28:38.260><c> function</c><02:28:39.260><c> and</c><02:28:40.420><c> you</c><02:28:41.420><c> will</c><02:28:41.570><c> see</c>

02:28:41.830 --> 02:28:41.840 align:start position:0%
dot random function and you will see
 

02:28:41.840 --> 02:28:44.500 align:start position:0%
dot random function and you will see
that<02:28:42.110><c> when</c><02:28:42.351><c> I</c><02:28:42.380><c> run</c><02:28:42.890><c> this</c><02:28:43.160><c> we</c><02:28:43.760><c> have</c><02:28:43.970><c> zero</c><02:28:44.271><c> point</c>

02:28:44.500 --> 02:28:44.510 align:start position:0%
that when I run this we have zero point
 

02:28:44.510 --> 02:28:46.330 align:start position:0%
that when I run this we have zero point
two<02:28:44.720><c> three</c><02:28:44.870><c> eight</c><02:28:45.050><c> one</c><02:28:45.080><c> three</c><02:28:45.530><c> seven</c><02:28:45.860><c> four</c><02:28:46.311><c> one</c>

02:28:46.330 --> 02:28:46.340 align:start position:0%
two three eight one three seven four one
 

02:28:46.340 --> 02:28:48.341 align:start position:0%
two three eight one three seven four one
and<02:28:46.730><c> so</c><02:28:46.910><c> on</c><02:28:47.061><c> so</c><02:28:47.601><c> it's</c><02:28:47.811><c> always</c><02:28:48.050><c> going</c><02:28:48.170><c> to</c><02:28:48.260><c> be</c><02:28:48.320><c> a</c>

02:28:48.341 --> 02:28:48.351 align:start position:0%
and so on so it's always going to be a
 

02:28:48.351 --> 02:28:50.350 align:start position:0%
and so on so it's always going to be a
number<02:28:48.530><c> between</c><02:28:48.830><c> zero</c><02:28:49.460><c> and</c><02:28:49.521><c> it</c><02:28:49.700><c> could</c><02:28:49.940><c> be</c><02:28:50.061><c> zero</c>

02:28:50.350 --> 02:28:50.360 align:start position:0%
number between zero and it could be zero
 

02:28:50.360 --> 02:28:52.480 align:start position:0%
number between zero and it could be zero
between<02:28:50.870><c> zero</c><02:28:51.290><c> and</c><02:28:51.320><c> one</c><02:28:51.620><c> but</c><02:28:51.650><c> it</c><02:28:52.010><c> could</c><02:28:52.250><c> not</c><02:28:52.430><c> be</c>

02:28:52.480 --> 02:28:52.490 align:start position:0%
between zero and one but it could not be
 

02:28:52.490 --> 02:28:56.739 align:start position:0%
between zero and one but it could not be
one

02:28:56.739 --> 02:28:56.749 align:start position:0%
 
 

02:28:56.749 --> 02:28:59.179 align:start position:0%
 
often<02:28:57.749><c> you</c><02:28:57.899><c> want</c><02:28:58.109><c> a</c><02:28:58.199><c> random</c><02:28:58.680><c> hole</c><02:28:58.949><c> number</c>

02:28:59.179 --> 02:28:59.189 align:start position:0%
often you want a random hole number
 

02:28:59.189 --> 02:29:02.449 align:start position:0%
often you want a random hole number
instead<02:28:59.699><c> of</c><02:28:59.819><c> a</c><02:28:59.999><c> random</c><02:29:00.300><c> decimal</c><02:29:01.140><c> number</c><02:29:01.560><c> that</c>

02:29:02.449 --> 02:29:02.459 align:start position:0%
instead of a random decimal number that
 

02:29:02.459 --> 02:29:04.909 align:start position:0%
instead of a random decimal number that
can<02:29:02.699><c> be</c><02:29:02.789><c> accomplished</c><02:29:03.390><c> with</c><02:29:03.659><c> math</c><02:29:04.079><c> dot</c><02:29:04.439><c> floor</c>

02:29:04.909 --> 02:29:04.919 align:start position:0%
can be accomplished with math dot floor
 

02:29:04.919 --> 02:29:07.969 align:start position:0%
can be accomplished with math dot floor
we<02:29:05.550><c> have</c><02:29:05.699><c> mat</c><02:29:05.939><c> that</c><02:29:06.119><c> floor</c><02:29:06.449><c> here</c><02:29:06.779><c> this</c><02:29:07.260><c> rounds</c>

02:29:07.969 --> 02:29:07.979 align:start position:0%
we have mat that floor here this rounds
 

02:29:07.979 --> 02:29:10.819 align:start position:0%
we have mat that floor here this rounds
down<02:29:08.220><c> to</c><02:29:08.579><c> the</c><02:29:08.699><c> nearest</c><02:29:08.819><c> whole</c><02:29:09.300><c> number</c><02:29:09.359><c> so</c><02:29:10.319><c> we</c>

02:29:10.819 --> 02:29:10.829 align:start position:0%
down to the nearest whole number so we
 

02:29:10.829 --> 02:29:15.439 align:start position:0%
down to the nearest whole number so we
pass<02:29:11.249><c> in</c><02:29:11.810><c> math</c><02:29:12.810><c> dot</c><02:29:13.169><c> random</c><02:29:13.550><c> times</c><02:29:14.550><c> 20</c><02:29:15.239><c> and</c>

02:29:15.439 --> 02:29:15.449 align:start position:0%
pass in math dot random times 20 and
 

02:29:15.449 --> 02:29:17.869 align:start position:0%
pass in math dot random times 20 and
then<02:29:16.050><c> we</c><02:29:16.140><c> round</c><02:29:16.470><c> down</c><02:29:16.739><c> to</c><02:29:17.100><c> the</c><02:29:17.279><c> nearest</c><02:29:17.430><c> whole</c>

02:29:17.869 --> 02:29:17.879 align:start position:0%
then we round down to the nearest whole
 

02:29:17.879 --> 02:29:20.599 align:start position:0%
then we round down to the nearest whole
number<02:29:17.959><c> this</c><02:29:18.959><c> is</c><02:29:19.199><c> going</c><02:29:19.470><c> to</c><02:29:19.590><c> create</c><02:29:19.829><c> a</c><02:29:20.129><c> random</c>

02:29:20.599 --> 02:29:20.609 align:start position:0%
number this is going to create a random
 

02:29:20.609 --> 02:29:24.559 align:start position:0%
number this is going to create a random
whole<02:29:21.180><c> number</c><02:29:21.600><c> between</c><02:29:21.930><c> 0</c><02:29:22.560><c> and</c><02:29:22.649><c> 19</c><02:29:23.569><c> remember</c>

02:29:24.559 --> 02:29:24.569 align:start position:0%
whole number between 0 and 19 remember
 

02:29:24.569 --> 02:29:27.979 align:start position:0%
whole number between 0 and 19 remember
math<02:29:24.840><c> dot</c><02:29:25.109><c> random</c><02:29:25.220><c> can</c><02:29:26.220><c> never</c><02:29:26.459><c> be</c><02:29:26.699><c> 1</c><02:29:27.029><c> it</c><02:29:27.419><c> can</c><02:29:27.930><c> be</c>

02:29:27.979 --> 02:29:27.989 align:start position:0%
math dot random can never be 1 it can be
 

02:29:27.989 --> 02:29:31.219 align:start position:0%
math dot random can never be 1 it can be
0<02:29:28.529><c> but</c><02:29:29.069><c> it</c><02:29:29.189><c> can</c><02:29:29.340><c> never</c><02:29:29.459><c> be</c><02:29:29.729><c> quite</c><02:29:30.029><c> 1</c><02:29:30.419><c> so</c><02:29:30.899><c> when</c><02:29:31.050><c> we</c>

02:29:31.219 --> 02:29:31.229 align:start position:0%
0 but it can never be quite 1 so when we
 

02:29:31.229 --> 02:29:35.000 align:start position:0%
0 but it can never be quite 1 so when we
multiply<02:29:31.499><c> it</c><02:29:32.010><c> by</c><02:29:32.399><c> 20</c><02:29:32.899><c> we</c><02:29:33.899><c> are</c><02:29:34.020><c> going</c><02:29:34.319><c> to</c><02:29:34.499><c> get</c><02:29:34.800><c> a</c>

02:29:35.000 --> 02:29:35.010 align:start position:0%
multiply it by 20 we are going to get a
 

02:29:35.010 --> 02:29:38.569 align:start position:0%
multiply it by 20 we are going to get a
number<02:29:35.909><c> between</c><02:29:36.209><c> 0</c><02:29:36.479><c> and</c><02:29:37.409><c> 20</c><02:29:38.159><c> but</c><02:29:38.340><c> not</c>

02:29:38.569 --> 02:29:38.579 align:start position:0%
number between 0 and 20 but not
 

02:29:38.579 --> 02:29:41.540 align:start position:0%
number between 0 and 20 but not
including<02:29:39.149><c> 20</c><02:29:39.600><c> then</c><02:29:40.140><c> we</c><02:29:40.260><c> round</c><02:29:40.560><c> down</c><02:29:40.709><c> which</c>

02:29:41.540 --> 02:29:41.550 align:start position:0%
including 20 then we round down which
 

02:29:41.550 --> 02:29:45.050 align:start position:0%
including 20 then we round down which
will<02:29:41.760><c> end</c><02:29:41.970><c> up</c><02:29:42.119><c> being</c><02:29:42.390><c> 0</c><02:29:42.930><c> to</c><02:29:43.079><c> 19</c><02:29:43.709><c> so</c><02:29:44.579><c> let</c><02:29:44.789><c> me</c><02:29:44.909><c> show</c>

02:29:45.050 --> 02:29:45.060 align:start position:0%
will end up being 0 to 19 so let me show
 

02:29:45.060 --> 02:29:46.760 align:start position:0%
will end up being 0 to 19 so let me show
you<02:29:45.119><c> another</c><02:29:45.300><c> example</c><02:29:45.479><c> where</c><02:29:46.199><c> we're</c><02:29:46.379><c> going</c><02:29:46.680><c> to</c>

02:29:46.760 --> 02:29:46.770 align:start position:0%
you another example where we're going to
 

02:29:46.770 --> 02:29:49.580 align:start position:0%
you another example where we're going to
get<02:29:46.949><c> a</c><02:29:47.129><c> random</c><02:29:47.459><c> whole</c><02:29:47.909><c> number</c><02:29:48.270><c> between</c><02:29:48.479><c> 0</c><02:29:49.109><c> &amp;</c><02:29:49.289><c> 9</c>

02:29:49.580 --> 02:29:49.590 align:start position:0%
get a random whole number between 0 &amp; 9
 

02:29:49.590 --> 02:29:52.760 align:start position:0%
get a random whole number between 0 &amp; 9
it<02:29:50.249><c> looks</c><02:29:50.909><c> just</c><02:29:51.060><c> like</c><02:29:51.180><c> this</c><02:29:51.569><c> so</c><02:29:52.109><c> we're</c><02:29:52.649><c> going</c>

02:29:52.760 --> 02:29:52.770 align:start position:0%
it looks just like this so we're going
 

02:29:52.770 --> 02:29:55.519 align:start position:0%
it looks just like this so we're going
to<02:29:52.949><c> modify</c><02:29:53.249><c> this</c><02:29:53.609><c> function</c><02:29:54.149><c> so</c><02:29:54.329><c> this</c><02:29:54.959><c> math</c><02:29:55.260><c> dot</c>

02:29:55.519 --> 02:29:55.529 align:start position:0%
to modify this function so this math dot
 

02:29:55.529 --> 02:29:57.849 align:start position:0%
to modify this function so this math dot
random<02:29:55.579><c> we're</c><02:29:56.579><c> going</c><02:29:56.789><c> to</c><02:29:56.909><c> pass</c><02:29:57.239><c> that</c><02:29:57.510><c> into</c>

02:29:57.849 --> 02:29:57.859 align:start position:0%
random we're going to pass that into
 

02:29:57.859 --> 02:30:01.819 align:start position:0%
random we're going to pass that into
math.floor<02:30:00.199><c> so</c><02:30:01.199><c> I</c><02:30:01.229><c> have</c><02:30:01.379><c> to</c><02:30:01.499><c> put</c><02:30:01.709><c> the</c>

02:30:01.819 --> 02:30:01.829 align:start position:0%
math.floor so I have to put the
 

02:30:01.829 --> 02:30:03.559 align:start position:0%
math.floor so I have to put the
parentheses<02:30:02.430><c> because</c><02:30:02.699><c> we're</c><02:30:02.789><c> passing</c><02:30:03.300><c> it</c><02:30:03.390><c> in</c>

02:30:03.559 --> 02:30:03.569 align:start position:0%
parentheses because we're passing it in
 

02:30:03.569 --> 02:30:06.229 align:start position:0%
parentheses because we're passing it in
to<02:30:03.930><c> that</c><02:30:04.109><c> function</c><02:30:04.409><c> and</c><02:30:04.890><c> it's</c><02:30:05.640><c> math</c><02:30:05.909><c> dot</c>

02:30:06.229 --> 02:30:06.239 align:start position:0%
to that function and it's math dot
 

02:30:06.239 --> 02:30:10.309 align:start position:0%
to that function and it's math dot
random<02:30:06.890><c> times</c><02:30:08.090><c> 10</c><02:30:09.090><c> and</c><02:30:09.449><c> that's</c><02:30:09.869><c> going</c><02:30:10.109><c> to</c><02:30:10.169><c> give</c>

02:30:10.309 --> 02:30:10.319 align:start position:0%
random times 10 and that's going to give
 

02:30:10.319 --> 02:30:13.819 align:start position:0%
random times 10 and that's going to give
us<02:30:10.350><c> a</c><02:30:10.590><c> random</c><02:30:10.829><c> number</c><02:30:11.340><c> between</c><02:30:11.520><c> 0</c><02:30:12.149><c> &amp;</c><02:30:12.419><c> 9</c><02:30:12.479><c> so</c><02:30:13.050><c> if</c><02:30:13.709><c> I</c>

02:30:13.819 --> 02:30:13.829 align:start position:0%
us a random number between 0 &amp; 9 so if I
 

02:30:13.829 --> 02:30:18.380 align:start position:0%
us a random number between 0 &amp; 9 so if I
reload<02:30:14.220><c> this</c><02:30:14.489><c> you</c><02:30:14.609><c> can</c><02:30:14.760><c> see</c><02:30:14.909><c> 9</c><02:30:15.209><c> 5</c><02:30:16.100><c> 4</c><02:30:17.100><c> 1</c><02:30:17.489><c> every</c>

02:30:18.380 --> 02:30:18.390 align:start position:0%
reload this you can see 9 5 4 1 every
 

02:30:18.390 --> 02:30:20.000 align:start position:0%
reload this you can see 9 5 4 1 every
time<02:30:18.539><c> I</c><02:30:18.659><c> load</c><02:30:18.840><c> it</c><02:30:19.020><c> it's</c><02:30:19.199><c> a</c><02:30:19.350><c> different</c><02:30:19.649><c> random</c>

02:30:20.000 --> 02:30:20.010 align:start position:0%
time I load it it's a different random
 

02:30:20.010 --> 02:30:24.210 align:start position:0%
time I load it it's a different random
number

02:30:24.210 --> 02:30:24.220 align:start position:0%
 
 

02:30:24.220 --> 02:30:26.700 align:start position:0%
 
you<02:30:25.120><c> can</c><02:30:25.300><c> also</c><02:30:25.479><c> generate</c><02:30:25.989><c> random</c><02:30:26.290><c> whole</c>

02:30:26.700 --> 02:30:26.710 align:start position:0%
you can also generate random whole
 

02:30:26.710 --> 02:30:29.070 align:start position:0%
you can also generate random whole
numbers<02:30:27.100><c> within</c><02:30:27.460><c> a</c><02:30:27.670><c> range</c><02:30:27.910><c> so</c><02:30:28.300><c> look</c><02:30:28.840><c> at</c><02:30:28.960><c> this</c>

02:30:29.070 --> 02:30:29.080 align:start position:0%
numbers within a range so look at this
 

02:30:29.080 --> 02:30:31.559 align:start position:0%
numbers within a range so look at this
function<02:30:29.439><c> here</c><02:30:29.560><c> our</c><02:30:29.950><c> random</c><02:30:30.460><c> range</c><02:30:30.700><c> it</c><02:30:31.029><c> takes</c>

02:30:31.559 --> 02:30:31.569 align:start position:0%
function here our random range it takes
 

02:30:31.569 --> 02:30:34.019 align:start position:0%
function here our random range it takes
a<02:30:31.720><c> minimum</c><02:30:32.080><c> number</c><02:30:32.350><c> and</c><02:30:32.710><c> a</c><02:30:33.100><c> maximum</c><02:30:33.550><c> number</c>

02:30:34.019 --> 02:30:34.029 align:start position:0%
a minimum number and a maximum number
 

02:30:34.029 --> 02:30:36.360 align:start position:0%
a minimum number and a maximum number
and<02:30:34.239><c> then</c><02:30:34.960><c> it</c><02:30:35.229><c> just</c><02:30:35.439><c> runs</c><02:30:35.739><c> through</c><02:30:35.920><c> this</c>

02:30:36.360 --> 02:30:36.370 align:start position:0%
and then it just runs through this
 

02:30:36.370 --> 02:30:39.719 align:start position:0%
and then it just runs through this
calculation<02:30:36.700><c> here</c><02:30:37.600><c> so</c><02:30:38.410><c> we</c><02:30:38.890><c> have</c><02:30:39.100><c> the</c><02:30:39.220><c> math</c><02:30:39.430><c> dot</c>

02:30:39.719 --> 02:30:39.729 align:start position:0%
calculation here so we have the math dot
 

02:30:39.729 --> 02:30:42.300 align:start position:0%
calculation here so we have the math dot
random<02:30:39.760><c> and</c><02:30:40.450><c> we</c><02:30:40.870><c> multiply</c><02:30:41.080><c> it</c><02:30:41.380><c> by</c><02:30:41.560><c> the</c><02:30:41.710><c> max</c>

02:30:42.300 --> 02:30:42.310 align:start position:0%
random and we multiply it by the max
 

02:30:42.310 --> 02:30:44.309 align:start position:0%
random and we multiply it by the max
number<02:30:42.520><c> minus</c><02:30:42.880><c> the</c><02:30:42.910><c> min</c><02:30:43.149><c> number</c><02:30:43.420><c> plus</c><02:30:43.660><c> 1</c><02:30:44.020><c> and</c>

02:30:44.309 --> 02:30:44.319 align:start position:0%
number minus the min number plus 1 and
 

02:30:44.319 --> 02:30:47.790 align:start position:0%
number minus the min number plus 1 and
then<02:30:45.040><c> we</c><02:30:45.340><c> get</c><02:30:45.760><c> the</c><02:30:45.910><c> floor</c><02:30:46.270><c> which</c><02:30:46.689><c> is</c><02:30:46.800><c> rounding</c>

02:30:47.790 --> 02:30:47.800 align:start position:0%
then we get the floor which is rounding
 

02:30:47.800 --> 02:30:49.979 align:start position:0%
then we get the floor which is rounding
down<02:30:48.010><c> and</c><02:30:48.370><c> we</c><02:30:48.489><c> add</c><02:30:48.670><c> all</c><02:30:48.700><c> that</c><02:30:49.120><c> to</c><02:30:49.420><c> our</c><02:30:49.569><c> minimum</c>

02:30:49.979 --> 02:30:49.989 align:start position:0%
down and we add all that to our minimum
 

02:30:49.989 --> 02:30:53.580 align:start position:0%
down and we add all that to our minimum
number<02:30:50.319><c> so</c><02:30:51.010><c> this</c><02:30:51.340><c> is</c><02:30:51.550><c> just</c><02:30:51.760><c> a</c><02:30:52.029><c> calculation</c><02:30:52.779><c> to</c>

02:30:53.580 --> 02:30:53.590 align:start position:0%
number so this is just a calculation to
 

02:30:53.590 --> 02:30:55.679 align:start position:0%
number so this is just a calculation to
get<02:30:53.859><c> a</c><02:30:53.920><c> random</c><02:30:54.460><c> number</c><02:30:54.609><c> between</c><02:30:54.939><c> the</c><02:30:55.390><c> min</c><02:30:55.660><c> and</c>

02:30:55.679 --> 02:30:55.689 align:start position:0%
get a random number between the min and
 

02:30:55.689 --> 02:30:59.969 align:start position:0%
get a random number between the min and
Max<02:30:56.430><c> so</c><02:30:57.430><c> as</c><02:30:57.729><c> practice</c><02:30:58.540><c> I'm</c><02:30:58.779><c> going</c><02:30:59.080><c> to</c><02:30:59.290><c> rewrite</c>

02:30:59.969 --> 02:30:59.979 align:start position:0%
Max so as practice I'm going to rewrite
 

02:30:59.979 --> 02:31:02.280 align:start position:0%
Max so as practice I'm going to rewrite
it<02:31:00.220><c> down</c><02:31:00.370><c> here</c><02:31:00.520><c> so</c><02:31:01.210><c> we</c><02:31:01.390><c> have</c><02:31:01.510><c> the</c><02:31:01.630><c> random</c><02:31:01.840><c> range</c>

02:31:02.280 --> 02:31:02.290 align:start position:0%
it down here so we have the random range
 

02:31:02.290 --> 02:31:04.590 align:start position:0%
it down here so we have the random range
and<02:31:02.560><c> instead</c><02:31:03.010><c> of</c><02:31:03.100><c> our</c><02:31:03.340><c> men</c><02:31:03.609><c> and</c><02:31:03.790><c> our</c><02:31:03.880><c> max</c><02:31:04.239><c> we</c>

02:31:04.590 --> 02:31:04.600 align:start position:0%
and instead of our men and our max we
 

02:31:04.600 --> 02:31:06.750 align:start position:0%
and instead of our men and our max we
have<02:31:04.720><c> my</c><02:31:04.960><c> men</c><02:31:05.200><c> and</c><02:31:05.319><c> my</c><02:31:05.500><c> max</c><02:31:05.800><c> however</c><02:31:06.370><c> the</c>

02:31:06.750 --> 02:31:06.760 align:start position:0%
have my men and my max however the
 

02:31:06.760 --> 02:31:08.849 align:start position:0%
have my men and my max however the
equation<02:31:07.239><c> is</c><02:31:07.330><c> going</c><02:31:07.479><c> to</c><02:31:07.630><c> be</c><02:31:07.720><c> the</c><02:31:07.870><c> same</c><02:31:08.140><c> so</c><02:31:08.739><c> we</c>

02:31:08.849 --> 02:31:08.859 align:start position:0%
equation is going to be the same so we
 

02:31:08.859 --> 02:31:11.550 align:start position:0%
equation is going to be the same so we
have<02:31:08.979><c> math</c><02:31:09.279><c> dot</c><02:31:09.609><c> floor</c><02:31:10.140><c> you</c><02:31:11.140><c> can</c><02:31:11.319><c> take</c><02:31:11.529><c> a</c>

02:31:11.550 --> 02:31:11.560 align:start position:0%
have math dot floor you can take a
 

02:31:11.560 --> 02:31:13.620 align:start position:0%
have math dot floor you can take a
chance<02:31:11.680><c> to</c><02:31:12.340><c> actually</c><02:31:12.819><c> just</c><02:31:12.939><c> look</c><02:31:13.180><c> over</c><02:31:13.540><c> the</c>

02:31:13.620 --> 02:31:13.630 align:start position:0%
chance to actually just look over the
 

02:31:13.630 --> 02:31:16.110 align:start position:0%
chance to actually just look over the
equation<02:31:14.170><c> and</c><02:31:14.380><c> see</c><02:31:14.920><c> if</c><02:31:15.010><c> you</c><02:31:15.160><c> can</c><02:31:15.399><c> understand</c>

02:31:16.110 --> 02:31:16.120 align:start position:0%
equation and see if you can understand
 

02:31:16.120 --> 02:31:22.469 align:start position:0%
equation and see if you can understand
how<02:31:16.359><c> it</c><02:31:16.390><c> works</c><02:31:16.810><c> my</c><02:31:17.680><c> max</c><02:31:18.390><c> -</c><02:31:19.390><c> my</c><02:31:20.290><c> men</c><02:31:20.800><c> and</c><02:31:21.330><c> then</c><02:31:22.330><c> we</c>

02:31:22.469 --> 02:31:22.479 align:start position:0%
how it works my max - my men and then we
 

02:31:22.479 --> 02:31:26.309 align:start position:0%
how it works my max - my men and then we
just<02:31:22.720><c> have</c><02:31:22.960><c> to</c><02:31:22.989><c> do</c><02:31:23.710><c> plus</c><02:31:24.279><c> one</c><02:31:25.120><c> and</c><02:31:25.390><c> then</c><02:31:26.109><c> this</c>

02:31:26.309 --> 02:31:26.319 align:start position:0%
just have to do plus one and then this
 

02:31:26.319 --> 02:31:30.150 align:start position:0%
just have to do plus one and then this
whole<02:31:26.560><c> thing</c><02:31:26.620><c> is</c><02:31:27.250><c> going</c><02:31:27.460><c> to</c><02:31:27.550><c> be</c><02:31:27.700><c> plus</c><02:31:28.600><c> my</c><02:31:29.529><c> men</c>

02:31:30.150 --> 02:31:30.160 align:start position:0%
whole thing is going to be plus my men
 

02:31:30.160 --> 02:31:34.620 align:start position:0%
whole thing is going to be plus my men
so<02:31:31.029><c> we</c><02:31:31.420><c> already</c><02:31:31.600><c> have</c><02:31:31.899><c> this</c><02:31:32.200><c> example</c><02:31:33.300><c> test</c><02:31:34.300><c> set</c>

02:31:34.620 --> 02:31:34.630 align:start position:0%
so we already have this example test set
 

02:31:34.630 --> 02:31:36.540 align:start position:0%
so we already have this example test set
up<02:31:34.750><c> down</c><02:31:34.899><c> here</c><02:31:35.229><c> random</c><02:31:35.710><c> range</c><02:31:35.859><c> between</c><02:31:36.010><c> 5</c><02:31:36.370><c> and</c>

02:31:36.540 --> 02:31:36.550 align:start position:0%
up down here random range between 5 and
 

02:31:36.550 --> 02:31:38.910 align:start position:0%
up down here random range between 5 and
15<02:31:36.910><c> and</c><02:31:37.090><c> we're</c><02:31:37.210><c> going</c><02:31:37.330><c> to</c><02:31:37.390><c> log</c><02:31:37.660><c> it</c><02:31:37.840><c> out</c><02:31:37.930><c> here</c><02:31:38.290><c> so</c>

02:31:38.910 --> 02:31:38.920 align:start position:0%
15 and we're going to log it out here so
 

02:31:38.920 --> 02:31:42.809 align:start position:0%
15 and we're going to log it out here so
let's<02:31:39.100><c> try</c><02:31:39.250><c> that</c><02:31:39.310><c> 11</c><02:31:39.850><c> 6</c><02:31:40.710><c> 7</c><02:31:41.710><c> see</c><02:31:42.189><c> every</c><02:31:42.489><c> number</c>

02:31:42.809 --> 02:31:42.819 align:start position:0%
let's try that 11 6 7 see every number
 

02:31:42.819 --> 02:31:48.740 align:start position:0%
let's try that 11 6 7 see every number
is<02:31:42.910><c> between</c><02:31:43.180><c> 5</c><02:31:43.810><c> and</c><02:31:44.050><c> 15</c><02:31:44.439><c> whenever</c><02:31:44.800><c> I</c><02:31:44.950><c> run</c><02:31:45.189><c> it</c>

02:31:48.740 --> 02:31:48.750 align:start position:0%
 
 

02:31:48.750 --> 02:31:51.679 align:start position:0%
 
another<02:31:49.649><c> useful</c><02:31:49.920><c> function</c><02:31:50.310><c> is</c><02:31:50.790><c> the</c><02:31:51.090><c> parse</c><02:31:51.390><c> int</c>

02:31:51.679 --> 02:31:51.689 align:start position:0%
another useful function is the parse int
 

02:31:51.689 --> 02:31:54.650 align:start position:0%
another useful function is the parse int
function<02:31:52.109><c> it</c><02:31:52.710><c> takes</c><02:31:53.220><c> a</c><02:31:53.370><c> string</c><02:31:53.670><c> and</c><02:31:54.000><c> returns</c>

02:31:54.650 --> 02:31:54.660 align:start position:0%
function it takes a string and returns
 

02:31:54.660 --> 02:31:57.050 align:start position:0%
function it takes a string and returns
an<02:31:54.960><c> integer</c><02:31:55.470><c> a</c><02:31:55.920><c> lot</c><02:31:56.430><c> of</c><02:31:56.550><c> times</c><02:31:56.729><c> you</c><02:31:56.850><c> want</c><02:31:56.939><c> to</c>

02:31:57.050 --> 02:31:57.060 align:start position:0%
an integer a lot of times you want to
 

02:31:57.060 --> 02:31:58.429 align:start position:0%
an integer a lot of times you want to
make<02:31:57.210><c> sure</c><02:31:57.420><c> you're</c><02:31:57.600><c> dealing</c><02:31:57.870><c> with</c><02:31:57.960><c> integers</c>

02:31:58.429 --> 02:31:58.439 align:start position:0%
make sure you're dealing with integers
 

02:31:58.439 --> 02:32:00.110 align:start position:0%
make sure you're dealing with integers
and<02:31:58.590><c> not</c><02:31:58.739><c> strings</c><02:31:59.160><c> for</c><02:31:59.819><c> different</c>

02:32:00.110 --> 02:32:00.120 align:start position:0%
and not strings for different
 

02:32:00.120 --> 02:32:01.820 align:start position:0%
and not strings for different
calculations<02:32:00.779><c> and</c><02:32:00.960><c> things</c><02:32:01.170><c> like</c><02:32:01.319><c> that</c>

02:32:01.820 --> 02:32:01.830 align:start position:0%
calculations and things like that
 

02:32:01.830 --> 02:32:04.400 align:start position:0%
calculations and things like that
if<02:32:02.340><c> the</c><02:32:02.939><c> string</c><02:32:03.270><c> cannot</c><02:32:03.569><c> be</c><02:32:03.779><c> converted</c><02:32:04.109><c> into</c>

02:32:04.400 --> 02:32:04.410 align:start position:0%
if the string cannot be converted into
 

02:32:04.410 --> 02:32:07.760 align:start position:0%
if the string cannot be converted into
an<02:32:04.590><c> integer</c><02:32:04.859><c> it</c><02:32:05.279><c> returns</c><02:32:05.729><c> in</c><02:32:05.970><c> a</c><02:32:06.390><c> in</c><02:32:06.689><c> for</c><02:32:07.200><c> not</c><02:32:07.470><c> a</c>

02:32:07.760 --> 02:32:07.770 align:start position:0%
an integer it returns in a in for not a
 

02:32:07.770 --> 02:32:10.010 align:start position:0%
an integer it returns in a in for not a
number<02:32:08.220><c> so</c><02:32:08.640><c> let</c><02:32:08.760><c> me</c><02:32:08.850><c> show</c><02:32:09.000><c> you</c><02:32:09.029><c> how</c><02:32:09.330><c> it</c><02:32:09.479><c> works</c>

02:32:10.010 --> 02:32:10.020 align:start position:0%
number so let me show you how it works
 

02:32:10.020 --> 02:32:13.099 align:start position:0%
number so let me show you how it works
from<02:32:10.500><c> this</c><02:32:10.649><c> convert</c><02:32:11.189><c> to</c><02:32:11.550><c> integer</c><02:32:12.029><c> function</c><02:32:12.689><c> we</c>

02:32:13.099 --> 02:32:13.109 align:start position:0%
from this convert to integer function we
 

02:32:13.109 --> 02:32:15.769 align:start position:0%
from this convert to integer function we
are<02:32:13.140><c> going</c><02:32:13.260><c> to</c><02:32:13.590><c> return</c><02:32:14.390><c> and</c><02:32:15.390><c> we're</c><02:32:15.540><c> going</c><02:32:15.720><c> to</c>

02:32:15.769 --> 02:32:15.779 align:start position:0%
are going to return and we're going to
 

02:32:15.779 --> 02:32:18.110 align:start position:0%
are going to return and we're going to
return<02:32:16.200><c> the</c><02:32:16.260><c> string</c><02:32:16.859><c> except</c><02:32:17.760><c> we're</c><02:32:17.910><c> going</c><02:32:18.060><c> to</c>

02:32:18.110 --> 02:32:18.120 align:start position:0%
return the string except we're going to
 

02:32:18.120 --> 02:32:20.120 align:start position:0%
return the string except we're going to
convert<02:32:18.420><c> it</c><02:32:18.540><c> into</c><02:32:18.660><c> an</c><02:32:18.840><c> integer</c><02:32:19.050><c> first</c><02:32:19.590><c> so</c>

02:32:20.120 --> 02:32:20.130 align:start position:0%
convert it into an integer first so
 

02:32:20.130 --> 02:32:24.440 align:start position:0%
convert it into an integer first so
we'll<02:32:20.310><c> do</c><02:32:20.489><c> parse</c><02:32:21.470><c> int</c><02:32:22.470><c> and</c><02:32:22.859><c> then</c><02:32:23.729><c> I'll</c><02:32:23.819><c> pass</c><02:32:24.120><c> in</c>

02:32:24.440 --> 02:32:24.450 align:start position:0%
we'll do parse int and then I'll pass in
 

02:32:24.450 --> 02:32:28.550 align:start position:0%
we'll do parse int and then I'll pass in
the<02:32:24.840><c> string</c><02:32:25.229><c> now</c><02:32:26.189><c> it</c><02:32:26.640><c> was</c><02:32:26.970><c> a</c><02:32:27.270><c> string</c><02:32:27.779><c> because</c>

02:32:28.550 --> 02:32:28.560 align:start position:0%
the string now it was a string because
 

02:32:28.560 --> 02:32:30.139 align:start position:0%
the string now it was a string because
you<02:32:28.800><c> can</c><02:32:28.950><c> see</c><02:32:29.130><c> here</c><02:32:29.340><c> we're</c><02:32:29.520><c> passing</c><02:32:29.939><c> in</c><02:32:30.029><c> the</c>

02:32:30.139 --> 02:32:30.149 align:start position:0%
you can see here we're passing in the
 

02:32:30.149 --> 02:32:32.389 align:start position:0%
you can see here we're passing in the
string<02:32:30.540><c> of</c><02:32:30.810><c> the</c><02:32:31.080><c> 56</c><02:32:31.620><c> but</c><02:32:32.040><c> it's</c><02:32:32.160><c> going</c><02:32:32.340><c> to</c>

02:32:32.389 --> 02:32:32.399 align:start position:0%
string of the 56 but it's going to
 

02:32:32.399 --> 02:32:38.989 align:start position:0%
string of the 56 but it's going to
return<02:32:32.850><c> it</c><02:32:33.029><c> as</c><02:32:33.180><c> a</c><02:32:33.569><c> number</c><02:32:34.109><c> and</c><02:32:34.260><c> integer</c>

02:32:38.989 --> 02:32:38.999 align:start position:0%
 
 

02:32:38.999 --> 02:32:41.330 align:start position:0%
 
the<02:32:39.329><c> person</c><02:32:39.840><c> function</c><02:32:40.350><c> can</c><02:32:40.590><c> also</c><02:32:40.680><c> be</c><02:32:40.890><c> used</c>

02:32:41.330 --> 02:32:41.340 align:start position:0%
the person function can also be used
 

02:32:41.340 --> 02:32:44.540 align:start position:0%
the person function can also be used
with<02:32:41.579><c> a</c><02:32:41.819><c> radix</c><02:32:42.329><c> the</c><02:32:43.109><c> radix</c><02:32:43.619><c> specifies</c><02:32:44.249><c> the</c>

02:32:44.540 --> 02:32:44.550 align:start position:0%
with a radix the radix specifies the
 

02:32:44.550 --> 02:32:47.359 align:start position:0%
with a radix the radix specifies the
base<02:32:44.789><c> of</c><02:32:45.090><c> the</c><02:32:45.329><c> number</c><02:32:45.689><c> in</c><02:32:45.899><c> the</c><02:32:46.170><c> string</c><02:32:46.529><c> such</c><02:32:47.189><c> as</c>

02:32:47.359 --> 02:32:47.369 align:start position:0%
base of the number in the string such as
 

02:32:47.369 --> 02:32:51.380 align:start position:0%
base of the number in the string such as
base<02:32:47.670><c> 2</c><02:32:47.999><c> or</c><02:32:48.329><c> base</c><02:32:48.930><c> 7</c><02:32:49.649><c> or</c><02:32:49.770><c> base</c><02:32:49.949><c> 8</c><02:32:50.220><c> a</c><02:32:50.640><c> base</c><02:32:51.119><c> 2</c>

02:32:51.380 --> 02:32:51.390 align:start position:0%
base 2 or base 7 or base 8 a base 2
 

02:32:51.390 --> 02:32:53.359 align:start position:0%
base 2 or base 7 or base 8 a base 2
would<02:32:51.600><c> be</c><02:32:51.630><c> binary</c><02:32:52.140><c> so</c><02:32:52.770><c> that's</c><02:32:53.010><c> one</c><02:32:53.220><c> of</c><02:32:53.249><c> the</c>

02:32:53.359 --> 02:32:53.369 align:start position:0%
would be binary so that's one of the
 

02:32:53.369 --> 02:32:55.729 align:start position:0%
would be binary so that's one of the
most<02:32:53.520><c> common</c><02:32:53.999><c> ones</c><02:32:54.149><c> to</c><02:32:54.420><c> use</c><02:32:54.689><c> now</c><02:32:55.350><c> the</c><02:32:55.409><c> default</c>

02:32:55.729 --> 02:32:55.739 align:start position:0%
most common ones to use now the default
 

02:32:55.739 --> 02:32:57.199 align:start position:0%
most common ones to use now the default
is<02:32:56.130><c> base</c><02:32:56.520><c> 10</c>

02:32:57.199 --> 02:32:57.209 align:start position:0%
is base 10
 

02:32:57.209 --> 02:32:59.540 align:start position:0%
is base 10
that's<02:32:57.569><c> what</c><02:32:57.869><c> we</c><02:32:58.050><c> use</c><02:32:58.350><c> normally</c><02:32:59.159><c> every</c><02:32:59.340><c> day</c>

02:32:59.540 --> 02:32:59.550 align:start position:0%
that's what we use normally every day
 

02:32:59.550 --> 02:33:01.250 align:start position:0%
that's what we use normally every day
but<02:32:59.999><c> let</c><02:33:00.180><c> me</c><02:33:00.300><c> show</c><02:33:00.510><c> you</c><02:33:00.569><c> how</c><02:33:00.840><c> that</c><02:33:00.899><c> would</c><02:33:01.199><c> work</c>

02:33:01.250 --> 02:33:01.260 align:start position:0%
but let me show you how that would work
 

02:33:01.260 --> 02:33:04.040 align:start position:0%
but let me show you how that would work
we're<02:33:02.189><c> gonna</c><02:33:02.399><c> convert</c><02:33:02.850><c> this</c><02:33:03.119><c> number</c><02:33:03.600><c> which</c><02:33:03.869><c> is</c>

02:33:04.040 --> 02:33:04.050 align:start position:0%
we're gonna convert this number which is
 

02:33:04.050 --> 02:33:07.429 align:start position:0%
we're gonna convert this number which is
a<02:33:04.079><c> binary</c><02:33:04.560><c> number</c><02:33:04.979><c> to</c><02:33:05.789><c> an</c><02:33:05.939><c> integer</c><02:33:06.119><c> so</c><02:33:06.810><c> we'll</c>

02:33:07.429 --> 02:33:07.439 align:start position:0%
a binary number to an integer so we'll
 

02:33:07.439 --> 02:33:12.410 align:start position:0%
a binary number to an integer so we'll
do<02:33:07.619><c> return</c><02:33:08.159><c> and</c><02:33:09.289><c> I</c><02:33:10.289><c> will</c><02:33:10.529><c> do</c><02:33:11.010><c> the</c><02:33:11.189><c> parse</c><02:33:11.550><c> and</c>

02:33:12.410 --> 02:33:12.420 align:start position:0%
do return and I will do the parse and
 

02:33:12.420 --> 02:33:16.370 align:start position:0%
do return and I will do the parse and
I'll<02:33:13.079><c> pass</c><02:33:13.800><c> in</c><02:33:14.130><c> this</c><02:33:14.850><c> string</c><02:33:15.239><c> as</c><02:33:15.420><c> before</c><02:33:15.869><c> but</c>

02:33:16.370 --> 02:33:16.380 align:start position:0%
I'll pass in this string as before but
 

02:33:16.380 --> 02:33:18.080 align:start position:0%
I'll pass in this string as before but
now<02:33:16.439><c> we'll</c><02:33:16.709><c> have</c><02:33:16.800><c> a</c><02:33:16.920><c> second</c><02:33:17.430><c> argument</c><02:33:17.640><c> after</c>

02:33:18.080 --> 02:33:18.090 align:start position:0%
now we'll have a second argument after
 

02:33:18.090 --> 02:33:20.449 align:start position:0%
now we'll have a second argument after
the<02:33:18.329><c> comma</c><02:33:18.659><c> which</c><02:33:19.499><c> is</c><02:33:19.770><c> going</c><02:33:20.039><c> to</c><02:33:20.100><c> be</c><02:33:20.279><c> the</c>

02:33:20.449 --> 02:33:20.459 align:start position:0%
the comma which is going to be the
 

02:33:20.459 --> 02:33:22.819 align:start position:0%
the comma which is going to be the
number<02:33:20.760><c> 2</c><02:33:21.060><c> so</c><02:33:21.840><c> and</c><02:33:21.959><c> so</c><02:33:22.079><c> the</c><02:33:22.229><c> default</c><02:33:22.380><c> of</c><02:33:22.649><c> base</c>

02:33:22.819 --> 02:33:22.829 align:start position:0%
number 2 so and so the default of base
 

02:33:22.829 --> 02:33:26.120 align:start position:0%
number 2 so and so the default of base
10<02:33:23.220><c> will</c><02:33:23.609><c> be</c><02:33:23.789><c> passing</c><02:33:24.479><c> it</c><02:33:24.689><c> as</c><02:33:24.840><c> base</c><02:33:25.079><c> 2</c><02:33:25.409><c> so</c><02:33:25.680><c> the</c>

02:33:26.120 --> 02:33:26.130 align:start position:0%
10 will be passing it as base 2 so the
 

02:33:26.130 --> 02:33:27.769 align:start position:0%
10 will be passing it as base 2 so the
computer<02:33:26.550><c> knows</c><02:33:26.579><c> that</c><02:33:26.999><c> this</c><02:33:27.180><c> is</c><02:33:27.390><c> a</c><02:33:27.420><c> binary</c>

02:33:27.769 --> 02:33:27.779 align:start position:0%
computer knows that this is a binary
 

02:33:27.779 --> 02:33:32.381 align:start position:0%
computer knows that this is a binary
number

02:33:32.381 --> 02:33:32.391 align:start position:0%
 
 

02:33:32.391 --> 02:33:35.201 align:start position:0%
 
I<02:33:32.480><c> love</c><02:33:33.200><c> the</c><02:33:33.440><c> ternary</c><02:33:33.860><c> operator</c><02:33:34.400><c> it's</c><02:33:34.940><c> like</c><02:33:35.181><c> a</c>

02:33:35.201 --> 02:33:35.211 align:start position:0%
I love the ternary operator it's like a
 

02:33:35.211 --> 02:33:39.011 align:start position:0%
I love the ternary operator it's like a
one-line<02:33:35.931><c> if-else</c><02:33:36.820><c> expression</c><02:33:37.820><c> now</c><02:33:38.421><c> this</c><02:33:38.841><c> is</c>

02:33:39.011 --> 02:33:39.021 align:start position:0%
one-line if-else expression now this is
 

02:33:39.021 --> 02:33:40.961 align:start position:0%
one-line if-else expression now this is
what<02:33:39.171><c> it</c><02:33:39.291><c> looks</c><02:33:39.591><c> like</c><02:33:39.801><c> you</c><02:33:40.461><c> have</c><02:33:40.730><c> your</c>

02:33:40.961 --> 02:33:40.971 align:start position:0%
what it looks like you have your
 

02:33:40.971 --> 02:33:43.571 align:start position:0%
what it looks like you have your
condition<02:33:41.631><c> just</c><02:33:42.501><c> like</c><02:33:42.711><c> in</c><02:33:42.860><c> an</c><02:33:42.950><c> if</c><02:33:43.251><c> statement</c>

02:33:43.571 --> 02:33:43.581 align:start position:0%
condition just like in an if statement
 

02:33:43.581 --> 02:33:46.600 align:start position:0%
condition just like in an if statement
and<02:33:44.150><c> then</c><02:33:44.780><c> you</c><02:33:44.961><c> would</c><02:33:45.081><c> have</c><02:33:45.320><c> a</c><02:33:45.561><c> question</c><02:33:46.101><c> mark</c>

02:33:46.600 --> 02:33:46.610 align:start position:0%
and then you would have a question mark
 

02:33:46.610 --> 02:33:50.020 align:start position:0%
and then you would have a question mark
after<02:33:47.200><c> the</c><02:33:48.200><c> question</c><02:33:48.740><c> mark</c><02:33:49.011><c> you</c><02:33:49.521><c> have</c><02:33:49.820><c> what's</c>

02:33:50.020 --> 02:33:50.030 align:start position:0%
after the question mark you have what's
 

02:33:50.030 --> 02:33:51.900 align:start position:0%
after the question mark you have what's
gonna<02:33:50.150><c> happen</c><02:33:50.660><c> if</c><02:33:50.841><c> the</c><02:33:51.110><c> condition</c><02:33:51.591><c> is</c><02:33:51.681><c> true</c>

02:33:51.900 --> 02:33:51.910 align:start position:0%
gonna happen if the condition is true
 

02:33:51.910 --> 02:33:55.060 align:start position:0%
gonna happen if the condition is true
then<02:33:52.910><c> you</c><02:33:53.091><c> have</c><02:33:53.211><c> a</c><02:33:53.240><c> colon</c><02:33:53.721><c> then</c><02:33:54.591><c> you</c><02:33:54.831><c> have</c>

02:33:55.060 --> 02:33:55.070 align:start position:0%
then you have a colon then you have
 

02:33:55.070 --> 02:33:57.131 align:start position:0%
then you have a colon then you have
what's<02:33:55.311><c> going</c><02:33:55.461><c> to</c><02:33:55.490><c> happen</c><02:33:55.971><c> if</c><02:33:56.150><c> the</c><02:33:56.541><c> condition</c>

02:33:57.131 --> 02:33:57.141 align:start position:0%
what's going to happen if the condition
 

02:33:57.141 --> 02:34:00.791 align:start position:0%
what's going to happen if the condition
is<02:33:57.410><c> false</c><02:33:58.091><c> so</c><02:33:59.091><c> we</c><02:33:59.271><c> can</c><02:33:59.450><c> replace</c><02:33:59.631><c> an</c><02:34:00.171><c> if-else</c>

02:34:00.791 --> 02:34:00.801 align:start position:0%
is false so we can replace an if-else
 

02:34:00.801 --> 02:34:03.581 align:start position:0%
is false so we can replace an if-else
statement<02:34:01.400><c> like</c><02:34:01.551><c> this</c><02:34:01.851><c> into</c><02:34:02.601><c> something</c><02:34:02.871><c> using</c>

02:34:03.581 --> 02:34:03.591 align:start position:0%
statement like this into something using
 

02:34:03.591 --> 02:34:05.980 align:start position:0%
statement like this into something using
the<02:34:03.860><c> ternary</c><02:34:04.461><c> operator</c><02:34:05.001><c> so</c><02:34:05.450><c> here</c><02:34:05.690><c> we</c><02:34:05.841><c> have</c>

02:34:05.980 --> 02:34:05.990 align:start position:0%
the ternary operator so here we have
 

02:34:05.990 --> 02:34:08.051 align:start position:0%
the ternary operator so here we have
this<02:34:06.141><c> if</c><02:34:06.351><c> this</c><02:34:06.621><c> condition</c><02:34:07.190><c> is</c><02:34:07.311><c> true</c><02:34:07.610><c> we're</c>

02:34:08.051 --> 02:34:08.061 align:start position:0%
this if this condition is true we're
 

02:34:08.061 --> 02:34:10.180 align:start position:0%
this if this condition is true we're
going<02:34:08.091><c> to</c><02:34:08.240><c> return</c><02:34:08.511><c> true</c><02:34:08.900><c> else</c><02:34:09.081><c> we're</c><02:34:10.011><c> going</c><02:34:10.131><c> to</c>

02:34:10.180 --> 02:34:10.190 align:start position:0%
going to return true else we're going to
 

02:34:10.190 --> 02:34:13.241 align:start position:0%
going to return true else we're going to
return<02:34:10.521><c> false</c><02:34:10.940><c> let's</c><02:34:11.271><c> change</c><02:34:12.021><c> this</c><02:34:12.351><c> so</c><02:34:13.011><c> now</c>

02:34:13.241 --> 02:34:13.251 align:start position:0%
return false let's change this so now
 

02:34:13.251 --> 02:34:15.131 align:start position:0%
return false let's change this so now
we're<02:34:13.400><c> going</c><02:34:13.490><c> to</c><02:34:13.551><c> use</c><02:34:13.730><c> the</c><02:34:13.940><c> ternary</c><02:34:14.450><c> operator</c>

02:34:15.131 --> 02:34:15.141 align:start position:0%
we're going to use the ternary operator
 

02:34:15.141 --> 02:34:18.060 align:start position:0%
we're going to use the ternary operator
so<02:34:15.621><c> now</c><02:34:15.771><c> it's</c><02:34:15.921><c> just</c><02:34:16.011><c> going</c><02:34:16.190><c> to</c><02:34:16.280><c> say</c><02:34:16.490><c> return</c><02:34:17.301><c> a</c>

02:34:18.060 --> 02:34:18.070 align:start position:0%
so now it's just going to say return a
 

02:34:18.070 --> 02:34:21.341 align:start position:0%
so now it's just going to say return a
equals<02:34:19.070><c> equals</c><02:34:19.371><c> B</c><02:34:20.150><c> that's</c><02:34:20.450><c> the</c><02:34:20.751><c> condition</c>

02:34:21.341 --> 02:34:21.351 align:start position:0%
equals equals B that's the condition
 

02:34:21.351 --> 02:34:24.281 align:start position:0%
equals equals B that's the condition
then<02:34:21.860><c> we</c><02:34:21.891><c> use</c><02:34:22.131><c> the</c><02:34:22.311><c> question</c><02:34:22.791><c> mark</c><02:34:22.820><c> so</c><02:34:23.721><c> if</c><02:34:24.081><c> it's</c>

02:34:24.281 --> 02:34:24.291 align:start position:0%
then we use the question mark so if it's
 

02:34:24.291 --> 02:34:28.631 align:start position:0%
then we use the question mark so if it's
true<02:34:24.621><c> we're</c><02:34:25.131><c> going</c><02:34:25.160><c> to</c><02:34:25.551><c> return</c><02:34:25.910><c> true</c><02:34:26.721><c> and</c><02:34:27.641><c> then</c>

02:34:28.631 --> 02:34:28.641 align:start position:0%
true we're going to return true and then
 

02:34:28.641 --> 02:34:30.850 align:start position:0%
true we're going to return true and then
we've<02:34:28.910><c> have</c><02:34:29.091><c> a</c><02:34:29.121><c> colon</c><02:34:29.660><c> and</c><02:34:29.841><c> after</c><02:34:30.351><c> the</c><02:34:30.471><c> colon</c>

02:34:30.850 --> 02:34:30.860 align:start position:0%
we've have a colon and after the colon
 

02:34:30.860 --> 02:34:33.071 align:start position:0%
we've have a colon and after the colon
we<02:34:31.011><c> have</c><02:34:31.221><c> what's</c><02:34:31.461><c> going</c><02:34:31.610><c> to</c><02:34:31.641><c> happen</c><02:34:32.091><c> if</c><02:34:32.360><c> it's</c>

02:34:33.071 --> 02:34:33.081 align:start position:0%
we have what's going to happen if it's
 

02:34:33.081 --> 02:34:34.841 align:start position:0%
we have what's going to happen if it's
false<02:34:33.381><c> which</c><02:34:33.921><c> is</c><02:34:34.101><c> we're</c><02:34:34.280><c> going</c><02:34:34.400><c> to</c><02:34:34.461><c> return</c>

02:34:34.841 --> 02:34:34.851 align:start position:0%
false which is we're going to return
 

02:34:34.851 --> 02:34:35.890 align:start position:0%
false which is we're going to return
false

02:34:35.890 --> 02:34:35.900 align:start position:0%
false
 

02:34:35.900 --> 02:34:38.591 align:start position:0%
false
now<02:34:36.891><c> I'm</c><02:34:37.011><c> we</c><02:34:37.131><c> honest</c><02:34:37.431><c> you</c><02:34:37.610><c> would</c><02:34:37.761><c> never</c><02:34:38.061><c> write</c>

02:34:38.591 --> 02:34:38.601 align:start position:0%
now I'm we honest you would never write
 

02:34:38.601 --> 02:34:40.900 align:start position:0%
now I'm we honest you would never write
a<02:34:38.811><c> line</c><02:34:39.110><c> like</c><02:34:39.320><c> this</c><02:34:39.530><c> in</c><02:34:39.711><c> real</c><02:34:39.860><c> life</c><02:34:39.910><c> because</c>

02:34:40.900 --> 02:34:40.910 align:start position:0%
a line like this in real life because
 

02:34:40.910 --> 02:34:45.310 align:start position:0%
a line like this in real life because
you<02:34:41.271><c> could</c><02:34:41.450><c> just</c><02:34:41.480><c> write</c><02:34:41.871><c> return</c><02:34:42.320><c> a</c><02:34:44.320><c> equals</c>

02:34:45.310 --> 02:34:45.320 align:start position:0%
you could just write return a equals
 

02:34:45.320 --> 02:34:49.690 align:start position:0%
you could just write return a equals
equals<02:34:45.621><c> equals</c><02:34:46.131><c> B</c><02:34:46.940><c> and</c><02:34:47.681><c> this</c><02:34:48.681><c> lines</c><02:34:49.070><c> actually</c>

02:34:49.690 --> 02:34:49.700 align:start position:0%
equals equals B and this lines actually
 

02:34:49.700 --> 02:34:51.400 align:start position:0%
equals equals B and this lines actually
going<02:34:49.881><c> to</c><02:34:49.971><c> do</c><02:34:50.121><c> the</c><02:34:50.271><c> same</c><02:34:50.511><c> thing</c><02:34:50.751><c> as</c><02:34:50.900><c> this</c><02:34:51.110><c> line</c>

02:34:51.400 --> 02:34:51.410 align:start position:0%
going to do the same thing as this line
 

02:34:51.410 --> 02:34:53.230 align:start position:0%
going to do the same thing as this line
however<02:34:52.221><c> I</c><02:34:52.371><c> just</c><02:34:52.671><c> wanted</c><02:34:52.881><c> to</c><02:34:52.971><c> give</c><02:34:53.091><c> you</c><02:34:53.211><c> a</c>

02:34:53.230 --> 02:34:53.240 align:start position:0%
however I just wanted to give you a
 

02:34:53.240 --> 02:34:55.961 align:start position:0%
however I just wanted to give you a
simple<02:34:53.660><c> example</c><02:34:53.841><c> of</c><02:34:54.501><c> using</c><02:34:54.591><c> the</c><02:34:55.371><c> ternary</c>

02:34:55.961 --> 02:34:55.971 align:start position:0%
simple example of using the ternary
 

02:34:55.971 --> 02:35:00.250 align:start position:0%
simple example of using the ternary
operator

02:35:00.250 --> 02:35:00.260 align:start position:0%
 
 

02:35:00.260 --> 02:35:01.990 align:start position:0%
 
one<02:35:01.160><c> of</c><02:35:01.280><c> the</c><02:35:01.370><c> great</c><02:35:01.580><c> things</c><02:35:01.880><c> about</c>

02:35:01.990 --> 02:35:02.000 align:start position:0%
one of the great things about
 

02:35:02.000 --> 02:35:04.720 align:start position:0%
one of the great things about
conditional<02:35:02.720><c> or</c><02:35:02.900><c> ternary</c><02:35:03.440><c> operators</c><02:35:04.190><c> is</c><02:35:04.400><c> that</c>

02:35:04.720 --> 02:35:04.730 align:start position:0%
conditional or ternary operators is that
 

02:35:04.730 --> 02:35:06.341 align:start position:0%
conditional or ternary operators is that
you<02:35:04.820><c> can</c><02:35:05.061><c> nest</c><02:35:05.420><c> them</c><02:35:05.630><c> within</c><02:35:05.840><c> each</c><02:35:06.110><c> other</c>

02:35:06.341 --> 02:35:06.351 align:start position:0%
you can nest them within each other
 

02:35:06.351 --> 02:35:09.220 align:start position:0%
you can nest them within each other
which<02:35:06.860><c> gives</c><02:35:07.160><c> them</c><02:35:07.340><c> even</c><02:35:07.820><c> more</c><02:35:08.061><c> power</c><02:35:08.450><c> so</c>

02:35:09.220 --> 02:35:09.230 align:start position:0%
which gives them even more power so
 

02:35:09.230 --> 02:35:10.600 align:start position:0%
which gives them even more power so
we're<02:35:09.440><c> going</c><02:35:09.561><c> to</c><02:35:09.620><c> read</c><02:35:09.800><c> write</c><02:35:10.101><c> a</c><02:35:10.130><c> function</c>

02:35:10.600 --> 02:35:10.610 align:start position:0%
we're going to read write a function
 

02:35:10.610 --> 02:35:13.301 align:start position:0%
we're going to read write a function
here<02:35:10.880><c> the</c><02:35:11.181><c> function</c><02:35:11.570><c> check</c><02:35:11.960><c> sign</c><02:35:12.410><c> and</c><02:35:12.830><c> it's</c>

02:35:13.301 --> 02:35:13.311 align:start position:0%
here the function check sign and it's
 

02:35:13.311 --> 02:35:15.761 align:start position:0%
here the function check sign and it's
going<02:35:13.521><c> to</c><02:35:13.820><c> return</c><02:35:14.271><c> the</c><02:35:14.601><c> string</c><02:35:14.870><c> positive</c><02:35:15.590><c> if</c>

02:35:15.761 --> 02:35:15.771 align:start position:0%
going to return the string positive if
 

02:35:15.771 --> 02:35:18.131 align:start position:0%
going to return the string positive if
this<02:35:15.950><c> number</c><02:35:16.250><c> is</c><02:35:16.370><c> positive</c><02:35:16.780><c> negative</c><02:35:17.780><c> if</c><02:35:17.960><c> if</c>

02:35:18.131 --> 02:35:18.141 align:start position:0%
this number is positive negative if if
 

02:35:18.141 --> 02:35:21.220 align:start position:0%
this number is positive negative if if
the<02:35:18.440><c> number</c><02:35:18.710><c> is</c><02:35:18.740><c> negative</c><02:35:18.980><c> or</c><02:35:19.400><c> zero</c><02:35:20.300><c> and</c><02:35:20.570><c> we're</c>

02:35:21.220 --> 02:35:21.230 align:start position:0%
the number is negative or zero and we're
 

02:35:21.230 --> 02:35:24.131 align:start position:0%
the number is negative or zero and we're
gonna<02:35:21.320><c> use</c><02:35:21.681><c> a</c><02:35:21.980><c> nested</c><02:35:22.641><c> conditional</c><02:35:23.271><c> operator</c>

02:35:24.131 --> 02:35:24.141 align:start position:0%
gonna use a nested conditional operator
 

02:35:24.141 --> 02:35:27.970 align:start position:0%
gonna use a nested conditional operator
so<02:35:24.650><c> here</c><02:35:25.431><c> it</c><02:35:25.521><c> is</c><02:35:25.641><c> return</c><02:35:26.450><c> and</c><02:35:26.780><c> first</c><02:35:27.740><c> we're</c>

02:35:27.970 --> 02:35:27.980 align:start position:0%
so here it is return and first we're
 

02:35:27.980 --> 02:35:30.850 align:start position:0%
so here it is return and first we're
going<02:35:28.070><c> to</c><02:35:28.160><c> check</c><02:35:28.400><c> if</c><02:35:28.641><c> num</c><02:35:28.940><c> is</c><02:35:29.271><c> more</c><02:35:29.990><c> than</c><02:35:30.230><c> zero</c>

02:35:30.850 --> 02:35:30.860 align:start position:0%
going to check if num is more than zero
 

02:35:30.860 --> 02:35:33.881 align:start position:0%
going to check if num is more than zero
and<02:35:31.160><c> then</c><02:35:32.150><c> we'll</c><02:35:32.300><c> use</c><02:35:32.601><c> the</c><02:35:32.840><c> ternary</c><02:35:33.290><c> operator</c>

02:35:33.881 --> 02:35:33.891 align:start position:0%
and then we'll use the ternary operator
 

02:35:33.891 --> 02:35:37.060 align:start position:0%
and then we'll use the ternary operator
if<02:35:34.040><c> so</c><02:35:34.610><c> the</c><02:35:35.120><c> first</c><02:35:35.450><c> thing</c><02:35:35.840><c> after</c><02:35:36.260><c> the</c><02:35:36.410><c> question</c>

02:35:37.060 --> 02:35:37.070 align:start position:0%
if so the first thing after the question
 

02:35:37.070 --> 02:35:39.490 align:start position:0%
if so the first thing after the question
mark<02:35:37.250><c> is</c><02:35:37.370><c> if</c><02:35:37.521><c> it's</c><02:35:37.670><c> true</c><02:35:37.940><c> if</c><02:35:38.181><c> it's</c><02:35:38.780><c> true</c><02:35:39.170><c> we're</c>

02:35:39.490 --> 02:35:39.500 align:start position:0%
mark is if it's true if it's true we're
 

02:35:39.500 --> 02:35:44.381 align:start position:0%
mark is if it's true if it's true we're
gonna<02:35:39.710><c> return</c><02:35:40.101><c> positive</c><02:35:41.230><c> if</c><02:35:42.230><c> it's</c><02:35:43.030><c> false</c><02:35:44.030><c> if</c>

02:35:44.381 --> 02:35:44.391 align:start position:0%
gonna return positive if it's false if
 

02:35:44.391 --> 02:35:47.020 align:start position:0%
gonna return positive if it's false if
the<02:35:44.870><c> number</c><02:35:45.170><c> is</c><02:35:45.200><c> not</c><02:35:45.710><c> more</c><02:35:46.010><c> than</c><02:35:46.040><c> zero</c><02:35:46.490><c> we'll</c>

02:35:47.020 --> 02:35:47.030 align:start position:0%
the number is not more than zero we'll
 

02:35:47.030 --> 02:35:48.910 align:start position:0%
the number is not more than zero we'll
do<02:35:47.181><c> something</c><02:35:47.420><c> else</c><02:35:47.690><c> but</c><02:35:48.170><c> here's</c><02:35:48.530><c> where</c><02:35:48.710><c> we're</c>

02:35:48.910 --> 02:35:48.920 align:start position:0%
do something else but here's where we're
 

02:35:48.920 --> 02:35:51.671 align:start position:0%
do something else but here's where we're
going<02:35:49.190><c> to</c><02:35:49.311><c> have</c><02:35:49.340><c> another</c><02:35:50.050><c> ternary</c><02:35:51.050><c> operator</c>

02:35:51.671 --> 02:35:51.681 align:start position:0%
going to have another ternary operator
 

02:35:51.681 --> 02:35:55.120 align:start position:0%
going to have another ternary operator
we're<02:35:52.250><c> gonna</c><02:35:52.340><c> check</c><02:35:52.670><c> if</c><02:35:52.910><c> num</c><02:35:53.271><c> is</c><02:35:53.740><c> less</c><02:35:54.740><c> than</c>

02:35:55.120 --> 02:35:55.130 align:start position:0%
we're gonna check if num is less than
 

02:35:55.130 --> 02:35:58.120 align:start position:0%
we're gonna check if num is less than
zero<02:35:55.670><c> so</c><02:35:56.450><c> if</c><02:35:56.660><c> the</c><02:35:56.780><c> number</c><02:35:57.110><c> is</c><02:35:57.141><c> less</c><02:35:57.260><c> than</c><02:35:57.530><c> zero</c>

02:35:58.120 --> 02:35:58.130 align:start position:0%
zero so if the number is less than zero
 

02:35:58.130 --> 02:35:59.950 align:start position:0%
zero so if the number is less than zero
well<02:35:58.700><c> if</c><02:35:58.820><c> that's</c><02:35:58.940><c> true</c><02:35:59.120><c> we</c><02:35:59.601><c> have</c><02:35:59.690><c> to</c><02:35:59.780><c> have</c><02:35:59.870><c> the</c>

02:35:59.950 --> 02:35:59.960 align:start position:0%
well if that's true we have to have the
 

02:35:59.960 --> 02:36:01.720 align:start position:0%
well if that's true we have to have the
question<02:36:00.380><c> mark</c><02:36:00.530><c> for</c><02:36:00.771><c> the</c><02:36:00.860><c> ternary</c><02:36:01.250><c> operator</c>

02:36:01.720 --> 02:36:01.730 align:start position:0%
question mark for the ternary operator
 

02:36:01.730 --> 02:36:05.131 align:start position:0%
question mark for the ternary operator
if<02:36:01.940><c> that's</c><02:36:02.510><c> true</c><02:36:02.870><c> we're</c><02:36:03.410><c> going</c><02:36:03.440><c> to</c><02:36:03.920><c> return</c>

02:36:05.131 --> 02:36:05.141 align:start position:0%
if that's true we're going to return
 

02:36:05.141 --> 02:36:10.030 align:start position:0%
if that's true we're going to return
negative<02:36:06.141><c> and</c><02:36:06.460><c> if</c><02:36:07.460><c> it's</c><02:36:08.000><c> false</c><02:36:08.830><c> that's</c><02:36:09.830><c> where</c>

02:36:10.030 --> 02:36:10.040 align:start position:0%
negative and if it's false that's where
 

02:36:10.040 --> 02:36:12.040 align:start position:0%
negative and if it's false that's where
the<02:36:10.101><c> colon</c><02:36:10.431><c> comes</c><02:36:10.700><c> in</c><02:36:10.970><c> we're</c><02:36:11.480><c> going</c><02:36:11.630><c> to</c><02:36:11.690><c> return</c>

02:36:12.040 --> 02:36:12.050 align:start position:0%
the colon comes in we're going to return
 

02:36:12.050 --> 02:36:16.660 align:start position:0%
the colon comes in we're going to return
zero<02:36:13.780><c> so</c><02:36:14.780><c> let's</c><02:36:15.290><c> do</c><02:36:15.470><c> this</c><02:36:15.620><c> check</c><02:36:15.950><c> sign</c><02:36:16.250><c> I'm</c>

02:36:16.660 --> 02:36:16.670 align:start position:0%
zero so let's do this check sign I'm
 

02:36:16.670 --> 02:36:18.850 align:start position:0%
zero so let's do this check sign I'm
going<02:36:16.851><c> to</c><02:36:16.970><c> do</c><02:36:17.030><c> a</c><02:36:17.061><c> console</c><02:36:17.690><c> about</c><02:36:17.900><c> log</c><02:36:18.380><c> so</c><02:36:18.771><c> we</c>

02:36:18.850 --> 02:36:18.860 align:start position:0%
going to do a console about log so we
 

02:36:18.860 --> 02:36:22.841 align:start position:0%
going to do a console about log so we
can<02:36:19.040><c> see</c><02:36:19.340><c> what</c><02:36:19.580><c> this</c><02:36:19.790><c> returns</c><02:36:20.330><c> here</c><02:36:20.780><c> and</c><02:36:21.851><c> we</c>

02:36:22.841 --> 02:36:22.851 align:start position:0%
can see what this returns here and we
 

02:36:22.851 --> 02:36:25.210 align:start position:0%
can see what this returns here and we
can<02:36:23.030><c> see</c><02:36:23.300><c> this</c><02:36:23.870><c> is</c><02:36:24.021><c> going</c><02:36:24.200><c> to</c><02:36:24.260><c> return</c><02:36:24.530><c> positive</c>

02:36:25.210 --> 02:36:25.220 align:start position:0%
can see this is going to return positive
 

02:36:25.220 --> 02:36:28.091 align:start position:0%
can see this is going to return positive
if<02:36:25.460><c> we</c><02:36:26.000><c> have</c><02:36:26.210><c> a</c><02:36:26.240><c> negative</c><02:36:26.601><c> number</c><02:36:26.840><c> here</c><02:36:27.561><c> it's</c>

02:36:28.091 --> 02:36:28.101 align:start position:0%
if we have a negative number here it's
 

02:36:28.101 --> 02:36:30.580 align:start position:0%
if we have a negative number here it's
going<02:36:28.280><c> to</c><02:36:28.340><c> return</c><02:36:28.700><c> negative</c><02:36:29.000><c> or</c><02:36:29.420><c> if</c><02:36:30.021><c> we</c><02:36:30.170><c> have</c><02:36:30.410><c> a</c>

02:36:30.580 --> 02:36:30.590 align:start position:0%
going to return negative or if we have a
 

02:36:30.590 --> 02:36:33.910 align:start position:0%
going to return negative or if we have a
zero<02:36:31.280><c> it's</c><02:36:31.910><c> going</c><02:36:32.000><c> to</c><02:36:32.210><c> return</c><02:36:32.540><c> zero</c><02:36:33.230><c> now</c>

02:36:33.910 --> 02:36:33.920 align:start position:0%
zero it's going to return zero now
 

02:36:33.920 --> 02:36:37.631 align:start position:0%
zero it's going to return zero now
you'll<02:36:34.160><c> see</c><02:36:34.490><c> that</c><02:36:35.170><c> after</c><02:36:36.170><c> this</c><02:36:36.950><c> :</c>

02:36:37.631 --> 02:36:37.641 align:start position:0%
you'll see that after this :
 

02:36:37.641 --> 02:36:41.560 align:start position:0%
you'll see that after this :
we<02:36:38.360><c> have</c><02:36:38.601><c> an</c><02:36:38.750><c> entire</c><02:36:39.200><c> ternary</c><02:36:40.101><c> operator</c><02:36:40.670><c> so</c><02:36:41.240><c> if</c>

02:36:41.560 --> 02:36:41.570 align:start position:0%
we have an entire ternary operator so if
 

02:36:41.570 --> 02:36:44.591 align:start position:0%
we have an entire ternary operator so if
this<02:36:41.900><c> is</c><02:36:42.170><c> true</c><02:36:42.740><c> we</c><02:36:43.250><c> just</c><02:36:43.280><c> return</c><02:36:43.730><c> positive</c><02:36:44.330><c> if</c>

02:36:44.591 --> 02:36:44.601 align:start position:0%
this is true we just return positive if
 

02:36:44.601 --> 02:36:48.160 align:start position:0%
this is true we just return positive if
it's<02:36:45.230><c> false</c><02:36:45.650><c> then</c><02:36:46.370><c> we</c><02:36:46.431><c> do</c><02:36:46.730><c> everything</c><02:36:47.601><c> here</c>

02:36:48.160 --> 02:36:48.170 align:start position:0%
it's false then we do everything here
 

02:36:48.170 --> 02:36:50.591 align:start position:0%
it's false then we do everything here
which<02:36:48.620><c> is</c><02:36:48.800><c> another</c><02:36:49.160><c> ternary</c><02:36:49.670><c> operator</c><02:36:50.120><c> where</c>

02:36:50.591 --> 02:36:50.601 align:start position:0%
which is another ternary operator where
 

02:36:50.601 --> 02:36:52.690 align:start position:0%
which is another ternary operator where
it<02:36:50.690><c> checks</c><02:36:50.990><c> if</c><02:36:51.170><c> this</c><02:36:51.440><c> is</c><02:36:51.650><c> true</c><02:36:51.950><c> and</c><02:36:52.190><c> if</c><02:36:52.521><c> that's</c>

02:36:52.690 --> 02:36:52.700 align:start position:0%
it checks if this is true and if that's
 

02:36:52.700 --> 02:36:54.370 align:start position:0%
it checks if this is true and if that's
true<02:36:53.090><c> we</c><02:36:53.271><c> return</c><02:36:53.570><c> negative</c><02:36:53.780><c> and</c><02:36:54.170><c> if</c><02:36:54.230><c> it's</c>

02:36:54.370 --> 02:36:54.380 align:start position:0%
true we return negative and if it's
 

02:36:54.380 --> 02:37:00.201 align:start position:0%
true we return negative and if it's
false<02:36:54.681><c> we</c><02:36:54.800><c> to</c><02:36:55.010><c> return</c><02:36:55.400><c> zero</c>

02:37:00.201 --> 02:37:00.211 align:start position:0%
 
 

02:37:00.211 --> 02:37:02.631 align:start position:0%
 
for<02:37:00.780><c> a</c><02:37:00.811><c> long</c><02:37:00.990><c> time</c><02:37:01.261><c> in</c><02:37:01.440><c> JavaScript</c><02:37:02.161><c> if</c><02:37:02.341><c> you</c>

02:37:02.631 --> 02:37:02.641 align:start position:0%
for a long time in JavaScript if you
 

02:37:02.641 --> 02:37:04.940 align:start position:0%
for a long time in JavaScript if you
were<02:37:02.761><c> going</c><02:37:03.030><c> to</c><02:37:03.150><c> declare</c><02:37:03.601><c> a</c><02:37:03.661><c> variable</c><02:37:04.110><c> you</c><02:37:04.681><c> had</c>

02:37:04.940 --> 02:37:04.950 align:start position:0%
were going to declare a variable you had
 

02:37:04.950 --> 02:37:08.060 align:start position:0%
were going to declare a variable you had
to<02:37:05.161><c> use</c><02:37:05.400><c> the</c><02:37:05.671><c> VAR</c><02:37:06.001><c> keyword</c><02:37:06.591><c> but</c><02:37:07.591><c> starting</c><02:37:08.041><c> with</c>

02:37:08.060 --> 02:37:08.070 align:start position:0%
to use the VAR keyword but starting with
 

02:37:08.070 --> 02:37:13.371 align:start position:0%
to use the VAR keyword but starting with
es6<02:37:08.851><c> in</c><02:37:09.650><c> 2015</c><02:37:10.700><c> we</c><02:37:11.700><c> can</c><02:37:12.091><c> now</c><02:37:12.271><c> declare</c><02:37:12.601><c> variables</c>

02:37:13.371 --> 02:37:13.381 align:start position:0%
es6 in 2015 we can now declare variables
 

02:37:13.381 --> 02:37:16.701 align:start position:0%
es6 in 2015 we can now declare variables
with<02:37:13.650><c> let</c><02:37:14.041><c> and</c><02:37:14.280><c> Const</c><02:37:15.061><c> as</c><02:37:15.240><c> well</c><02:37:15.871><c> over</c><02:37:16.561><c> the</c><02:37:16.681><c> next</c>

02:37:16.701 --> 02:37:16.711 align:start position:0%
with let and Const as well over the next
 

02:37:16.711 --> 02:37:19.281 align:start position:0%
with let and Const as well over the next
few<02:37:17.041><c> lessons</c><02:37:17.251><c> I</c><02:37:17.610><c> will</c><02:37:17.820><c> be</c><02:37:18.001><c> talking</c><02:37:18.360><c> about</c><02:37:18.541><c> what</c>

02:37:19.281 --> 02:37:19.291 align:start position:0%
few lessons I will be talking about what
 

02:37:19.291 --> 02:37:20.901 align:start position:0%
few lessons I will be talking about what
let<02:37:19.561><c> and</c><02:37:19.740><c> constitute</c><02:37:20.311><c> that</c><02:37:20.521><c> it's</c><02:37:20.641><c> different</c>

02:37:20.901 --> 02:37:20.911 align:start position:0%
let and constitute that it's different
 

02:37:20.911 --> 02:37:23.720 align:start position:0%
let and constitute that it's different
than<02:37:21.240><c> var</c><02:37:21.480><c> but</c><02:37:22.261><c> one</c><02:37:22.621><c> of</c><02:37:22.650><c> the</c><02:37:22.891><c> things</c><02:37:23.190><c> is</c><02:37:23.461><c> that</c>

02:37:23.720 --> 02:37:23.730 align:start position:0%
than var but one of the things is that
 

02:37:23.730 --> 02:37:26.350 align:start position:0%
than var but one of the things is that
let<02:37:24.331><c> does</c><02:37:24.780><c> not</c><02:37:24.990><c> let</c><02:37:25.291><c> you</c><02:37:25.471><c> declare</c><02:37:26.041><c> a</c><02:37:26.070><c> variable</c>

02:37:26.350 --> 02:37:26.360 align:start position:0%
let does not let you declare a variable
 

02:37:26.360 --> 02:37:29.301 align:start position:0%
let does not let you declare a variable
twice<02:37:27.360><c> so</c><02:37:28.051><c> let's</c><02:37:28.320><c> look</c><02:37:28.471><c> at</c><02:37:28.591><c> this</c><02:37:28.681><c> example</c><02:37:28.891><c> we</c>

02:37:29.301 --> 02:37:29.311 align:start position:0%
twice so let's look at this example we
 

02:37:29.311 --> 02:37:31.371 align:start position:0%
twice so let's look at this example we
have<02:37:29.341><c> var</c><02:37:29.641><c> cat</c><02:37:29.911><c> name</c><02:37:30.091><c> equals</c><02:37:30.391><c> Quincy</c><02:37:30.841><c> and</c><02:37:31.051><c> then</c>

02:37:31.371 --> 02:37:31.381 align:start position:0%
have var cat name equals Quincy and then
 

02:37:31.381 --> 02:37:34.461 align:start position:0%
have var cat name equals Quincy and then
down<02:37:31.530><c> here</c><02:37:31.561><c> var</c><02:37:32.161><c> cat</c><02:37:32.431><c> name</c><02:37:32.641><c> equals</c><02:37:33.061><c> Bo</c><02:37:33.391><c> and</c><02:37:33.721><c> if</c>

02:37:34.461 --> 02:37:34.471 align:start position:0%
down here var cat name equals Bo and if
 

02:37:34.471 --> 02:37:36.501 align:start position:0%
down here var cat name equals Bo and if
I<02:37:34.591><c> just</c><02:37:34.801><c> run</c><02:37:35.011><c> this</c><02:37:35.190><c> code</c><02:37:35.490><c> you'll</c><02:37:36.030><c> see</c><02:37:36.121><c> that</c>

02:37:36.501 --> 02:37:36.511 align:start position:0%
I just run this code you'll see that
 

02:37:36.511 --> 02:37:38.180 align:start position:0%
I just run this code you'll see that
nothing<02:37:36.990><c> is</c><02:37:37.110><c> happening</c><02:37:37.141><c> it's</c><02:37:37.740><c> just</c><02:37:37.831><c> allowing</c>

02:37:38.180 --> 02:37:38.190 align:start position:0%
nothing is happening it's just allowing
 

02:37:38.190 --> 02:37:40.850 align:start position:0%
nothing is happening it's just allowing
us<02:37:38.551><c> to</c><02:37:38.671><c> set</c><02:37:39.181><c> the</c><02:37:39.211><c> cat</c><02:37:39.570><c> name</c><02:37:39.780><c> twice</c><02:37:40.200><c> and</c><02:37:40.501><c> to</c>

02:37:40.850 --> 02:37:40.860 align:start position:0%
us to set the cat name twice and to
 

02:37:40.860 --> 02:37:42.671 align:start position:0%
us to set the cat name twice and to
clear<02:37:41.101><c> it</c><02:37:41.280><c> twice</c><02:37:41.551><c> with</c><02:37:41.761><c> the</c><02:37:41.791><c> VAR</c><02:37:42.301><c> keyword</c>

02:37:42.671 --> 02:37:42.681 align:start position:0%
clear it twice with the VAR keyword
 

02:37:42.681 --> 02:37:45.741 align:start position:0%
clear it twice with the VAR keyword
however<02:37:43.681><c> if</c><02:37:43.860><c> we</c><02:37:43.980><c> change</c><02:37:44.011><c> this</c><02:37:44.581><c> to</c><02:37:44.851><c> let</c><02:37:45.150><c> we're</c>

02:37:45.741 --> 02:37:45.751 align:start position:0%
however if we change this to let we're
 

02:37:45.751 --> 02:37:48.051 align:start position:0%
however if we change this to let we're
gonna<02:37:45.900><c> change</c><02:37:46.230><c> all</c><02:37:46.471><c> the</c><02:37:46.860><c> var</c><02:37:47.131><c> to</c><02:37:47.400><c> let</c><02:37:47.671><c> and</c>

02:37:48.051 --> 02:37:48.061 align:start position:0%
gonna change all the var to let and
 

02:37:48.061 --> 02:37:51.921 align:start position:0%
gonna change all the var to let and
you'll<02:37:48.931><c> see</c><02:37:49.371><c> that</c><02:37:50.371><c> when</c><02:37:51.091><c> we</c><02:37:51.240><c> load</c><02:37:51.751><c> it</c><02:37:51.841><c> again</c>

02:37:51.921 --> 02:37:51.931 align:start position:0%
you'll see that when we load it again
 

02:37:51.931 --> 02:37:53.211 align:start position:0%
you'll see that when we load it again
you'll<02:37:52.320><c> see</c><02:37:52.440><c> an</c><02:37:52.530><c> error</c>

02:37:53.211 --> 02:37:53.221 align:start position:0%
you'll see an error
 

02:37:53.221 --> 02:37:56.810 align:start position:0%
you'll see an error
duplicate<02:37:54.030><c> declaration</c><02:37:54.661><c> cat</c><02:37:54.961><c> name</c><02:37:55.261><c> so</c><02:37:56.011><c> this</c>

02:37:56.810 --> 02:37:56.820 align:start position:0%
duplicate declaration cat name so this
 

02:37:56.820 --> 02:37:58.611 align:start position:0%
duplicate declaration cat name so this
is<02:37:57.091><c> good</c><02:37:57.480><c> that's</c><02:37:57.721><c> creating</c><02:37:58.141><c> this</c><02:37:58.261><c> error</c>

02:37:58.611 --> 02:37:58.621 align:start position:0%
is good that's creating this error
 

02:37:58.621 --> 02:38:01.551 align:start position:0%
is good that's creating this error
because<02:37:59.371><c> you</c><02:38:00.150><c> usually</c><02:38:00.570><c> don't</c><02:38:01.051><c> want</c><02:38:01.320><c> to</c>

02:38:01.551 --> 02:38:01.561 align:start position:0%
because you usually don't want to
 

02:38:01.561 --> 02:38:04.341 align:start position:0%
because you usually don't want to
declare<02:38:02.101><c> a</c><02:38:02.400><c> variable</c><02:38:02.791><c> two</c><02:38:03.331><c> times</c><02:38:03.721><c> in</c><02:38:04.021><c> the</c><02:38:04.110><c> same</c>

02:38:04.341 --> 02:38:04.351 align:start position:0%
declare a variable two times in the same
 

02:38:04.351 --> 02:38:08.151 align:start position:0%
declare a variable two times in the same
scope<02:38:04.831><c> so</c><02:38:05.610><c> this</c><02:38:06.511><c> allows</c><02:38:07.141><c> your</c><02:38:07.351><c> program</c><02:38:07.860><c> to</c>

02:38:08.151 --> 02:38:08.161 align:start position:0%
scope so this allows your program to
 

02:38:08.161 --> 02:38:09.770 align:start position:0%
scope so this allows your program to
give<02:38:08.490><c> you</c><02:38:08.610><c> an</c><02:38:08.700><c> error</c><02:38:09.001><c> to</c><02:38:09.240><c> tell</c><02:38:09.450><c> you</c><02:38:09.631><c> that</c>

02:38:09.770 --> 02:38:09.780 align:start position:0%
give you an error to tell you that
 

02:38:09.780 --> 02:38:12.350 align:start position:0%
give you an error to tell you that
you've<02:38:09.931><c> done</c><02:38:10.230><c> something</c><02:38:10.591><c> wrong</c><02:38:11.011><c> now</c><02:38:11.940><c> you</c><02:38:12.001><c> can</c>

02:38:12.350 --> 02:38:12.360 align:start position:0%
you've done something wrong now you can
 

02:38:12.360 --> 02:38:14.541 align:start position:0%
you've done something wrong now you can
still<02:38:12.601><c> reset</c><02:38:13.261><c> it</c><02:38:13.440><c> so</c><02:38:13.471><c> if</c><02:38:13.740><c> we</c><02:38:13.921><c> didn't</c><02:38:14.190><c> use</c><02:38:14.311><c> the</c>

02:38:14.541 --> 02:38:14.551 align:start position:0%
still reset it so if we didn't use the
 

02:38:14.551 --> 02:38:17.690 align:start position:0%
still reset it so if we didn't use the
word<02:38:14.581><c> let</c><02:38:14.971><c> here</c><02:38:15.391><c> we</c><02:38:15.871><c> could</c><02:38:16.110><c> just</c><02:38:16.411><c> set</c><02:38:17.041><c> the</c><02:38:17.400><c> cat</c>

02:38:17.690 --> 02:38:17.700 align:start position:0%
word let here we could just set the cat
 

02:38:17.700 --> 02:38:19.821 align:start position:0%
word let here we could just set the cat
name<02:38:17.881><c> variable</c><02:38:18.421><c> and</c><02:38:18.811><c> now</c><02:38:19.291><c> we're</c><02:38:19.530><c> not</c><02:38:19.561><c> gonna</c>

02:38:19.821 --> 02:38:19.831 align:start position:0%
name variable and now we're not gonna
 

02:38:19.831 --> 02:38:21.890 align:start position:0%
name variable and now we're not gonna
get<02:38:20.070><c> an</c><02:38:20.221><c> error</c><02:38:20.641><c> in</c><02:38:20.881><c> this</c><02:38:21.360><c> case</c><02:38:21.661><c> we're</c>

02:38:21.890 --> 02:38:21.900 align:start position:0%
get an error in this case we're
 

02:38:21.900 --> 02:38:23.810 align:start position:0%
get an error in this case we're
declaring<02:38:22.471><c> the</c><02:38:22.591><c> variable</c><02:38:22.621><c> here</c><02:38:23.190><c> to</c><02:38:23.280><c> be</c><02:38:23.371><c> Quincy</c>

02:38:23.810 --> 02:38:23.820 align:start position:0%
declaring the variable here to be Quincy
 

02:38:23.820 --> 02:38:25.911 align:start position:0%
declaring the variable here to be Quincy
and<02:38:24.030><c> we're</c><02:38:24.271><c> setting</c><02:38:24.631><c> the</c><02:38:24.811><c> same</c><02:38:25.081><c> variable</c><02:38:25.650><c> to</c><02:38:25.891><c> a</c>

02:38:25.911 --> 02:38:25.921 align:start position:0%
and we're setting the same variable to a
 

02:38:25.921 --> 02:38:28.970 align:start position:0%
and we're setting the same variable to a
new<02:38:26.581><c> name</c><02:38:26.911><c> here</c><02:38:27.841><c> this</c><02:38:28.200><c> is</c><02:38:28.261><c> one</c><02:38:28.530><c> of</c><02:38:28.561><c> the</c><02:38:28.740><c> few</c>

02:38:28.970 --> 02:38:28.980 align:start position:0%
new name here this is one of the few
 

02:38:28.980 --> 02:38:32.661 align:start position:0%
new name here this is one of the few
reasons<02:38:29.221><c> that</c><02:38:29.581><c> many</c><02:38:30.570><c> people</c><02:38:31.171><c> only</c><02:38:31.681><c> use</c><02:38:32.041><c> Latin</c>

02:38:32.661 --> 02:38:32.671 align:start position:0%
reasons that many people only use Latin
 

02:38:32.671 --> 02:38:35.751 align:start position:0%
reasons that many people only use Latin
Const<02:38:33.421><c> and</c><02:38:33.570><c> never</c><02:38:34.411><c> use</c><02:38:34.711><c> var</c><02:38:35.011><c> to</c><02:38:35.431><c> declare</c>

02:38:35.751 --> 02:38:35.761 align:start position:0%
Const and never use var to declare
 

02:38:35.761 --> 02:38:38.121 align:start position:0%
Const and never use var to declare
variables<02:38:36.331><c> another</c><02:38:37.200><c> thing</c><02:38:37.471><c> in</c><02:38:37.650><c> this</c><02:38:37.740><c> code</c><02:38:38.011><c> you</c>

02:38:38.121 --> 02:38:38.131 align:start position:0%
variables another thing in this code you
 

02:38:38.131 --> 02:38:41.631 align:start position:0%
variables another thing in this code you
can<02:38:38.280><c> see</c><02:38:38.431><c> is</c><02:38:38.671><c> use</c><02:38:39.240><c> strict</c><02:38:39.931><c> now</c><02:38:40.591><c> this</c><02:38:40.980><c> enables</c>

02:38:41.631 --> 02:38:41.641 align:start position:0%
can see is use strict now this enables
 

02:38:41.641 --> 02:38:44.331 align:start position:0%
can see is use strict now this enables
strict<02:38:42.091><c> mode</c><02:38:42.360><c> which</c><02:38:42.961><c> caches</c><02:38:43.501><c> common</c><02:38:43.980><c> coding</c>

02:38:44.331 --> 02:38:44.341 align:start position:0%
strict mode which caches common coding
 

02:38:44.341 --> 02:38:48.051 align:start position:0%
strict mode which caches common coding
mistakes<02:38:44.610><c> and</c><02:38:45.211><c> unsafe</c><02:38:45.780><c> actions</c><02:38:46.471><c> so</c><02:38:47.251><c> a</c><02:38:47.610><c> lot</c><02:38:47.940><c> of</c>

02:38:48.051 --> 02:38:48.061 align:start position:0%
mistakes and unsafe actions so a lot of
 

02:38:48.061 --> 02:38:50.690 align:start position:0%
mistakes and unsafe actions so a lot of
people<02:38:48.360><c> will</c><02:38:48.690><c> use</c><02:38:48.721><c> use</c><02:38:49.200><c> strict</c><02:38:49.681><c> at</c><02:38:49.891><c> the</c><02:38:50.251><c> top</c><02:38:50.490><c> of</c>

02:38:50.690 --> 02:38:50.700 align:start position:0%
people will use use strict at the top of
 

02:38:50.700 --> 02:38:53.060 align:start position:0%
people will use use strict at the top of
a<02:38:50.791><c> full</c><02:38:51.030><c> JavaScript</c><02:38:51.421><c> file</c><02:38:51.931><c> or</c><02:38:52.230><c> maybe</c><02:38:52.621><c> just</c><02:38:52.891><c> in</c>

02:38:53.060 --> 02:38:53.070 align:start position:0%
a full JavaScript file or maybe just in
 

02:38:53.070 --> 02:38:56.241 align:start position:0%
a full JavaScript file or maybe just in
a<02:38:53.221><c> function</c><02:38:53.820><c> to</c><02:38:54.391><c> catch</c><02:38:54.811><c> coding</c><02:38:55.291><c> mistakes</c><02:38:55.650><c> such</c>

02:38:56.241 --> 02:38:56.251 align:start position:0%
a function to catch coding mistakes such
 

02:38:56.251 --> 02:38:58.881 align:start position:0%
a function to catch coding mistakes such
as<02:38:56.280><c> if</c><02:38:56.700><c> you</c><02:38:57.061><c> create</c><02:38:57.601><c> a</c><02:38:57.690><c> variable</c><02:38:58.261><c> and</c><02:38:58.530><c> don't</c>

02:38:58.881 --> 02:38:58.891 align:start position:0%
as if you create a variable and don't
 

02:38:58.891 --> 02:39:05.490 align:start position:0%
as if you create a variable and don't
declare<02:38:59.490><c> it</c><02:38:59.730><c> with</c><02:38:59.881><c> varla</c><02:39:00.480><c> a</c><02:39:00.511><c> Const</c>

02:39:05.490 --> 02:39:05.500 align:start position:0%
 
 

02:39:05.500 --> 02:39:07.710 align:start position:0%
 
another<02:39:06.189><c> major</c><02:39:06.460><c> difference</c><02:39:06.609><c> between</c><02:39:07.149><c> the</c><02:39:07.510><c> var</c>

02:39:07.710 --> 02:39:07.720 align:start position:0%
another major difference between the var
 

02:39:07.720 --> 02:39:10.019 align:start position:0%
another major difference between the var
and<02:39:07.750><c> let</c><02:39:08.290><c> keywords</c><02:39:08.830><c> is</c><02:39:09.069><c> that</c><02:39:09.700><c> when</c><02:39:09.910><c> you</c>

02:39:10.019 --> 02:39:10.029 align:start position:0%
and let keywords is that when you
 

02:39:10.029 --> 02:39:12.389 align:start position:0%
and let keywords is that when you
declare<02:39:10.210><c> a</c><02:39:10.420><c> variable</c><02:39:10.540><c> with</c><02:39:11.229><c> var</c><02:39:11.620><c> it</c><02:39:11.979><c> is</c>

02:39:12.389 --> 02:39:12.399 align:start position:0%
declare a variable with var it is
 

02:39:12.399 --> 02:39:15.330 align:start position:0%
declare a variable with var it is
declared<02:39:12.790><c> globally</c><02:39:13.120><c> or</c><02:39:13.810><c> locally</c><02:39:14.020><c> if</c><02:39:14.800><c> declared</c>

02:39:15.330 --> 02:39:15.340 align:start position:0%
declared globally or locally if declared
 

02:39:15.340 --> 02:39:19.410 align:start position:0%
declared globally or locally if declared
inside<02:39:15.700><c> a</c><02:39:16.029><c> function</c><02:39:16.620><c> however</c><02:39:17.620><c> let</c><02:39:18.340><c> the</c><02:39:19.060><c> scope</c>

02:39:19.410 --> 02:39:19.420 align:start position:0%
inside a function however let the scope
 

02:39:19.420 --> 02:39:22.410 align:start position:0%
inside a function however let the scope
of<02:39:19.630><c> let</c><02:39:19.930><c> is</c><02:39:20.170><c> limited</c><02:39:20.859><c> to</c><02:39:21.130><c> the</c><02:39:21.370><c> block</c><02:39:21.670><c> statement</c>

02:39:22.410 --> 02:39:22.420 align:start position:0%
of let is limited to the block statement
 

02:39:22.420 --> 02:39:25.620 align:start position:0%
of let is limited to the block statement
or<02:39:22.540><c> expression</c><02:39:23.319><c> that</c><02:39:23.560><c> it</c><02:39:23.770><c> was</c><02:39:23.950><c> declared</c><02:39:24.550><c> in</c><02:39:24.790><c> so</c>

02:39:25.620 --> 02:39:25.630 align:start position:0%
or expression that it was declared in so
 

02:39:25.630 --> 02:39:28.469 align:start position:0%
or expression that it was declared in so
let's<02:39:26.290><c> look</c><02:39:26.500><c> at</c><02:39:26.680><c> this</c><02:39:26.830><c> example</c><02:39:27.100><c> here</c><02:39:27.520><c> if</c><02:39:28.029><c> you</c>

02:39:28.469 --> 02:39:28.479 align:start position:0%
let's look at this example here if you
 

02:39:28.479 --> 02:39:31.410 align:start position:0%
let's look at this example here if you
see<02:39:28.720><c> this</c><02:39:28.960><c> code</c><02:39:29.380><c> we</c><02:39:30.250><c> have</c><02:39:30.399><c> this</c><02:39:30.640><c> check</c><02:39:31.029><c> scoped</c>

02:39:31.410 --> 02:39:31.420 align:start position:0%
see this code we have this check scoped
 

02:39:31.420 --> 02:39:33.210 align:start position:0%
see this code we have this check scoped
function<02:39:32.020><c> and</c><02:39:32.170><c> we're</c><02:39:32.260><c> calling</c><02:39:32.560><c> it</c><02:39:32.680><c> down</c><02:39:32.830><c> here</c>

02:39:33.210 --> 02:39:33.220 align:start position:0%
function and we're calling it down here
 

02:39:33.220 --> 02:39:36.929 align:start position:0%
function and we're calling it down here
and<02:39:33.399><c> it's</c><02:39:33.880><c> setting</c><02:39:34.330><c> I</c><02:39:34.590><c> with</c><02:39:35.590><c> a</c><02:39:35.859><c> var</c><02:39:36.370><c> here</c><02:39:36.760><c> of</c>

02:39:36.929 --> 02:39:36.939 align:start position:0%
and it's setting I with a var here of
 

02:39:36.939 --> 02:39:39.599 align:start position:0%
and it's setting I with a var here of
our<02:39:37.120><c> keyword</c><02:39:37.630><c> -</c><02:39:38.080><c> function</c><02:39:38.500><c> scope</c><02:39:38.800><c> then</c><02:39:39.460><c> we're</c>

02:39:39.599 --> 02:39:39.609 align:start position:0%
our keyword - function scope then we're
 

02:39:39.609 --> 02:39:41.639 align:start position:0%
our keyword - function scope then we're
setting<02:39:39.819><c> it</c><02:39:39.910><c> to</c><02:39:40.060><c> block</c><02:39:40.359><c> scope</c><02:39:40.779><c> in</c><02:39:41.020><c> here</c><02:39:41.560><c> and</c>

02:39:41.639 --> 02:39:41.649 align:start position:0%
setting it to block scope in here and
 

02:39:41.649 --> 02:39:44.340 align:start position:0%
setting it to block scope in here and
you<02:39:42.250><c> can</c><02:39:42.399><c> see</c><02:39:42.670><c> it's</c><02:39:43.239><c> console</c><02:39:43.870><c> that</c><02:39:43.930><c> logging</c>

02:39:44.340 --> 02:39:44.350 align:start position:0%
you can see it's console that logging
 

02:39:44.350 --> 02:39:47.010 align:start position:0%
you can see it's console that logging
block<02:39:44.620><c> scope</c><02:39:44.979><c> eye</c><02:39:45.220><c> is</c><02:39:45.310><c> it</c><02:39:46.180><c> says</c><02:39:46.390><c> block</c><02:39:46.689><c> scope</c>

02:39:47.010 --> 02:39:47.020 align:start position:0%
block scope eye is it says block scope
 

02:39:47.020 --> 02:39:49.889 align:start position:0%
block scope eye is it says block scope
and<02:39:47.319><c> we</c><02:39:47.710><c> will</c><02:39:47.920><c> get</c><02:39:48.220><c> down</c><02:39:48.399><c> here</c><02:39:48.880><c> function</c><02:39:49.450><c> scope</c>

02:39:49.889 --> 02:39:49.899 align:start position:0%
and we will get down here function scope
 

02:39:49.899 --> 02:39:53.280 align:start position:0%
and we will get down here function scope
it's<02:39:50.140><c> still</c><02:39:50.680><c> block</c><02:39:51.340><c> scope</c><02:39:51.790><c> if</c><02:39:52.090><c> we</c><02:39:52.810><c> want</c><02:39:53.109><c> this</c>

02:39:53.280 --> 02:39:53.290 align:start position:0%
it's still block scope if we want this
 

02:39:53.290 --> 02:39:56.219 align:start position:0%
it's still block scope if we want this
to<02:39:53.350><c> be</c><02:39:53.609><c> function</c><02:39:54.609><c> scope</c><02:39:54.880><c> down</c><02:39:55.180><c> here</c><02:39:55.779><c> we're</c>

02:39:56.219 --> 02:39:56.229 align:start position:0%
to be function scope down here we're
 

02:39:56.229 --> 02:39:59.820 align:start position:0%
to be function scope down here we're
going<02:39:56.439><c> to</c><02:39:56.529><c> have</c><02:39:56.800><c> to</c><02:39:57.040><c> use</c><02:39:57.310><c> let</c><02:39:57.939><c> so</c><02:39:58.810><c> we</c><02:39:59.350><c> would</c><02:39:59.560><c> use</c>

02:39:59.820 --> 02:39:59.830 align:start position:0%
going to have to use let so we would use
 

02:39:59.830 --> 02:40:03.870 align:start position:0%
going to have to use let so we would use
let<02:40:00.489><c> here</c><02:40:00.970><c> and</c><02:40:01.180><c> then</c><02:40:01.989><c> we</c><02:40:02.140><c> would</c><02:40:02.350><c> use</c><02:40:02.680><c> let</c><02:40:03.370><c> here</c>

02:40:03.870 --> 02:40:03.880 align:start position:0%
let here and then we would use let here
 

02:40:03.880 --> 02:40:06.960 align:start position:0%
let here and then we would use let here
and<02:40:04.090><c> if</c><02:40:04.510><c> we</c><02:40:04.630><c> run</c><02:40:04.930><c> the</c><02:40:05.080><c> code</c><02:40:05.410><c> now</c><02:40:05.739><c> you</c><02:40:06.310><c> can</c><02:40:06.729><c> see</c>

02:40:06.960 --> 02:40:06.970 align:start position:0%
and if we run the code now you can see
 

02:40:06.970 --> 02:40:11.130 align:start position:0%
and if we run the code now you can see
in<02:40:07.239><c> the</c><02:40:08.050><c> console</c><02:40:08.680><c> block</c><02:40:09.340><c> scope</c><02:40:09.729><c> eye</c><02:40:09.910><c> is</c><02:40:10.420><c> block</c>

02:40:11.130 --> 02:40:11.140 align:start position:0%
in the console block scope eye is block
 

02:40:11.140 --> 02:40:13.979 align:start position:0%
in the console block scope eye is block
scope<02:40:11.529><c> function</c><02:40:12.489><c> scope</c><02:40:12.729><c> eye</c><02:40:12.970><c> is</c><02:40:13.029><c> function</c>

02:40:13.979 --> 02:40:13.989 align:start position:0%
scope function scope eye is function
 

02:40:13.989 --> 02:40:16.650 align:start position:0%
scope function scope eye is function
scope<02:40:14.290><c> so</c><02:40:14.920><c> even</c><02:40:15.310><c> though</c><02:40:15.460><c> we</c><02:40:15.609><c> set</c><02:40:15.939><c> I</c><02:40:16.060><c> to</c><02:40:16.180><c> block</c>

02:40:16.650 --> 02:40:16.660 align:start position:0%
scope so even though we set I to block
 

02:40:16.660 --> 02:40:20.550 align:start position:0%
scope so even though we set I to block
scope<02:40:17.050><c> here</c><02:40:17.380><c> inside</c><02:40:18.100><c> this</c><02:40:18.819><c> block</c><02:40:19.330><c> now</c><02:40:20.140><c> a</c><02:40:20.170><c> block</c>

02:40:20.550 --> 02:40:20.560 align:start position:0%
scope here inside this block now a block
 

02:40:20.560 --> 02:40:23.250 align:start position:0%
scope here inside this block now a block
is<02:40:20.800><c> just</c><02:40:20.830><c> anything</c><02:40:21.550><c> inside</c><02:40:22.029><c> these</c><02:40:22.359><c> squiggly</c>

02:40:23.250 --> 02:40:23.260 align:start position:0%
is just anything inside these squiggly
 

02:40:23.260 --> 02:40:26.099 align:start position:0%
is just anything inside these squiggly
braces<02:40:23.439><c> here</c><02:40:24.040><c> so</c><02:40:24.520><c> we</c><02:40:24.670><c> set</c><02:40:24.850><c> I</c><02:40:24.970><c> inside</c><02:40:25.840><c> this</c>

02:40:26.099 --> 02:40:26.109 align:start position:0%
braces here so we set I inside this
 

02:40:26.109 --> 02:40:28.410 align:start position:0%
braces here so we set I inside this
block<02:40:26.439><c> to</c><02:40:26.470><c> block</c><02:40:26.920><c> scope</c><02:40:27.399><c> but</c><02:40:27.910><c> then</c><02:40:28.120><c> when</c><02:40:28.270><c> we</c>

02:40:28.410 --> 02:40:28.420 align:start position:0%
block to block scope but then when we
 

02:40:28.420 --> 02:40:31.110 align:start position:0%
block to block scope but then when we
get<02:40:28.660><c> out</c><02:40:28.840><c> here</c><02:40:29.319><c> it's</c><02:40:29.739><c> now</c><02:40:30.010><c> back</c><02:40:30.279><c> to</c><02:40:30.340><c> function</c>

02:40:31.110 --> 02:40:31.120 align:start position:0%
get out here it's now back to function
 

02:40:31.120 --> 02:40:34.229 align:start position:0%
get out here it's now back to function
scope<02:40:31.450><c> because</c><02:40:32.140><c> of</c><02:40:32.319><c> this</c><02:40:32.500><c> up</c><02:40:32.680><c> here</c><02:40:33.239><c> here's</c>

02:40:34.229 --> 02:40:34.239 align:start position:0%
scope because of this up here here's
 

02:40:34.239 --> 02:40:36.690 align:start position:0%
scope because of this up here here's
another<02:40:34.450><c> thing</c><02:40:34.660><c> I</c><02:40:34.750><c> want</c><02:40:34.899><c> to</c><02:40:34.960><c> show</c><02:40:35.109><c> you</c><02:40:35.170><c> if</c><02:40:35.700><c> this</c>

02:40:36.690 --> 02:40:36.700 align:start position:0%
another thing I want to show you if this
 

02:40:36.700 --> 02:40:39.450 align:start position:0%
another thing I want to show you if this
is<02:40:37.029><c> if</c><02:40:37.330><c> we</c><02:40:37.689><c> comment</c><02:40:38.109><c> this</c><02:40:38.260><c> line</c><02:40:38.319><c> out</c><02:40:38.590><c> and</c><02:40:39.100><c> we</c>

02:40:39.450 --> 02:40:39.460 align:start position:0%
is if we comment this line out and we
 

02:40:39.460 --> 02:40:43.110 align:start position:0%
is if we comment this line out and we
change<02:40:39.850><c> this</c><02:40:40.120><c> to</c><02:40:40.180><c> var</c><02:40:41.760><c> what</c><02:40:42.760><c> do</c><02:40:42.819><c> you</c><02:40:42.910><c> think</c><02:40:43.060><c> is</c>

02:40:43.110 --> 02:40:43.120 align:start position:0%
change this to var what do you think is
 

02:40:43.120 --> 02:40:44.570 align:start position:0%
change this to var what do you think is
gonna<02:40:43.270><c> happen</c>

02:40:44.570 --> 02:40:44.580 align:start position:0%
gonna happen
 

02:40:44.580 --> 02:40:49.830 align:start position:0%
gonna happen
well<02:40:45.580><c> let's</c><02:40:45.790><c> run</c><02:40:46.029><c> and</c><02:40:46.239><c> find</c><02:40:46.450><c> out</c><02:40:48.330><c> look</c><02:40:49.330><c> we</c><02:40:49.569><c> set</c>

02:40:49.830 --> 02:40:49.840 align:start position:0%
well let's run and find out look we set
 

02:40:49.840 --> 02:40:53.250 align:start position:0%
well let's run and find out look we set
the<02:40:50.050><c> var</c><02:40:50.550><c> inside</c><02:40:51.550><c> this</c><02:40:51.939><c> block</c><02:40:52.300><c> here</c><02:40:52.750><c> to</c><02:40:53.020><c> block</c>

02:40:53.250 --> 02:40:53.260 align:start position:0%
the var inside this block here to block
 

02:40:53.260 --> 02:40:56.070 align:start position:0%
the var inside this block here to block
scope<02:40:53.680><c> and</c><02:40:54.010><c> it</c><02:40:54.520><c> says</c><02:40:54.700><c> block</c><02:40:54.970><c> scope</c><02:40:55.359><c> is</c><02:40:55.660><c> block</c>

02:40:56.070 --> 02:40:56.080 align:start position:0%
scope and it says block scope is block
 

02:40:56.080 --> 02:40:58.590 align:start position:0%
scope and it says block scope is block
scope<02:40:56.410><c> but</c><02:40:57.130><c> then</c><02:40:57.370><c> when</c><02:40:57.550><c> we're</c><02:40:57.670><c> outside</c><02:40:57.910><c> of</c><02:40:58.510><c> the</c>

02:40:58.590 --> 02:40:58.600 align:start position:0%
scope but then when we're outside of the
 

02:40:58.600 --> 02:41:00.000 align:start position:0%
scope but then when we're outside of the
block<02:40:58.810><c> when</c><02:40:59.050><c> we're</c><02:40:59.170><c> outside</c><02:40:59.350><c> of</c><02:40:59.890><c> these</c>

02:41:00.000 --> 02:41:00.010 align:start position:0%
block when we're outside of these
 

02:41:00.010 --> 02:41:02.910 align:start position:0%
block when we're outside of these
squiggly<02:41:00.550><c> braces</c><02:41:00.760><c> here</c><02:41:01.330><c> we</c><02:41:02.020><c> can</c><02:41:02.260><c> still</c><02:41:02.620><c> access</c>

02:41:02.910 --> 02:41:02.920 align:start position:0%
squiggly braces here we can still access
 

02:41:02.920 --> 02:41:07.050 align:start position:0%
squiggly braces here we can still access
I<02:41:03.520><c> here</c><02:41:04.120><c> and</c><02:41:04.270><c> it</c><02:41:04.689><c> set</c><02:41:04.930><c> the</c><02:41:05.080><c> block</c><02:41:05.319><c> scope</c><02:41:05.819><c> but</c><02:41:06.819><c> if</c>

02:41:07.050 --> 02:41:07.060 align:start position:0%
I here and it set the block scope but if
 

02:41:07.060 --> 02:41:10.139 align:start position:0%
I here and it set the block scope but if
this<02:41:07.330><c> was</c><02:41:07.569><c> a</c><02:41:07.779><c> let</c><02:41:08.410><c> and</c><02:41:08.800><c> we're</c><02:41:09.729><c> declaring</c>

02:41:10.139 --> 02:41:10.149 align:start position:0%
this was a let and we're declaring
 

02:41:10.149 --> 02:41:13.200 align:start position:0%
this was a let and we're declaring
inside<02:41:10.630><c> this</c><02:41:10.810><c> block</c><02:41:11.109><c> if</c><02:41:11.380><c> we</c><02:41:11.500><c> run</c><02:41:11.770><c> that</c><02:41:12.210><c> now</c>

02:41:13.200 --> 02:41:13.210 align:start position:0%
inside this block if we run that now
 

02:41:13.210 --> 02:41:16.440 align:start position:0%
inside this block if we run that now
when<02:41:13.840><c> we</c><02:41:13.989><c> get</c><02:41:14.229><c> outside</c><02:41:14.859><c> the</c><02:41:15.189><c> block</c><02:41:15.460><c> we</c><02:41:16.149><c> get</c><02:41:16.359><c> an</c>

02:41:16.440 --> 02:41:16.450 align:start position:0%
when we get outside the block we get an
 

02:41:16.450 --> 02:41:18.840 align:start position:0%
when we get outside the block we get an
error<02:41:16.750><c> because</c><02:41:16.840><c> it's</c><02:41:17.260><c> not</c><02:41:17.500><c> defined</c>

02:41:18.840 --> 02:41:18.850 align:start position:0%
error because it's not defined
 

02:41:18.850 --> 02:41:20.399 align:start position:0%
error because it's not defined
so<02:41:18.939><c> that's</c><02:41:19.239><c> another</c><02:41:19.449><c> reason</c><02:41:19.720><c> why</c><02:41:19.960><c> people</c><02:41:19.989><c> use</c>

02:41:20.399 --> 02:41:20.409 align:start position:0%
so that's another reason why people use
 

02:41:20.409 --> 02:41:23.429 align:start position:0%
so that's another reason why people use
let<02:41:20.770><c> instead</c><02:41:21.340><c> of</c><02:41:21.489><c> var</c><02:41:21.819><c> is</c><02:41:22.119><c> so</c><02:41:22.840><c> that</c><02:41:23.080><c> they</c><02:41:23.229><c> can</c>

02:41:23.429 --> 02:41:23.439 align:start position:0%
let instead of var is so that they can
 

02:41:23.439 --> 02:41:25.979 align:start position:0%
let instead of var is so that they can
make<02:41:23.680><c> sure</c><02:41:23.710><c> the</c><02:41:24.279><c> variable</c><02:41:24.880><c> is</c><02:41:25.060><c> only</c><02:41:25.090><c> defined</c>

02:41:25.979 --> 02:41:25.989 align:start position:0%
make sure the variable is only defined
 

02:41:25.989 --> 02:41:28.080 align:start position:0%
make sure the variable is only defined
in<02:41:26.350><c> the</c><02:41:26.470><c> area</c><02:41:26.859><c> they</c><02:41:27.010><c> want</c><02:41:27.189><c> to</c><02:41:27.369><c> be</c><02:41:27.489><c> defined</c><02:41:27.850><c> in</c>

02:41:28.080 --> 02:41:28.090 align:start position:0%
in the area they want to be defined in
 

02:41:28.090 --> 02:41:35.730 align:start position:0%
in the area they want to be defined in
but<02:41:28.899><c> for</c><02:41:29.140><c> now</c><02:41:29.290><c> I'll</c><02:41:29.760><c> uncomment</c><02:41:30.760><c> this</c><02:41:30.909><c> out</c>

02:41:35.730 --> 02:41:35.740 align:start position:0%
 
 

02:41:35.740 --> 02:41:37.950 align:start position:0%
 
const<02:41:36.640><c> is</c><02:41:36.820><c> another</c><02:41:37.240><c> way</c><02:41:37.479><c> to</c><02:41:37.540><c> declare</c><02:41:37.870><c> a</c>

02:41:37.950 --> 02:41:37.960 align:start position:0%
const is another way to declare a
 

02:41:37.960 --> 02:41:40.650 align:start position:0%
const is another way to declare a
variable<02:41:38.080><c> it</c><02:41:38.860><c> has</c><02:41:39.070><c> all</c><02:41:39.490><c> the</c><02:41:39.850><c> features</c><02:41:40.210><c> of</c><02:41:40.240><c> left</c>

02:41:40.650 --> 02:41:40.660 align:start position:0%
variable it has all the features of left
 

02:41:40.660 --> 02:41:43.200 align:start position:0%
variable it has all the features of left
but<02:41:41.350><c> it's</c><02:41:41.530><c> also</c><02:41:41.800><c> read-only</c>

02:41:43.200 --> 02:41:43.210 align:start position:0%
but it's also read-only
 

02:41:43.210 --> 02:41:46.469 align:start position:0%
but it's also read-only
you<02:41:43.450><c> cannot</c><02:41:43.900><c> reassign</c><02:41:44.710><c> a</c><02:41:44.740><c> Const</c><02:41:45.520><c> so</c><02:41:46.030><c> let's</c>

02:41:46.469 --> 02:41:46.479 align:start position:0%
you cannot reassign a Const so let's
 

02:41:46.479 --> 02:41:48.540 align:start position:0%
you cannot reassign a Const so let's
look<02:41:46.660><c> at</c><02:41:46.840><c> this</c><02:41:46.990><c> program</c><02:41:47.260><c> here</c><02:41:47.860><c> we're</c><02:41:48.310><c> running</c>

02:41:48.540 --> 02:41:48.550 align:start position:0%
look at this program here we're running
 

02:41:48.550 --> 02:41:51.270 align:start position:0%
look at this program here we're running
this<02:41:48.880><c> print</c><02:41:49.300><c> many</c><02:41:49.570><c> times</c><02:41:50.020><c> and</c><02:41:50.500><c> it's</c><02:41:50.920><c> going</c><02:41:51.160><c> to</c>

02:41:51.270 --> 02:41:51.280 align:start position:0%
this print many times and it's going to
 

02:41:51.280 --> 02:41:54.150 align:start position:0%
this print many times and it's going to
log<02:41:51.760><c> out</c><02:41:52.000><c> this</c><02:41:52.360><c> sentence</c><02:41:52.990><c> and</c><02:41:53.260><c> the</c><02:41:53.710><c> sentence</c>

02:41:54.150 --> 02:41:54.160 align:start position:0%
log out this sentence and the sentence
 

02:41:54.160 --> 02:41:56.940 align:start position:0%
log out this sentence and the sentence
is<02:41:54.310><c> up</c><02:41:54.490><c> here</c><02:41:54.760><c> vard</c><02:41:55.090><c> sentence</c><02:41:55.960><c> is</c><02:41:56.140><c> declared</c><02:41:56.650><c> and</c>

02:41:56.940 --> 02:41:56.950 align:start position:0%
is up here vard sentence is declared and
 

02:41:56.950 --> 02:42:00.390 align:start position:0%
is up here vard sentence is declared and
then<02:41:57.760><c> we</c><02:41:57.970><c> reassign</c><02:41:58.630><c> it</c><02:41:58.780><c> here</c><02:41:59.140><c> so</c><02:41:59.620><c> first</c><02:42:00.100><c> we</c>

02:42:00.390 --> 02:42:00.400 align:start position:0%
then we reassign it here so first we
 

02:42:00.400 --> 02:42:02.310 align:start position:0%
then we reassign it here so first we
declare<02:42:00.970><c> this</c><02:42:01.090><c> sentence</c><02:42:01.510><c> to</c><02:42:01.660><c> be</c><02:42:01.780><c> the</c><02:42:01.990><c> string</c>

02:42:02.310 --> 02:42:02.320 align:start position:0%
declare this sentence to be the string
 

02:42:02.320 --> 02:42:05.070 align:start position:0%
declare this sentence to be the string
is<02:42:02.590><c> cool</c><02:42:02.979><c> then</c><02:42:03.580><c> it's</c><02:42:03.729><c> reassigned</c><02:42:04.450><c> to</c><02:42:04.810><c> be</c><02:42:04.930><c> the</c>

02:42:05.070 --> 02:42:05.080 align:start position:0%
is cool then it's reassigned to be the
 

02:42:05.080 --> 02:42:07.680 align:start position:0%
is cool then it's reassigned to be the
string<02:42:05.380><c> it's</c><02:42:05.560><c> amazing</c><02:42:06.070><c> so</c><02:42:06.670><c> if</c><02:42:06.850><c> we</c><02:42:06.970><c> run</c><02:42:07.240><c> that</c><02:42:07.270><c> it</c>

02:42:07.680 --> 02:42:07.690 align:start position:0%
string it's amazing so if we run that it
 

02:42:07.690 --> 02:42:09.900 align:start position:0%
string it's amazing so if we run that it
should<02:42:08.170><c> work</c><02:42:08.380><c> it</c><02:42:08.620><c> prints</c><02:42:08.920><c> free</c><02:42:09.190><c> code</c><02:42:09.490><c> camp</c><02:42:09.790><c> is</c>

02:42:09.900 --> 02:42:09.910 align:start position:0%
should work it prints free code camp is
 

02:42:09.910 --> 02:42:13.920 align:start position:0%
should work it prints free code camp is
amazing<02:42:10.479><c> many</c><02:42:11.110><c> times</c><02:42:11.500><c> but</c><02:42:12.310><c> if</c><02:42:12.640><c> we</c><02:42:13.240><c> change</c><02:42:13.540><c> this</c>

02:42:13.920 --> 02:42:13.930 align:start position:0%
amazing many times but if we change this
 

02:42:13.930 --> 02:42:16.770 align:start position:0%
amazing many times but if we change this
to<02:42:14.040><c> Const</c><02:42:15.040><c> let's</c><02:42:15.700><c> see</c><02:42:15.910><c> what</c><02:42:16.090><c> happens</c>

02:42:16.770 --> 02:42:16.780 align:start position:0%
to Const let's see what happens
 

02:42:16.780 --> 02:42:20.090 align:start position:0%
to Const let's see what happens
now<02:42:17.380><c> I'll</c><02:42:17.590><c> run</c><02:42:17.830><c> this</c><02:42:18.070><c> and</c><02:42:18.340><c> we</c><02:42:18.940><c> get</c><02:42:19.210><c> an</c><02:42:19.390><c> error</c>

02:42:20.090 --> 02:42:20.100 align:start position:0%
now I'll run this and we get an error
 

02:42:20.100 --> 02:42:24.030 align:start position:0%
now I'll run this and we get an error
sentence<02:42:21.100><c> is</c><02:42:21.280><c> read</c><02:42:21.850><c> only</c><02:42:22.479><c> if</c><02:42:22.900><c> you</c><02:42:23.500><c> declare</c><02:42:24.010><c> a</c>

02:42:24.030 --> 02:42:24.040 align:start position:0%
sentence is read only if you declare a
 

02:42:24.040 --> 02:42:26.850 align:start position:0%
sentence is read only if you declare a
variable<02:42:24.190><c> with</c><02:42:24.910><c> the</c><02:42:25.120><c> Const</c><02:42:25.720><c> keyword</c><02:42:26.050><c> you</c>

02:42:26.850 --> 02:42:26.860 align:start position:0%
variable with the Const keyword you
 

02:42:26.860 --> 02:42:30.810 align:start position:0%
variable with the Const keyword you
cannot<02:42:27.400><c> reassign</c><02:42:28.210><c> it</c><02:42:28.350><c> afterwards</c><02:42:29.460><c> this</c><02:42:30.460><c> can</c>

02:42:30.810 --> 02:42:30.820 align:start position:0%
cannot reassign it afterwards this can
 

02:42:30.820 --> 02:42:33.170 align:start position:0%
cannot reassign it afterwards this can
be<02:42:30.970><c> very</c><02:42:31.479><c> helpful</c><02:42:31.990><c> to</c><02:42:32.229><c> prevent</c><02:42:32.860><c> you</c><02:42:33.040><c> from</c>

02:42:33.170 --> 02:42:33.180 align:start position:0%
be very helpful to prevent you from
 

02:42:33.180 --> 02:42:36.330 align:start position:0%
be very helpful to prevent you from
accidentally<02:42:34.180><c> making</c><02:42:34.570><c> mistakes</c><02:42:35.170><c> later</c><02:42:35.530><c> if</c>

02:42:36.330 --> 02:42:36.340 align:start position:0%
accidentally making mistakes later if
 

02:42:36.340 --> 02:42:39.480 align:start position:0%
accidentally making mistakes later if
you<02:42:36.910><c> know</c><02:42:37.180><c> for</c><02:42:37.510><c> sure</c><02:42:37.570><c> that</c><02:42:38.410><c> you</c><02:42:38.650><c> never</c><02:42:38.979><c> want</c><02:42:39.400><c> to</c>

02:42:39.480 --> 02:42:39.490 align:start position:0%
you know for sure that you never want to
 

02:42:39.490 --> 02:42:43.860 align:start position:0%
you know for sure that you never want to
reassign<02:42:40.240><c> a</c><02:42:40.270><c> variable</c><02:42:41.050><c> always</c><02:42:42.040><c> use</c><02:42:42.430><c> Const</c><02:42:43.270><c> so</c>

02:42:43.860 --> 02:42:43.870 align:start position:0%
reassign a variable always use Const so
 

02:42:43.870 --> 02:42:46.740 align:start position:0%
reassign a variable always use Const so
you<02:42:43.960><c> don't</c><02:42:44.670><c> accidentally</c><02:42:45.670><c> reassign</c><02:42:46.390><c> it</c><02:42:46.420><c> when</c>

02:42:46.740 --> 02:42:46.750 align:start position:0%
you don't accidentally reassign it when
 

02:42:46.750 --> 02:42:49.950 align:start position:0%
you don't accidentally reassign it when
you<02:42:46.870><c> don't</c><02:42:47.080><c> mean</c><02:42:47.320><c> to</c><02:42:47.729><c> another</c><02:42:48.729><c> thing</c><02:42:49.150><c> is</c><02:42:49.390><c> when</c>

02:42:49.950 --> 02:42:49.960 align:start position:0%
you don't mean to another thing is when
 

02:42:49.960 --> 02:42:53.490 align:start position:0%
you don't mean to another thing is when
you're<02:42:50.080><c> using</c><02:42:50.290><c> Const</c><02:42:51.220><c> it's</c><02:42:51.880><c> very</c><02:42:52.420><c> common</c><02:42:53.170><c> to</c>

02:42:53.490 --> 02:42:53.500 align:start position:0%
you're using Const it's very common to
 

02:42:53.500 --> 02:42:56.070 align:start position:0%
you're using Const it's very common to
use<02:42:53.740><c> all</c><02:42:53.979><c> capital</c><02:42:54.820><c> letters</c><02:42:54.850><c> so</c><02:42:55.720><c> like</c><02:42:55.870><c> this</c>

02:42:56.070 --> 02:42:56.080 align:start position:0%
use all capital letters so like this
 

02:42:56.080 --> 02:42:59.520 align:start position:0%
use all capital letters so like this
sentence<02:42:57.060><c> like</c><02:42:58.060><c> that</c><02:42:58.300><c> and</c><02:42:58.600><c> that's</c><02:42:59.229><c> another</c>

02:42:59.520 --> 02:42:59.530 align:start position:0%
sentence like that and that's another
 

02:42:59.530 --> 02:43:02.219 align:start position:0%
sentence like that and that's another
way<02:42:59.740><c> to</c><02:42:59.770><c> remember</c><02:43:00.310><c> that</c><02:43:00.490><c> it's</c><02:43:00.820><c> a</c><02:43:00.910><c> constant</c><02:43:01.270><c> so</c>

02:43:02.219 --> 02:43:02.229 align:start position:0%
way to remember that it's a constant so
 

02:43:02.229 --> 02:43:04.920 align:start position:0%
way to remember that it's a constant so
if<02:43:02.320><c> I</c><02:43:02.440><c> rename</c><02:43:03.340><c> this</c><02:43:03.640><c> year</c><02:43:04.030><c> I'm</c><02:43:04.210><c> also</c><02:43:04.479><c> going</c><02:43:04.810><c> to</c>

02:43:04.920 --> 02:43:04.930 align:start position:0%
if I rename this year I'm also going to
 

02:43:04.930 --> 02:43:08.130 align:start position:0%
if I rename this year I'm also going to
have<02:43:05.050><c> to</c><02:43:05.440><c> repeat</c><02:43:05.950><c> it</c><02:43:05.979><c> here</c><02:43:06.370><c> and</c><02:43:06.930><c> while</c><02:43:07.930><c> we're</c>

02:43:08.130 --> 02:43:08.140 align:start position:0%
have to repeat it here and while we're
 

02:43:08.140 --> 02:43:10.830 align:start position:0%
have to repeat it here and while we're
at<02:43:08.320><c> it</c><02:43:08.350><c> we're</c><02:43:09.280><c> gonna</c><02:43:09.460><c> change</c><02:43:09.820><c> this</c><02:43:10.090><c> to</c><02:43:10.420><c> left</c>

02:43:10.830 --> 02:43:10.840 align:start position:0%
at it we're gonna change this to left
 

02:43:10.840 --> 02:43:13.170 align:start position:0%
at it we're gonna change this to left
because<02:43:11.380><c> for</c><02:43:11.950><c> the</c><02:43:12.040><c> most</c><02:43:12.250><c> part</c><02:43:12.580><c> you</c><02:43:12.820><c> should</c>

02:43:13.170 --> 02:43:13.180 align:start position:0%
because for the most part you should
 

02:43:13.180 --> 02:43:15.930 align:start position:0%
because for the most part you should
only<02:43:13.570><c> use</c><02:43:13.750><c> Const</c><02:43:14.650><c> or</c><02:43:14.860><c> let</c><02:43:15.190><c> but</c><02:43:15.640><c> there</c><02:43:15.820><c> are</c>

02:43:15.930 --> 02:43:15.940 align:start position:0%
only use Const or let but there are
 

02:43:15.940 --> 02:43:17.790 align:start position:0%
only use Const or let but there are
certain<02:43:16.510><c> circumstances</c><02:43:16.990><c> where</c><02:43:17.560><c> you</c><02:43:17.590><c> would</c>

02:43:17.790 --> 02:43:17.800 align:start position:0%
certain circumstances where you would
 

02:43:17.800 --> 02:43:20.850 align:start position:0%
certain circumstances where you would
use<02:43:17.950><c> var</c><02:43:18.340><c> and</c><02:43:18.720><c> also</c><02:43:19.720><c> in</c><02:43:19.990><c> some</c><02:43:20.260><c> other</c><02:43:20.320><c> videos</c><02:43:20.710><c> in</c>

02:43:20.850 --> 02:43:20.860 align:start position:0%
use var and also in some other videos in
 

02:43:20.860 --> 02:43:22.800 align:start position:0%
use var and also in some other videos in
this<02:43:20.950><c> course</c><02:43:21.190><c> I'll</c><02:43:21.460><c> be</c><02:43:21.550><c> using</c><02:43:21.670><c> var</c><02:43:22.060><c> but</c><02:43:22.660><c> in</c>

02:43:22.800 --> 02:43:22.810 align:start position:0%
this course I'll be using var but in
 

02:43:22.810 --> 02:43:25.440 align:start position:0%
this course I'll be using var but in
your<02:43:22.990><c> own</c><02:43:23.229><c> code</c><02:43:23.740><c> you</c><02:43:24.430><c> should</c><02:43:24.700><c> mainly</c><02:43:25.210><c> use</c>

02:43:25.440 --> 02:43:25.450 align:start position:0%
your own code you should mainly use
 

02:43:25.450 --> 02:43:28.290 align:start position:0%
your own code you should mainly use
Const<02:43:26.050><c> and</c><02:43:26.260><c> let</c><02:43:26.590><c> let's</c><02:43:27.340><c> reload</c><02:43:27.820><c> this</c><02:43:28.030><c> to</c><02:43:28.150><c> see</c>

02:43:28.290 --> 02:43:28.300 align:start position:0%
Const and let let's reload this to see
 

02:43:28.300 --> 02:43:30.300 align:start position:0%
Const and let let's reload this to see
what<02:43:28.450><c> happens</c><02:43:28.870><c> and</c><02:43:29.110><c> it</c><02:43:29.440><c> worked</c><02:43:29.680><c> free</c><02:43:30.010><c> code</c>

02:43:30.300 --> 02:43:30.310 align:start position:0%
what happens and it worked free code
 

02:43:30.310 --> 02:43:33.960 align:start position:0%
what happens and it worked free code
camp<02:43:30.610><c> is</c><02:43:30.880><c> cool</c><02:43:31.330><c> many</c><02:43:32.020><c> times</c><02:43:32.580><c> we</c><02:43:33.580><c> can</c><02:43:33.760><c> no</c><02:43:33.940><c> longer</c>

02:43:33.960 --> 02:43:33.970 align:start position:0%
camp is cool many times we can no longer
 

02:43:33.970 --> 02:43:36.719 align:start position:0%
camp is cool many times we can no longer
say<02:43:34.570><c> that</c><02:43:34.840><c> free</c><02:43:35.050><c> code</c><02:43:35.290><c> camp</c><02:43:35.560><c> is</c><02:43:35.710><c> awesome</c><02:43:36.190><c> even</c>

02:43:36.719 --> 02:43:36.729 align:start position:0%
say that free code camp is awesome even
 

02:43:36.729 --> 02:43:43.230 align:start position:0%
say that free code camp is awesome even
though<02:43:36.970><c> we</c><02:43:37.540><c> know</c><02:43:37.720><c> it</c><02:43:38.020><c> actually</c><02:43:38.650><c> is</c>

02:43:43.230 --> 02:43:43.240 align:start position:0%
 
 

02:43:43.240 --> 02:43:45.961 align:start position:0%
 
while<02:43:44.021><c> you</c><02:43:44.170><c> cannot</c><02:43:44.500><c> reassign</c><02:43:45.160><c> a</c><02:43:45.190><c> variable</c>

02:43:45.961 --> 02:43:45.971 align:start position:0%
while you cannot reassign a variable
 

02:43:45.971 --> 02:43:49.290 align:start position:0%
while you cannot reassign a variable
declared<02:43:46.181><c> with</c><02:43:46.721><c> Const</c><02:43:47.440><c> you</c><02:43:47.920><c> can</c><02:43:48.370><c> mutate</c><02:43:49.061><c> an</c>

02:43:49.290 --> 02:43:49.300 align:start position:0%
declared with Const you can mutate an
 

02:43:49.300 --> 02:43:51.930 align:start position:0%
declared with Const you can mutate an
array<02:43:49.690><c> so</c><02:43:50.410><c> look</c><02:43:50.710><c> at</c><02:43:50.860><c> this</c><02:43:51.010><c> example</c><02:43:51.070><c> that's</c><02:43:51.670><c> not</c>

02:43:51.930 --> 02:43:51.940 align:start position:0%
array so look at this example that's not
 

02:43:51.940 --> 02:43:52.711 align:start position:0%
array so look at this example that's not
gonna<02:43:52.181><c> work</c>

02:43:52.711 --> 02:43:52.721 align:start position:0%
gonna work
 

02:43:52.721 --> 02:43:56.190 align:start position:0%
gonna work
first<02:43:53.320><c> we</c><02:43:53.891><c> declare</c><02:43:54.101><c> the</c><02:43:54.730><c> variable</c><02:43:55.120><c> s</c><02:43:55.330><c> and</c><02:43:55.811><c> we</c>

02:43:56.190 --> 02:43:56.200 align:start position:0%
first we declare the variable s and we
 

02:43:56.200 --> 02:43:58.110 align:start position:0%
first we declare the variable s and we
assign<02:43:56.471><c> it</c><02:43:56.650><c> to</c><02:43:56.681><c> an</c><02:43:56.891><c> array</c><02:43:57.010><c> we</c><02:43:57.610><c> declare</c><02:43:57.940><c> with</c>

02:43:58.110 --> 02:43:58.120 align:start position:0%
assign it to an array we declare with
 

02:43:58.120 --> 02:44:01.171 align:start position:0%
assign it to an array we declare with
Const<02:43:58.780><c> and</c><02:43:58.931><c> now</c><02:43:59.471><c> we're</c><02:43:59.650><c> gonna</c><02:43:59.771><c> reassign</c><02:44:00.700><c> the</c>

02:44:01.171 --> 02:44:01.181 align:start position:0%
Const and now we're gonna reassign the
 

02:44:01.181 --> 02:44:03.930 align:start position:0%
Const and now we're gonna reassign the
variable<02:44:01.780><c> s</c><02:44:02.021><c> here</c><02:44:02.530><c> but</c><02:44:03.010><c> if</c><02:44:03.101><c> we</c><02:44:03.130><c> do</c><02:44:03.370><c> that</c><02:44:03.641><c> we're</c>

02:44:03.930 --> 02:44:03.940 align:start position:0%
variable s here but if we do that we're
 

02:44:03.940 --> 02:44:07.801 align:start position:0%
variable s here but if we do that we're
gonna<02:44:04.061><c> get</c><02:44:04.360><c> the</c><02:44:04.420><c> air</c><02:44:04.870><c> s</c><02:44:05.440><c> is</c><02:44:05.980><c> read-only</c><02:44:06.811><c> however</c>

02:44:07.801 --> 02:44:07.811 align:start position:0%
gonna get the air s is read-only however
 

02:44:07.811 --> 02:44:11.881 align:start position:0%
gonna get the air s is read-only however
we<02:44:08.141><c> can</c><02:44:08.650><c> update</c><02:44:09.431><c> the</c><02:44:10.030><c> array</c><02:44:10.330><c> using</c><02:44:11.110><c> bracket</c>

02:44:11.881 --> 02:44:11.891 align:start position:0%
we can update the array using bracket
 

02:44:11.891 --> 02:44:14.520 align:start position:0%
we can update the array using bracket
notation<02:44:12.120><c> so</c><02:44:13.120><c> I'll</c><02:44:13.391><c> just</c><02:44:13.630><c> comment</c><02:44:14.080><c> that</c><02:44:14.141><c> out</c>

02:44:14.520 --> 02:44:14.530 align:start position:0%
notation so I'll just comment that out
 

02:44:14.530 --> 02:44:18.000 align:start position:0%
notation so I'll just comment that out
and<02:44:14.561><c> using</c><02:44:15.521><c> bracket</c><02:44:16.030><c> notation</c><02:44:16.150><c> I'll</c><02:44:16.931><c> do</c><02:44:17.200><c> index</c>

02:44:18.000 --> 02:44:18.010 align:start position:0%
and using bracket notation I'll do index
 

02:44:18.010 --> 02:44:24.091 align:start position:0%
and using bracket notation I'll do index
0<02:44:18.400><c> I'll</c><02:44:18.820><c> assign</c><02:44:19.540><c> that</c><02:44:19.900><c> to</c><02:44:19.960><c> to</c><02:44:21.150><c> index</c><02:44:22.150><c> 1</c><02:44:23.141><c> I'll</c>

02:44:24.091 --> 02:44:24.101 align:start position:0%
0 I'll assign that to to index 1 I'll
 

02:44:24.101 --> 02:44:30.841 align:start position:0%
0 I'll assign that to to index 1 I'll
assign<02:44:25.061><c> that</c><02:44:25.510><c> to</c><02:44:25.980><c> 5</c><02:44:26.980><c> and</c><02:44:27.540><c> then</c><02:44:28.540><c> index</c><02:44:29.380><c> 2</c><02:44:30.190><c> I'll</c>

02:44:30.841 --> 02:44:30.851 align:start position:0%
assign that to 5 and then index 2 I'll
 

02:44:30.851 --> 02:44:35.730 align:start position:0%
assign that to 5 and then index 2 I'll
assign<02:44:31.510><c> that</c><02:44:31.811><c> to</c><02:44:32.221><c> 7</c><02:44:33.221><c> and</c><02:44:33.811><c> just</c><02:44:34.811><c> like</c><02:44:35.021><c> that</c><02:44:35.351><c> it</c>

02:44:35.730 --> 02:44:35.740 align:start position:0%
assign that to 7 and just like that it
 

02:44:35.740 --> 02:44:39.030 align:start position:0%
assign that to 7 and just like that it
is<02:44:35.920><c> going</c><02:44:36.370><c> to</c><02:44:36.750><c> reassign</c><02:44:37.750><c> the</c><02:44:37.931><c> array</c><02:44:38.170><c> so</c><02:44:38.740><c> if</c><02:44:38.891><c> I</c>

02:44:39.030 --> 02:44:39.040 align:start position:0%
is going to reassign the array so if I
 

02:44:39.040 --> 02:44:43.171 align:start position:0%
is going to reassign the array so if I
just<02:44:39.311><c> do</c><02:44:39.670><c> a</c><02:44:39.700><c> console</c><02:44:40.360><c> dot</c><02:44:40.570><c> log</c><02:44:40.630><c> here</c><02:44:42.181><c> console</c>

02:44:43.171 --> 02:44:43.181 align:start position:0%
just do a console dot log here console
 

02:44:43.181 --> 02:44:46.770 align:start position:0%
just do a console dot log here console
dot<02:44:43.420><c> log</c><02:44:43.480><c> and</c><02:44:44.400><c> put</c><02:44:45.400><c> the</c><02:44:45.580><c> array</c><02:44:45.820><c> in</c><02:44:46.000><c> there</c><02:44:46.300><c> we</c>

02:44:46.770 --> 02:44:46.780 align:start position:0%
dot log and put the array in there we
 

02:44:46.780 --> 02:44:54.270 align:start position:0%
dot log and put the array in there we
should<02:44:47.080><c> see</c><02:44:47.410><c> the</c><02:44:47.620><c> new</c><02:44:47.891><c> array</c><02:44:48.670><c> here</c><02:44:49.000><c> 2</c><02:44:49.300><c> 5</c><02:44:49.630><c> 7</c>

02:44:54.270 --> 02:44:54.280 align:start position:0%
 
 

02:44:54.280 --> 02:44:58.440 align:start position:0%
 
as<02:44:54.601><c> seen</c><02:44:55.601><c> previously</c><02:44:56.290><c> a</c><02:44:56.681><c> Const</c><02:44:57.641><c> declaration</c>

02:44:58.440 --> 02:44:58.450 align:start position:0%
as seen previously a Const declaration
 

02:44:58.450 --> 02:45:00.421 align:start position:0%
as seen previously a Const declaration
alone<02:44:58.811><c> doesn't</c><02:44:59.261><c> really</c><02:44:59.620><c> protect</c><02:44:59.860><c> your</c><02:45:00.250><c> data</c>

02:45:00.421 --> 02:45:00.431 align:start position:0%
alone doesn't really protect your data
 

02:45:00.431 --> 02:45:03.690 align:start position:0%
alone doesn't really protect your data
from<02:45:00.910><c> mutation</c><02:45:01.900><c> if</c><02:45:02.200><c> you</c><02:45:02.830><c> have</c><02:45:02.920><c> an</c><02:45:03.011><c> object</c><02:45:03.250><c> or</c>

02:45:03.690 --> 02:45:03.700 align:start position:0%
from mutation if you have an object or
 

02:45:03.700 --> 02:45:06.150 align:start position:0%
from mutation if you have an object or
an<02:45:03.851><c> array</c><02:45:04.120><c> you</c><02:45:04.181><c> can</c><02:45:04.420><c> still</c><02:45:04.870><c> mutate</c><02:45:05.471><c> it</c><02:45:05.620><c> even</c><02:45:06.040><c> if</c>

02:45:06.150 --> 02:45:06.160 align:start position:0%
an array you can still mutate it even if
 

02:45:06.160 --> 02:45:08.940 align:start position:0%
an array you can still mutate it even if
it's<02:45:06.311><c> declared</c><02:45:06.761><c> with</c><02:45:07.090><c> Const</c><02:45:07.900><c> there</c><02:45:08.740><c> is</c>

02:45:08.940 --> 02:45:08.950 align:start position:0%
it's declared with Const there is
 

02:45:08.950 --> 02:45:12.150 align:start position:0%
it's declared with Const there is
something<02:45:09.400><c> called</c><02:45:09.641><c> object</c><02:45:10.450><c> dot</c><02:45:10.780><c> freeze</c><02:45:11.410><c> that</c>

02:45:12.150 --> 02:45:12.160 align:start position:0%
something called object dot freeze that
 

02:45:12.160 --> 02:45:15.390 align:start position:0%
something called object dot freeze that
will<02:45:12.460><c> prevent</c><02:45:13.120><c> data</c><02:45:13.630><c> mutation</c><02:45:14.530><c> so</c><02:45:15.101><c> let</c><02:45:15.280><c> me</c>

02:45:15.390 --> 02:45:15.400 align:start position:0%
will prevent data mutation so let me
 

02:45:15.400 --> 02:45:17.820 align:start position:0%
will prevent data mutation so let me
talk<02:45:15.820><c> to</c><02:45:16.000><c> you</c><02:45:16.061><c> about</c><02:45:16.150><c> object</c><02:45:16.840><c> dot</c><02:45:17.021><c> freeze</c>

02:45:17.820 --> 02:45:17.830 align:start position:0%
talk to you about object dot freeze
 

02:45:17.830 --> 02:45:19.740 align:start position:0%
talk to you about object dot freeze
first<02:45:18.400><c> of</c><02:45:18.550><c> all</c><02:45:18.641><c> let's</c><02:45:18.940><c> understand</c><02:45:19.540><c> this</c>

02:45:19.740 --> 02:45:19.750 align:start position:0%
first of all let's understand this
 

02:45:19.750 --> 02:45:22.080 align:start position:0%
first of all let's understand this
function<02:45:20.050><c> here</c><02:45:20.620><c> we're</c><02:45:21.250><c> using</c><02:45:21.280><c> this</c><02:45:21.641><c> function</c>

02:45:22.080 --> 02:45:22.090 align:start position:0%
function here we're using this function
 

02:45:22.090 --> 02:45:24.961 align:start position:0%
function here we're using this function
to<02:45:22.360><c> demonstrate</c><02:45:23.021><c> object</c><02:45:23.380><c> dot</c><02:45:23.530><c> freeze</c><02:45:23.920><c> so</c><02:45:24.610><c> it's</c>

02:45:24.961 --> 02:45:24.971 align:start position:0%
to demonstrate object dot freeze so it's
 

02:45:24.971 --> 02:45:27.511 align:start position:0%
to demonstrate object dot freeze so it's
going<02:45:25.271><c> to</c><02:45:25.450><c> create</c><02:45:25.811><c> this</c><02:45:26.080><c> constant</c><02:45:26.860><c> math</c>

02:45:27.511 --> 02:45:27.521 align:start position:0%
going to create this constant math
 

02:45:27.521 --> 02:45:30.330 align:start position:0%
going to create this constant math
constants<02:45:28.210><c> with</c><02:45:28.480><c> the</c><02:45:28.630><c> PI</c><02:45:28.931><c> in</c><02:45:29.170><c> it</c><02:45:29.351><c> this</c><02:45:29.950><c> is</c><02:45:30.190><c> an</c>

02:45:30.330 --> 02:45:30.340 align:start position:0%
constants with the PI in it this is an
 

02:45:30.340 --> 02:45:34.410 align:start position:0%
constants with the PI in it this is an
object<02:45:30.940><c> and</c><02:45:31.800><c> right</c><02:45:32.800><c> now</c><02:45:33.160><c> this</c><02:45:33.820><c> can</c><02:45:34.090><c> still</c><02:45:34.360><c> be</c>

02:45:34.410 --> 02:45:34.420 align:start position:0%
object and right now this can still be
 

02:45:34.420 --> 02:45:38.790 align:start position:0%
object and right now this can still be
changed<02:45:35.130><c> so</c><02:45:36.130><c> if</c><02:45:36.521><c> we</c><02:45:36.880><c> look</c><02:45:37.210><c> down</c><02:45:37.480><c> here</c><02:45:37.620><c> this</c><02:45:38.620><c> is</c>

02:45:38.790 --> 02:45:38.800 align:start position:0%
changed so if we look down here this is
 

02:45:38.800 --> 02:45:41.580 align:start position:0%
changed so if we look down here this is
a<02:45:38.971><c> try-catch</c><02:45:39.971><c> block</c><02:45:40.391><c> will</c><02:45:41.200><c> talk</c><02:45:41.440><c> about</c>

02:45:41.580 --> 02:45:41.590 align:start position:0%
a try-catch block will talk about
 

02:45:41.590 --> 02:45:43.830 align:start position:0%
a try-catch block will talk about
try-catch<02:45:42.250><c> blocks</c><02:45:42.610><c> in</c><02:45:42.851><c> more</c><02:45:43.061><c> detail</c><02:45:43.450><c> later</c>

02:45:43.830 --> 02:45:43.840 align:start position:0%
try-catch blocks in more detail later
 

02:45:43.840 --> 02:45:46.290 align:start position:0%
try-catch blocks in more detail later
but<02:45:44.230><c> for</c><02:45:44.920><c> now</c><02:45:45.070><c> you</c><02:45:45.460><c> just</c><02:45:45.641><c> have</c><02:45:45.790><c> to</c><02:45:45.880><c> know</c><02:45:46.061><c> that</c>

02:45:46.290 --> 02:45:46.300 align:start position:0%
but for now you just have to know that
 

02:45:46.300 --> 02:45:48.421 align:start position:0%
but for now you just have to know that
it's<02:45:46.391><c> going</c><02:45:46.570><c> to</c><02:45:46.721><c> try</c><02:45:47.110><c> what's</c><02:45:47.860><c> in</c><02:45:48.011><c> the</c><02:45:48.130><c> first</c>

02:45:48.421 --> 02:45:48.431 align:start position:0%
it's going to try what's in the first
 

02:45:48.431 --> 02:45:50.280 align:start position:0%
it's going to try what's in the first
part<02:45:48.700><c> of</c><02:45:48.730><c> the</c><02:45:48.820><c> block</c><02:45:49.090><c> and</c><02:45:49.420><c> if</c><02:45:49.840><c> there's</c><02:45:50.110><c> an</c>

02:45:50.280 --> 02:45:50.290 align:start position:0%
part of the block and if there's an
 

02:45:50.290 --> 02:45:52.200 align:start position:0%
part of the block and if there's an
error<02:45:50.740><c> then</c><02:45:50.950><c> it's</c><02:45:51.130><c> going</c><02:45:51.400><c> to</c><02:45:51.580><c> go</c><02:45:51.940><c> into</c><02:45:52.090><c> the</c>

02:45:52.200 --> 02:45:52.210 align:start position:0%
error then it's going to go into the
 

02:45:52.210 --> 02:45:54.390 align:start position:0%
error then it's going to go into the
catch<02:45:52.480><c> part</c><02:45:52.900><c> and</c><02:45:53.170><c> it's</c><02:45:53.500><c> going</c><02:45:53.710><c> to</c><02:45:53.800><c> log</c><02:45:54.040><c> it</c><02:45:54.250><c> out</c>

02:45:54.390 --> 02:45:54.400 align:start position:0%
catch part and it's going to log it out
 

02:45:54.400 --> 02:45:56.790 align:start position:0%
catch part and it's going to log it out
so<02:45:55.300><c> right</c><02:45:55.601><c> now</c><02:45:55.840><c> we're</c><02:45:56.080><c> going</c><02:45:56.230><c> to</c><02:45:56.320><c> try</c><02:45:56.740><c> to</c>

02:45:56.790 --> 02:45:56.800 align:start position:0%
so right now we're going to try to
 

02:45:56.800 --> 02:46:01.320 align:start position:0%
so right now we're going to try to
change<02:45:57.271><c> math</c><02:45:58.271><c> constants</c><02:45:59.141><c> that</c><02:45:59.200><c> pi</c><02:45:59.650><c> to</c><02:46:00.190><c> 99</c><02:46:00.880><c> and</c>

02:46:01.320 --> 02:46:01.330 align:start position:0%
change math constants that pi to 99 and
 

02:46:01.330 --> 02:46:05.100 align:start position:0%
change math constants that pi to 99 and
if<02:46:02.261><c> you</c><02:46:02.380><c> can</c><02:46:02.561><c> see</c><02:46:02.860><c> right</c><02:46:03.190><c> here</c><02:46:03.780><c> we're</c><02:46:04.780><c> going</c><02:46:04.990><c> to</c>

02:46:05.100 --> 02:46:05.110 align:start position:0%
if you can see right here we're going to
 

02:46:05.110 --> 02:46:07.770 align:start position:0%
if you can see right here we're going to
return<02:46:05.891><c> the</c><02:46:06.340><c> math</c><02:46:06.610><c> that</c><02:46:06.820><c> constants</c><02:46:07.360><c> that</c><02:46:07.391><c> pi</c>

02:46:07.770 --> 02:46:07.780 align:start position:0%
return the math that constants that pi
 

02:46:07.780 --> 02:46:11.070 align:start position:0%
return the math that constants that pi
and<02:46:08.170><c> down</c><02:46:08.860><c> here</c><02:46:09.370><c> we</c><02:46:09.730><c> are</c><02:46:09.761><c> doing</c><02:46:10.601><c> into</c><02:46:11.050><c> a</c>

02:46:11.070 --> 02:46:11.080 align:start position:0%
and down here we are doing into a
 

02:46:11.080 --> 02:46:15.600 align:start position:0%
and down here we are doing into a
variable<02:46:11.830><c> called</c><02:46:12.250><c> pi</c><02:46:12.870><c> so</c><02:46:13.870><c> if</c><02:46:14.230><c> we</c><02:46:14.771><c> run</c><02:46:15.250><c> this</c>

02:46:15.600 --> 02:46:15.610 align:start position:0%
variable called pi so if we run this
 

02:46:15.610 --> 02:46:18.270 align:start position:0%
variable called pi so if we run this
you'll<02:46:16.120><c> see</c><02:46:16.210><c> that</c><02:46:16.811><c> we</c><02:46:17.080><c> console</c><02:46:17.590><c> that</c><02:46:17.740><c> log</c><02:46:17.920><c> time</c>

02:46:18.270 --> 02:46:18.280 align:start position:0%
you'll see that we console that log time
 

02:46:18.280 --> 02:46:21.841 align:start position:0%
you'll see that we console that log time
it's<02:46:18.550><c> 99</c><02:46:19.240><c> but</c><02:46:20.200><c> wait</c><02:46:20.590><c> a</c><02:46:20.620><c> second</c><02:46:21.280><c> we</c><02:46:21.431><c> don't</c><02:46:21.550><c> want</c>

02:46:21.841 --> 02:46:21.851 align:start position:0%
it's 99 but wait a second we don't want
 

02:46:21.851 --> 02:46:24.030 align:start position:0%
it's 99 but wait a second we don't want
pi<02:46:22.090><c> to</c><02:46:22.150><c> change</c><02:46:22.660><c> because</c><02:46:23.261><c> we</c><02:46:23.410><c> know</c><02:46:23.590><c> that</c><02:46:23.740><c> pi</c>

02:46:24.030 --> 02:46:24.040 align:start position:0%
pi to change because we know that pi
 

02:46:24.040 --> 02:46:27.150 align:start position:0%
pi to change because we know that pi
never<02:46:24.550><c> changes</c><02:46:25.330><c> that's</c><02:46:26.230><c> why</c><02:46:26.471><c> we're</c><02:46:26.710><c> gonna</c><02:46:26.830><c> use</c>

02:46:27.150 --> 02:46:27.160 align:start position:0%
never changes that's why we're gonna use
 

02:46:27.160 --> 02:46:30.001 align:start position:0%
never changes that's why we're gonna use
object<02:46:27.851><c> dot</c><02:46:28.150><c> freeze</c><02:46:28.690><c> so</c><02:46:29.410><c> I'll</c><02:46:29.530><c> put</c><02:46:29.800><c> it</c><02:46:29.860><c> right</c>

02:46:30.001 --> 02:46:30.011 align:start position:0%
object dot freeze so I'll put it right
 

02:46:30.011 --> 02:46:34.470 align:start position:0%
object dot freeze so I'll put it right
here<02:46:30.070><c> I'm</c><02:46:30.610><c> gonna</c><02:46:30.971><c> do</c><02:46:31.120><c> object</c><02:46:32.190><c> not</c><02:46:33.190><c> freeze</c><02:46:34.000><c> and</c>

02:46:34.470 --> 02:46:34.480 align:start position:0%
here I'm gonna do object not freeze and
 

02:46:34.480 --> 02:46:37.591 align:start position:0%
here I'm gonna do object not freeze and
then<02:46:35.261><c> in</c><02:46:35.620><c> parentheses</c><02:46:36.490><c> I'll</c><02:46:36.730><c> put</c><02:46:36.971><c> the</c><02:46:37.061><c> object</c>

02:46:37.591 --> 02:46:37.601 align:start position:0%
then in parentheses I'll put the object
 

02:46:37.601 --> 02:46:42.540 align:start position:0%
then in parentheses I'll put the object
which<02:46:38.110><c> is</c><02:46:38.380><c> math</c><02:46:39.811><c> constants</c><02:46:40.811><c> now</c><02:46:41.771><c> I've</c><02:46:42.101><c> frozen</c>

02:46:42.540 --> 02:46:42.550 align:start position:0%
which is math constants now I've frozen
 

02:46:42.550 --> 02:46:45.421 align:start position:0%
which is math constants now I've frozen
math<02:46:43.181><c> constants</c><02:46:44.080><c> so</c><02:46:44.740><c> when</c><02:46:44.950><c> it</c><02:46:45.040><c> tries</c><02:46:45.400><c> to</c>

02:46:45.421 --> 02:46:45.431 align:start position:0%
math constants so when it tries to
 

02:46:45.431 --> 02:46:49.140 align:start position:0%
math constants so when it tries to
change<02:46:46.210><c> math</c><02:46:46.900><c> constants</c><02:46:47.410><c> top</c><02:46:47.590><c> pi</c><02:46:47.950><c> here</c><02:46:48.521><c> it's</c>

02:46:49.140 --> 02:46:49.150 align:start position:0%
change math constants top pi here it's
 

02:46:49.150 --> 02:46:51.330 align:start position:0%
change math constants top pi here it's
not<02:46:49.511><c> going</c><02:46:49.840><c> to</c><02:46:49.960><c> work</c><02:46:50.200><c> and</c><02:46:50.471><c> it's</c><02:46:50.800><c> going</c><02:46:50.980><c> to</c><02:46:51.101><c> go</c>

02:46:51.330 --> 02:46:51.340 align:start position:0%
not going to work and it's going to go
 

02:46:51.340 --> 02:46:53.520 align:start position:0%
not going to work and it's going to go
into<02:46:51.521><c> this</c><02:46:51.610><c> catch</c><02:46:52.000><c> block</c><02:46:52.420><c> and</c><02:46:52.811><c> it's</c><02:46:53.230><c> going</c><02:46:53.410><c> to</c>

02:46:53.520 --> 02:46:53.530 align:start position:0%
into this catch block and it's going to
 

02:46:53.530 --> 02:46:56.640 align:start position:0%
into this catch block and it's going to
log<02:46:53.800><c> out</c><02:46:54.011><c> the</c><02:46:54.250><c> ear</c><02:46:54.490><c> or</c><02:46:54.880><c> the</c><02:46:55.030><c> exception</c><02:46:55.690><c> so</c><02:46:56.380><c> let</c>

02:46:56.640 --> 02:46:56.650 align:start position:0%
log out the ear or the exception so let
 

02:46:56.650 --> 02:46:59.520 align:start position:0%
log out the ear or the exception so let
me<02:46:56.740><c> run</c><02:46:56.920><c> that</c><02:46:57.190><c> and</c><02:46:57.490><c> you'll</c><02:46:57.971><c> see</c><02:46:58.261><c> type</c><02:46:59.261><c> air</c>

02:46:59.520 --> 02:46:59.530 align:start position:0%
me run that and you'll see type air
 

02:46:59.530 --> 02:47:01.501 align:start position:0%
me run that and you'll see type air
cannot<02:46:59.950><c> assign</c><02:47:00.280><c> to</c><02:47:00.521><c> read</c><02:47:00.700><c> only</c><02:47:00.790><c> probably</c><02:47:01.240><c> a</c><02:47:01.300><c> PI</c>

02:47:01.501 --> 02:47:01.511 align:start position:0%
cannot assign to read only probably a PI
 

02:47:01.511 --> 02:47:04.740 align:start position:0%
cannot assign to read only probably a PI
of<02:47:01.540><c> object</c><02:47:02.230><c> so</c><02:47:02.620><c> we</c><02:47:03.160><c> had</c><02:47:03.311><c> an</c><02:47:03.370><c> error</c><02:47:03.730><c> and</c><02:47:03.940><c> we</c><02:47:04.570><c> can</c>

02:47:04.740 --> 02:47:04.750 align:start position:0%
of object so we had an error and we can
 

02:47:04.750 --> 02:47:07.171 align:start position:0%
of object so we had an error and we can
see<02:47:04.990><c> here</c><02:47:05.380><c> that</c><02:47:05.561><c> pi</c><02:47:05.860><c> is</c><02:47:06.221><c> stays</c><02:47:06.550><c> the</c><02:47:06.761><c> same</c><02:47:06.790><c> at</c>

02:47:07.171 --> 02:47:07.181 align:start position:0%
see here that pi is stays the same at
 

02:47:07.181 --> 02:47:08.300 align:start position:0%
see here that pi is stays the same at
3.1

02:47:08.300 --> 02:47:08.310 align:start position:0%
3.1
 

02:47:08.310 --> 02:47:10.580 align:start position:0%
3.1
or<02:47:08.430><c> so</c><02:47:09.180><c> whenever</c><02:47:09.449><c> you</c><02:47:09.630><c> have</c><02:47:09.720><c> an</c><02:47:09.869><c> object</c><02:47:10.140><c> and</c>

02:47:10.580 --> 02:47:10.590 align:start position:0%
or so whenever you have an object and
 

02:47:10.590 --> 02:47:12.349 align:start position:0%
or so whenever you have an object and
you<02:47:10.680><c> don't</c><02:47:10.979><c> want</c><02:47:11.130><c> any</c><02:47:11.340><c> of</c><02:47:11.579><c> the</c><02:47:11.729><c> items</c><02:47:12.119><c> in</c><02:47:12.270><c> the</c>

02:47:12.349 --> 02:47:12.359 align:start position:0%
you don't want any of the items in the
 

02:47:12.359 --> 02:47:20.050 align:start position:0%
you don't want any of the items in the
object<02:47:12.750><c> to</c><02:47:12.840><c> change</c><02:47:12.920><c> use</c><02:47:13.920><c> object</c><02:47:14.550><c> dot</c><02:47:14.790><c> freeze</c>

02:47:20.050 --> 02:47:20.060 align:start position:0%
 
 

02:47:20.060 --> 02:47:22.630 align:start position:0%
 
this<02:47:20.689><c> function</c><02:47:21.290><c> here</c><02:47:21.739><c> is</c><02:47:21.949><c> called</c><02:47:22.369><c> an</c>

02:47:22.630 --> 02:47:22.640 align:start position:0%
this function here is called an
 

02:47:22.640 --> 02:47:25.330 align:start position:0%
this function here is called an
anonymous<02:47:23.300><c> function</c><02:47:23.600><c> it</c><02:47:24.439><c> doesn't</c><02:47:24.949><c> have</c><02:47:25.310><c> a</c>

02:47:25.330 --> 02:47:25.340 align:start position:0%
anonymous function it doesn't have a
 

02:47:25.340 --> 02:47:28.479 align:start position:0%
anonymous function it doesn't have a
name<02:47:25.729><c> it</c><02:47:26.540><c> is</c><02:47:26.930><c> assigned</c><02:47:27.560><c> to</c><02:47:27.800><c> this</c><02:47:28.010><c> variable</c>

02:47:28.479 --> 02:47:28.489 align:start position:0%
name it is assigned to this variable
 

02:47:28.489 --> 02:47:31.179 align:start position:0%
name it is assigned to this variable
magic<02:47:29.210><c> but</c><02:47:29.810><c> there's</c><02:47:30.020><c> no</c><02:47:30.260><c> word</c><02:47:30.529><c> right</c><02:47:30.800><c> before</c>

02:47:31.179 --> 02:47:31.189 align:start position:0%
magic but there's no word right before
 

02:47:31.189 --> 02:47:33.639 align:start position:0%
magic but there's no word right before
the<02:47:31.369><c> function</c><02:47:31.939><c> keyword</c><02:47:32.359><c> to</c><02:47:32.869><c> assign</c><02:47:33.380><c> the</c><02:47:33.500><c> name</c>

02:47:33.639 --> 02:47:33.649 align:start position:0%
the function keyword to assign the name
 

02:47:33.649 --> 02:47:36.309 align:start position:0%
the function keyword to assign the name
to<02:47:33.949><c> the</c><02:47:34.040><c> function</c><02:47:34.600><c> whenever</c><02:47:35.600><c> you</c><02:47:35.960><c> have</c><02:47:36.199><c> an</c>

02:47:36.309 --> 02:47:36.319 align:start position:0%
to the function whenever you have an
 

02:47:36.319 --> 02:47:38.740 align:start position:0%
to the function whenever you have an
anonymous<02:47:36.619><c> function</c><02:47:37.159><c> you</c><02:47:38.029><c> can</c><02:47:38.270><c> convert</c><02:47:38.689><c> it</c>

02:47:38.740 --> 02:47:38.750 align:start position:0%
anonymous function you can convert it
 

02:47:38.750 --> 02:47:41.859 align:start position:0%
anonymous function you can convert it
into<02:47:39.050><c> an</c><02:47:39.470><c> arrow</c><02:47:39.920><c> function</c><02:47:40.640><c> that</c><02:47:41.300><c> makes</c><02:47:41.630><c> it</c><02:47:41.810><c> a</c>

02:47:41.859 --> 02:47:41.869 align:start position:0%
into an arrow function that makes it a
 

02:47:41.869 --> 02:47:44.109 align:start position:0%
into an arrow function that makes it a
little<02:47:42.079><c> quicker</c><02:47:42.500><c> to</c><02:47:42.829><c> write</c><02:47:43.069><c> so</c><02:47:43.760><c> instead</c><02:47:44.060><c> of</c>

02:47:44.109 --> 02:47:44.119 align:start position:0%
little quicker to write so instead of
 

02:47:44.119 --> 02:47:46.179 align:start position:0%
little quicker to write so instead of
the<02:47:44.239><c> word</c><02:47:44.359><c> function</c><02:47:44.779><c> I'm</c><02:47:45.290><c> going</c><02:47:45.829><c> to</c><02:47:45.890><c> take</c><02:47:46.069><c> that</c>

02:47:46.179 --> 02:47:46.189 align:start position:0%
the word function I'm going to take that
 

02:47:46.189 --> 02:47:48.849 align:start position:0%
the word function I'm going to take that
out<02:47:46.310><c> completely</c><02:47:46.819><c> and</c><02:47:47.210><c> then</c><02:47:47.840><c> put</c><02:47:48.199><c> an</c><02:47:48.380><c> arrow</c>

02:47:48.849 --> 02:47:48.859 align:start position:0%
out completely and then put an arrow
 

02:47:48.859 --> 02:47:53.319 align:start position:0%
out completely and then put an arrow
here<02:47:50.170><c> so</c><02:47:51.170><c> this</c><02:47:51.529><c> is</c><02:47:51.770><c> the</c><02:47:52.069><c> same</c><02:47:52.340><c> thing</c><02:47:52.729><c> except</c>

02:47:53.319 --> 02:47:53.329 align:start position:0%
here so this is the same thing except
 

02:47:53.329 --> 02:47:55.149 align:start position:0%
here so this is the same thing except
it's<02:47:53.449><c> just</c><02:47:53.600><c> a</c><02:47:53.659><c> little</c><02:47:53.869><c> quicker</c><02:47:54.140><c> to</c><02:47:54.229><c> write</c><02:47:54.529><c> but</c>

02:47:55.149 --> 02:47:55.159 align:start position:0%
it's just a little quicker to write but
 

02:47:55.159 --> 02:47:58.599 align:start position:0%
it's just a little quicker to write but
we<02:47:55.369><c> can</c><02:47:55.550><c> shorten</c><02:47:56.090><c> this</c><02:47:56.300><c> even</c><02:47:56.930><c> more</c><02:47:57.290><c> if</c><02:47:57.739><c> we're</c>

02:47:58.599 --> 02:47:58.609 align:start position:0%
we can shorten this even more if we're
 

02:47:58.609 --> 02:48:02.050 align:start position:0%
we can shorten this even more if we're
just<02:47:58.939><c> returning</c><02:47:59.510><c> one</c><02:48:00.260><c> value</c><02:48:00.920><c> here</c><02:48:01.340><c> we</c><02:48:01.880><c> don't</c>

02:48:02.050 --> 02:48:02.060 align:start position:0%
just returning one value here we don't
 

02:48:02.060 --> 02:48:05.319 align:start position:0%
just returning one value here we don't
even<02:48:02.239><c> need</c><02:48:02.540><c> the</c><02:48:02.859><c> return</c><02:48:03.859><c> keyword</c><02:48:04.310><c> and</c><02:48:04.760><c> we</c>

02:48:05.319 --> 02:48:05.329 align:start position:0%
even need the return keyword and we
 

02:48:05.329 --> 02:48:07.840 align:start position:0%
even need the return keyword and we
don't<02:48:05.569><c> need</c><02:48:05.750><c> the</c><02:48:05.960><c> curly</c><02:48:06.380><c> braces</c><02:48:06.649><c> so</c><02:48:07.520><c> I</c><02:48:07.550><c> can</c>

02:48:07.840 --> 02:48:07.850 align:start position:0%
don't need the curly braces so I can
 

02:48:07.850 --> 02:48:10.870 align:start position:0%
don't need the curly braces so I can

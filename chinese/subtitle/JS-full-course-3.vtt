00:08:51.200 --> 00:08:54.310 align:start position:0%
const 定义一个保持不变的变量

00:08:54.320 --> 00:08:57.610 align:start position:0%
对，它可以一直不变

00:08:57.620 --> 00:08:59.890 align:start position:0%
比如在这里我声明 myName

00:08:59.900 --> 00:09:03.250 align:start position:0%
然后在这里改变它

00:09:03.260 --> 00:09:05.680 align:start position:0%
所以它一开始是 Beau，然后是 8

00:09:05.690 --> 00:09:08.890 align:start position:0%
而 const，你不能改变它

00:09:08.900 --> 00:09:10.750 align:start position:0%
如果你尝试改变它，就会返回错误

00:09:10.760 --> 00:09:12.280 align:start position:0%
现在我们就先讲这些

00:09:12.290 --> 00:09:17.579 align:start position:0%
稍后我们会讲更多关于不同类型变量的知识点

00:09:20.079 --> 00:09:23.040 align:start position:0%
声明变量和赋值变量是不一样的

00:09:23.050 --> 00:09:25.650 align:start position:0%
这是声明变量，var a

00:09:28.079 --> 00:09:28.089 align:start position:0%
然后后面是一个分号

00:09:28.089 --> 00:09:30.660 align:start position:0%
我之前没有提到分号

00:09:30.670 --> 00:09:33.210 align:start position:0%
不过在 JavaScript 中你应该使用分号结束一行代码

00:09:35.389 --> 00:09:35.399 align:start position:0%
不是要求必须加分号

00:09:35.399 --> 00:09:39.090 align:start position:0%
你可以完全忽略不加

00:09:41.649 --> 00:09:43.980 align:start position:0%
但是很多人都会建议你加分号

00:09:43.990 --> 00:09:47.819 align:start position:0%
这样可以明显识别一行代码的结尾

00:09:51.009 --> 00:09:53.309 align:start position:0%
所以这里我们声明一个变量 a

00:09:53.319 --> 00:09:56.069 align:start position:0%
这里我们赋值一个变量

00:09:56.079 --> 00:09:59.519 align:start position:0%
我们在这行代码里声明和赋值

00:09:59.529 --> 00:10:03.720 align:start position:0%
所以我们声明变量 b

00:10:03.730 --> 00:10:07.139 align:start position:0%
equal sign is the assignment operator it
等号是表示赋值的符号

00:10:07.149 --> 00:10:09.809 align:start position:0%
意思是将 2 赋值给 b

00:10:09.819 --> 00:10:12.600 align:start position:0%
我们不需要检查 b 是否等于 2

00:10:12.610 --> 00:10:15.299 align:start position:0%
我们只是将 2 赋值给 b

00:10:15.309 --> 00:10:21.840 align:start position:0%
然后我们可以赋其他值

00:10:21.850 --> 00:10:24.869 align:start position:0%
所以我可以输入 a = 7

00:10:24.869 --> 00:10:24.879 align:start position:0%
将 7 赋值给 a

00:10:24.879 --> 00:10:27.569 align:start position:0%
我不需要声明 a

00:10:27.579 --> 00:10:35.249 align:start position:0%
因为前面已经声明过了

00:10:35.259 --> 00:10:39.900 align:start position:0%
我也可以输入 b = a

00:10:39.910 --> 00:10:42.689 align:start position:0%
将 a 的内容赋值给 b

00:10:42.699 --> 00:10:44.749 align:start position:0%
再加上一个分号

00:10:44.759 --> 00:10:48.269 align:start position:0%
我想讲一下 console.log

00:10:48.279 --> 00:10:51.150 align:start position:0%
它可以让你看到控制台显示的内容

00:10:51.160 --> 00:10:54.809 align:start position:0%
所以我输入 console.log(a)

00:10:54.819 --> 00:10:56.519 align:start position:0%
然后点击加载

00:10:56.529 --> 00:11:00.179 align:start position:0%
你可以看到下面的控制台显示 7

00:11:00.189 --> 00:11:03.210 align:start position:0%
因为我们现在给 a 赋值 7

00:11:03.220 --> 00:11:05.100 align:start position:0%
所以当我们输入 console.log(a) 时

00:11:05.110 --> 00:11:09.360 align:start position:0%
这里显示 7

00:11:09.370 --> 00:11:12.900 align:start position:0%
如果我们在这里输入另一行 console.log

00:11:12.910 --> 00:11:15.210 align:start position:0%
控制台会显示刚才的 a 是什么值

00:11:19.480 --> 00:11:21.629 align:start position:0%
所以输入 console.log，然后运行

00:11:21.639 --> 00:11:24.600 align:start position:0%
我们可以看到 a 起初是 null 空值

00:11:24.610 --> 00:11:26.999 align:start position:0%
而现在 a 是 7

00:11:27.009 --> 00:11:28.980 align:start position:0%
所以这里是 null，而下面这里是 7

00:11:28.990 --> 00:11:33.999 align:start position:0%
所以你可以检查在你的程序中不同的点

00:11:34.009 --> 00:11:36.699 align:start position:0%
变量是什么值

00:11:36.709 --> 00:11:39.650 align:start position:0%
现在我们看一下另一个例子

00:11:39.660 --> 00:11:43.340 align:start position:0%
初始化一个变量，给它一个初始值

00:11:43.350 --> 00:11:47.689 align:start position:0%
同时声明这个变量

00:11:47.699 --> 00:11:50.990 align:start position:0%
我输入 var a = 9

00:11:51.000 --> 00:11:54.139 align:start position:0%
所以 var a 是声明变量

00:11:54.149 --> 00:11:56.119 align:start position:0%
= 9 是给它初始值

00:11:56.129 --> 00:12:00.400 align:start position:0%
等号就是赋值的符号

00:12:02.880 --> 00:12:05.870 align:start position:0%
在我们对变量做任何操作之前

00:12:05.880 --> 00:12:08.510 align:start position:0%
它们是未初始化的
